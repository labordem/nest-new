var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Account.html",[0,0.013,1,1.144]],["body/classes/Account.html",[0,0.009,1,2.147,2,0.889,3,0.197,4,0.197,5,0.108,6,1.842,7,0.272,8,1.161,9,1.087,10,2.27,11,2.461,12,2.347,13,2.953,14,1.699,15,2.461,16,2.953,17,1.883,18,2.495,19,3.738,20,1.327,21,2.103,22,4.902,23,0.765,24,0.026,25,1.76,26,2.378,27,2.477,28,3.696,29,3.008,30,1.296,31,2.477,32,2.977,33,2.094,34,4.145,35,2.477,36,1.723,37,3.696,38,3.461,39,3.696,40,2.477,41,5.063,42,2.477,43,2.244,44,1.441,45,1.241,46,3.738,47,2.477,48,2.167,49,2.477,50,2.477,51,2.468,52,2.477,53,2.749,54,2.477,55,3.738,56,2.16,57,2.477,58,4.435,59,3.125,60,2.461,61,1.842,62,2.477,63,2.094,64,2.477,65,4.421,66,2.477,67,0.832,68,1.522,69,0.391,70,4.421,71,1.379,72,1.654,73,3.125,74,2.468,75,3.696,76,3.696,77,3.125,78,1.178,79,1.504,80,0.294,81,2.477,82,2.477,83,2.477,84,2.477,85,2.685,86,2.094,87,2.094,88,1.699,89,2.616,90,1.842,91,3.696,92,2.477,93,2.477,94,2.477,95,2.094,96,2.094,97,2.477,98,1.379,99,2.477,100,2.477,101,2.477,102,0.009,103,0.014,104,0.009]],["title/controllers/AccountsController.html",[105,1.749,106,2.274]],["body/controllers/AccountsController.html",[0,0.009,1,2.193,3,0.183,4,0.183,5,0.221,7,0.252,9,1.572,10,2.423,14,2.421,18,1.092,20,1.253,21,2.009,23,0.645,24,0.026,25,1.516,26,2.135,30,1.164,44,1.572,45,2.135,56,0.945,67,1.866,68,2.595,69,0.507,71,1.278,78,1.092,79,1.394,80,0.183,88,1.623,102,0.009,103,0.013,104,0.009,105,1.179,106,2.331,107,1.179,108,1.941,109,1.708,110,2.296,111,1.943,112,3.775,113,3.571,114,3.99,115,3.49,116,3.141,117,4.223,118,1.941,119,2.363,120,2.296,121,2.296,122,1.919,123,1.708,124,2.296,125,2.296,126,2.296,127,2.296,128,2.296,129,5.345,130,2.296,131,2.296,132,2.296,133,2.296,134,2.296,135,1.941,136,3.476,137,2.296,138,2.296,139,2.296,140,2.564,141,2.296,142,2.296,143,2.951,144,1.941,145,1.708,146,1.941,147,2.951,148,3.49,149,3.49,150,0.552,151,2.296,152,1.941,153,1.533,154,1.708,155,1.941,156,2.296,157,2.296,158,1.092,159,1.394,160,1.708,161,2.296,162,1.708,163,2.296,164,2.296,165,1.278,166,1.941,167,1.708,168,1.867,169,1.941,170,1.708,171,2.12,172,1.941,173,1.708,174,2.296,175,2.296,176,1.394,177,1.092,178,5.075,179,2.296,180,2.135,181,1.941,182,2.296,183,2.296,184,2.296,185,2.296,186,2.296,187,3.571,188,2.296,189,2.296,190,2.296,191,2.296,192,2.296,193,3.49,194,2.296,195,2.296,196,2.296,197,1.341,198,4.718,199,2.951,200,2.12,201,1.543,202,3.49,203,2.296,204,2.296,205,2.296]],["title/modules/AccountsModule.html",[206,1.505,207,2.068]],["body/modules/AccountsModule.html",[0,0.016,1,1.412,3,0.335,4,0.335,5,0.183,24,0.026,25,1.914,69,0.525,79,2.554,80,0.335,102,0.016,103,0.02,104,0.016,106,3.909,107,2.737,150,1.012,168,2.868,169,3.556,173,3.128,206,2.587,207,4.05,208,2.16,209,2,210,2.554,211,2.554,212,2.16,213,3.554,214,2.554,215,3.556,216,3.556,217,3.086,218,3.237,219,2,220,2.554,221,4.206,222,2.809,223,2.16,224,3.128,225,4.206,226,2.809,227,3.556]],["title/injectables/AccountsService.html",[168,1.505,228,0.876]],["body/injectables/AccountsService.html",[0,0.006,1,2.037,3,0.138,4,0.138,5,0.193,7,0.191,9,1.58,10,2.566,12,2.367,14,2.168,15,0.966,17,1.929,20,1.006,21,3.005,23,0.649,24,0.026,25,0.623,29,1.81,30,1.156,36,1.397,38,2.458,44,1.58,45,2.076,55,1.468,56,0.715,60,1.56,61,1.291,67,1.804,68,2.545,69,0.458,72,1.159,78,0.826,79,1.054,80,0.138,85,2.458,88,1.077,98,3.14,102,0.006,103,0.01,104,0.006,111,2.253,112,2.085,113,2.37,114,3.422,116,2.622,118,2.37,119,1.963,122,1.929,123,2.085,135,1.468,136,3.159,140,2.141,145,2.085,150,0.418,155,1.468,158,0.826,159,1.054,165,0.966,166,1.468,167,1.291,168,1.239,170,1.291,171,1.702,172,1.468,173,1.291,177,1.333,180,2.245,197,2.394,217,2.377,223,0.891,224,1.291,228,0.721,229,0.826,230,1.468,231,3.525,232,3.525,233,2.803,234,2.803,235,1.439,236,1.736,237,3.422,238,1.736,239,2.803,240,1.736,241,2.803,242,1.736,243,2.803,244,1.736,245,1.736,246,1.736,247,5.202,248,1.736,249,1.872,250,2.37,251,4.047,252,4.047,253,1.736,254,1.736,255,1.736,256,2.803,257,1.736,258,2.803,259,2.981,260,1.736,261,1.468,262,1.333,263,1.736,264,2.085,265,2.803,266,1.736,267,1.468,268,1.736,269,1.736,270,1.736,271,1.736,272,4.016,273,4.047,274,2.803,275,2.803,276,1.736,277,4.047,278,2.803,279,2.803,280,2.803,281,2.803,282,1.736,283,1.736,284,1.736,285,4.998,286,4.047,287,4.75,288,1.736,289,1.736,290,1.736,291,1.468,292,2.803,293,2.803,294,1.736,295,1.439,296,1.736,297,1.736,298,1.736,299,1.736,300,1.736,301,1.054]],["title/classes/AllExceptionFilter.html",[0,0.013,302,2.533]],["body/classes/AllExceptionFilter.html",[0,0.013,2,1.222,3,0.271,4,0.271,5,0.148,7,0.374,9,1.001,20,1.666,23,0.411,24,0.026,30,0.713,44,1.001,67,1.143,69,0.472,74,2.274,78,1.619,80,0.271,102,0.013,103,0.017,104,0.013,122,1.222,150,0.819,153,2.274,197,2.028,201,1.505,295,2.382,302,3.451,303,3.922,304,2.879,305,3.098,306,5.277,307,5.666,308,4.639,309,4.462,310,3.524,311,5.666,312,3.404,313,6.118,314,4.639,315,3.404,316,2.532,317,2.938,318,4.639,319,4.639,320,2.274,321,4.639,322,4.639,323,3.404,324,3.404,325,1.895,326,3.404,327,3.404,328,3.404,329,5.294,330,3.404,331,5.294,332,2.274,333,3.098,334,5.929,335,3.404,336,3.404,337,3.404,338,4.639,339,3.404,340,3.404,341,3.404,342,3.404,343,3.404,344,3.404,345,3.404,346,2.274,347,3.404,348,2.879,349,3.404,350,3.404,351,3.404,352,2.067,353,3.404]],["title/modules/AppModule.html",[206,1.505,354,2.274]],["body/modules/AppModule.html",[0,0.015,3,0.326,4,0.326,5,0.178,24,0.026,69,0.529,80,0.326,102,0.015,103,0.019,104,0.015,150,0.985,206,2.555,207,3.913,208,2.103,209,1.948,210,2.487,211,2.487,212,2.103,213,2.487,214,2.487,218,3.183,219,1.948,220,2.487,222,2.736,223,2.103,226,3.501,354,4.511,355,3.464,356,3.464,357,3.913,358,3.913,359,4.096,360,4.096,361,2.736,362,3.047,363,4.096,364,4.096,365,3.047,366,4.096,367,2.736,368,4.096,369,4.096,370,4.096,371,4.096]],["title/controllers/AuthController.html",[105,1.749,372,2.274]],["body/controllers/AuthController.html",[0,0.008,1,2.142,3,0.171,4,0.171,5,0.093,7,0.236,9,1.53,12,2.645,14,1.273,17,1.868,20,1.19,21,3.056,23,0.655,24,0.026,26,1.999,29,1.102,30,1.09,36,1.784,44,1.53,45,1.36,67,1.747,68,2.499,69,0.476,71,1.194,80,0.171,88,2.297,98,1.845,102,0.008,103,0.012,104,0.008,105,1.102,107,1.102,109,1.596,111,1.845,119,1.465,122,1.868,143,3.424,145,1.596,147,1.814,150,0.516,154,1.596,158,1.02,159,1.303,176,1.303,177,1.02,180,1.999,187,1.814,197,1.892,219,1.576,295,1.102,301,1.303,346,4.151,372,2.213,373,1.814,374,1.814,375,2.802,376,1.845,377,3.424,378,3.424,379,3.424,380,4.049,381,2.145,382,3.314,383,3.314,384,2.145,385,4.4,386,2.145,387,2.145,388,2.459,389,2.145,390,3.402,391,3.314,392,1.814,393,3.042,394,3.314,395,2.145,396,5.602,397,5.203,398,5.203,399,1.814,400,3.314,401,3.314,402,3.314,403,2.145,404,1.814,405,3.402,406,3.314,407,3.314,408,2.145,409,3.314,410,2.802,411,2.145,412,3.314,413,3.314,414,2.145,415,2.802,416,2.145,417,2.145,418,2.802,419,0.883,420,2.079,421,1.596,422,2.145,423,1.433,424,2.145,425,2.145,426,1.814,427,2.145,428,1.814,429,1.814,430,1.433,431,2.145,432,2.145,433,2.145,434,2.145,435,2.145,436,2.145,437,2.145,438,2.145,439,4.049,440,2.145,441,3.314,442,2.145,443,2.145,444,2.145,445,2.145,446,2.145,447,2.145]],["title/modules/AuthModule.html",[206,1.505,357,2.068]],["body/modules/AuthModule.html",[0,0.013,1,1.211,3,0.287,4,0.287,5,0.157,24,0.026,25,1.732,69,0.535,79,2.191,80,0.287,102,0.013,103,0.018,104,0.013,107,2.477,150,0.868,168,2.751,206,2.402,208,1.852,209,1.716,210,2.191,211,2.191,212,1.852,213,3.3,214,2.191,217,2.96,218,2.929,219,1.716,220,2.191,222,2.409,223,1.852,224,2.683,226,2.409,227,3.05,262,2.294,357,4.12,372,3.63,419,1.485,420,3.195,421,2.683,448,3.05,449,3.05,450,3.779,451,3.779,452,3.607,453,3.607,454,3.05,455,2.683,456,3.607,457,3.607,458,3.607,459,3.607,460,3.05,461,2.683,462,3.607,463,3.05,464,3.05]],["title/injectables/AuthService.html",[228,0.876,420,1.749]],["body/injectables/AuthService.html",[0,0.005,1,2.218,3,0.102,4,0.102,5,0.056,7,0.141,9,1.656,11,1.583,12,2.319,13,1.899,14,1.571,15,1.213,16,1.899,17,1.566,18,0.61,20,0.783,21,2.95,23,0.68,24,0.026,29,2.1,30,1.18,36,1.911,44,1.656,45,0.955,51,0.856,67,1.863,68,2.429,69,0.417,72,0.856,80,0.102,98,3.037,102,0.005,103,0.008,104,0.005,119,1.662,122,2.022,150,0.308,158,0.61,159,0.778,168,1.928,171,0.778,177,1.037,180,2.132,181,1.084,197,2.408,199,1.843,200,2.788,201,2.117,219,1.037,228,0.561,229,0.61,235,1.119,262,1.037,264,4.588,267,1.084,272,4.525,295,1.722,301,2.283,325,1.583,346,3.067,348,1.084,361,0.856,362,0.953,375,1.843,376,1.213,377,1.843,378,1.843,379,2.404,385,1.843,388,2.283,392,1.843,399,1.843,404,1.084,405,2.649,410,1.843,419,0.528,420,1.119,426,1.084,428,1.084,429,1.084,455,0.953,460,3.458,461,0.953,463,2.404,464,1.084,465,1.084,466,2.179,467,2.179,468,2.179,469,2.179,470,2.179,471,2.843,472,3.76,473,2.843,474,2.843,475,2.843,476,1.282,477,4.089,478,1.282,479,2.179,480,1.282,481,2.843,482,2.179,483,1.282,484,2.179,485,1.282,486,2.179,487,1.282,488,2.179,489,1.282,490,2.179,491,1.282,492,2.093,493,1.282,494,1.282,495,2.093,496,1.282,497,3.354,498,1.282,499,2.179,500,2.179,501,1.282,502,1.282,503,1.282,504,1.282,505,1.282,506,1.282,507,1.282,508,1.282,509,1.282,510,1.282,511,1.843,512,1.282,513,1.282,514,2.179,515,1.282,516,1.282,517,1.084,518,1.084,519,1.119,520,1.084,521,1.084,522,2.843,523,1.282,524,3.354,525,2.179,526,3.354,527,1.282,528,1.282,529,1.282,530,1.282,531,1.282,532,1.084,533,1.282,534,1.282,535,1.282,536,2.179,537,2.179,538,1.843,539,1.282,540,1.282,541,1.282,542,1.282,543,2.836,544,1.282,545,1.084,546,2.179,547,2.179,548,1.282,549,1.282,550,1.282,551,1.282,552,1.282,553,2.179,554,2.179,555,1.282,556,1.282,557,1.282,558,2.179,559,1.282,560,2.179,561,1.282,562,2.843,563,3.354,564,2.179,565,2.179,566,2.179,567,1.282,568,2.179,569,1.282,570,1.282,571,2.179,572,1.282,573,4.788,574,2.843,575,2.843,576,4.089,577,2.404,578,2.179,579,2.179,580,2.404,581,1.282,582,2.179,583,1.282,584,1.282,585,1.282,586,1.282]],["title/classes/CreateAccountDto.html",[0,0.013,119,1.505]],["body/classes/CreateAccountDto.html",[0,0.018,2,1.338,3,0.297,4,0.297,5,0.162,7,0.41,8,1.549,12,2.517,13,3.689,16,3.689,17,2.195,23,0.71,24,0.026,26,2.259,30,1.232,36,1.912,43,2.993,44,1.728,53,3.667,69,0.297,80,0.297,88,2.259,89,2.796,90,2.772,95,3.152,96,3.152,102,0.014,103,0.018,104,0.014,119,2.179,376,3.272,587,5.169,588,2.772,589,3.152,590,4.372,591,3.727,592,4.168,593,4.372,594,3.727,595,3.727,596,2.772,597,3.727,598,4.168,599,3.569,600,3.152,601,1.914,602,3.727,603,4.93,604,3.152,605,3.152]],["title/classes/CreateUploadDto.html",[0,0.013,606,2.274]],["body/classes/CreateUploadDto.html",[0,0.016,2,1.103,3,0.245,4,0.245,5,0.287,7,0.338,8,1.357,9,1.742,23,0.781,24,0.026,26,2.339,30,1.275,36,1.882,45,1.821,69,0.245,80,0.245,89,2.895,102,0.011,103,0.016,104,0.011,310,3.621,332,3.621,352,3.696,599,3.93,601,1.577,606,2.885,607,5.255,608,2.597,609,3.816,610,3.717,611,4.066,612,3.717,613,3.717,614,3.717,615,3.072,616,3.214,617,3.214,618,3.072,619,4.585,620,3.072,621,4.585,622,5.713,623,3.072,624,4.033,625,3.072,626,5.011,627,3.072,628,3.072,629,2.597,630,2.597,631,3.653,632,3.214,633,2.597,634,2.597]],["title/interfaces/EmailJwtPayload.html",[492,1.896,635,1.505]],["body/interfaces/EmailJwtPayload.html",[3,0.361,4,0.361,5,0.197,7,0.498,8,1.755,11,3.68,14,2.54,15,2.524,18,2.156,23,0.674,24,0.026,32,3.942,45,2.18,48,2.004,56,2.3,69,0.361,80,0.482,102,0.017,103,0.021,104,0.017,419,1.867,492,3.11,495,2.524,519,2.328,635,2.677,636,2.753,637,3.028,638,3.028]],["title/interfaces/ForgotPasswordJwtPayload.html",[495,1.896,635,1.505]],["body/interfaces/ForgotPasswordJwtPayload.html",[3,0.361,4,0.361,5,0.197,7,0.498,8,1.755,11,3.68,14,2.54,15,2.524,18,2.156,23,0.674,24,0.026,32,3.942,45,2.18,48,2.004,56,2.3,69,0.361,80,0.482,102,0.017,103,0.021,104,0.017,419,1.867,492,2.524,495,3.11,519,2.328,635,2.677,636,2.753,637,3.028,638,3.028]],["title/guards/JwtAuthGuard.html",[639,2.533,640,2.533]],["body/guards/JwtAuthGuard.html",[0,0.016,3,0.341,4,0.341,5,0.187,7,0.471,9,1.26,20,1.937,23,0.517,24,0.026,30,1.13,44,1.26,48,2.385,67,1.439,68,2.221,69,0.47,80,0.341,102,0.016,103,0.02,104,0.016,122,1.539,150,1.031,180,1.647,228,1.388,235,3.032,305,2.863,320,2.863,325,3.004,640,4.013,641,3.188,642,4.992,643,3.188,644,5.4,645,4.286,646,3.624,647,4.139,648,4.286,649,4.992,650,3.624,651,2.603,652,2.386,653,4.286,654,3.188,655,4.286]],["title/injectables/JwtStrategy.html",[228,0.876,450,2.068]],["body/injectables/JwtStrategy.html",[0,0.015,1,1.347,3,0.32,4,0.32,5,0.175,7,0.441,9,1.521,20,1.857,21,2.723,23,0.625,24,0.026,30,1.084,44,1.521,67,1.347,68,2.13,69,0.519,80,0.32,102,0.015,103,0.019,104,0.015,122,1.857,150,0.965,168,2.833,176,2.437,177,1.909,180,1.542,228,1.331,229,1.909,235,2.06,262,2.461,390,2.437,419,1.652,450,3.141,455,2.985,461,2.985,519,3.105,520,3.393,521,3.393,543,3.393,545,3.393,651,2.437,652,2.234,654,2.985,656,3.393,657,4.374,658,4.012,659,4.012,660,5.173,661,4.012,662,3.393,663,4.012,664,3.393,665,2.985,666,3.393,667,4.012,668,4.012,669,4.012]],["title/injectables/LocalAuthGuard.html",[228,0.876,430,2.274]],["body/injectables/LocalAuthGuard.html",[0,0.019,3,0.403,4,0.403,5,0.22,24,0.025,69,0.476,80,0.403,102,0.019,103,0.022,104,0.019,150,1.217,228,1.536,229,2.406,430,3.986,643,3.763,650,4.277,651,3.071,652,2.816,670,4.277,671,5.058]],["title/injectables/LocalStrategy.html",[228,0.876,451,2.068]],["body/injectables/LocalStrategy.html",[0,0.015,1,1.922,3,0.32,4,0.32,5,0.175,7,0.441,9,1.521,12,2.357,17,2.171,20,1.857,21,2.723,23,0.625,24,0.026,30,1.084,36,1.884,44,1.521,67,1.347,68,2.13,69,0.499,80,0.32,98,2.234,102,0.015,103,0.019,104,0.015,122,1.857,150,0.965,176,2.437,177,1.909,180,1.542,197,1.542,228,1.331,229,1.909,235,2.06,419,1.652,420,3.291,421,2.985,451,3.141,651,2.437,652,2.234,654,2.985,657,4.374,662,3.393,664,3.393,665,2.985,666,3.393,672,3.393,673,4.012,674,4.012,675,5.173,676,4.012,677,2.985,678,4.012,679,4.012]],["title/classes/LoggedInUserDto.html",[0,0.013,423,2.274]],["body/classes/LoggedInUserDto.html",[0,0.02,1,2.255,2,1.565,3,0.347,4,0.347,5,0.19,7,0.479,8,1.713,23,0.658,24,0.026,26,1.674,30,1.142,36,1.603,69,0.434,80,0.347,88,2.395,89,2.072,102,0.016,103,0.02,104,0.016,346,3.641,390,3.612,419,1.794,423,3.641,599,3.612,601,2.237,680,5.03,681,3.684,682,4.357,683,4.357,684,5.451,685,5.451,686,4.609,687,4.357]],["title/injectables/LoggingInterceptor.html",[228,0.876,688,2.533]],["body/injectables/LoggingInterceptor.html",[0,0.015,3,0.328,4,0.328,5,0.179,7,0.453,9,1.211,20,1.889,23,0.497,24,0.026,30,0.863,44,1.211,67,1.383,69,0.462,80,0.328,102,0.015,103,0.02,104,0.015,122,1.478,150,0.991,180,1.582,197,2.227,228,1.354,229,1.959,305,2.75,316,3.063,317,2.928,320,2.75,325,2.928,647,4.078,649,4.9,688,3.912,689,3.482,690,5.259,691,5.259,692,6.106,693,6.106,694,4.118,695,5.259,696,5.259,697,4.118,698,4.118,699,4.118,700,5.259,701,4.447,702,4.118,703,5.259,704,4.118,705,4.118,706,4.118,707,4.118,708,4.118]],["title/classes/LoginDto.html",[0,0.013,388,2.068]],["body/classes/LoginDto.html",[0,0.02,2,1.582,3,0.351,4,0.351,5,0.192,7,0.484,8,1.725,12,2.651,17,2.312,23,0.663,24,0.026,26,2.109,30,1.15,36,1.84,69,0.351,80,0.351,89,2.611,90,3.277,102,0.016,103,0.02,104,0.016,376,3.484,388,3.333,598,4.641,599,3.333,601,2.262,604,3.726,709,3.726,710,4.406,711,4.406,712,4.406,713,4.406,714,4.406,715,5.489]],["title/classes/ProcessedDto.html",[0,0.013,158,1.62]],["body/classes/ProcessedDto.html",[0,0.022,2,1.765,3,0.392,4,0.392,5,0.214,7,0.54,8,1.844,23,0.593,24,0.025,26,1.889,30,1.03,48,2.594,69,0.392,80,0.392,102,0.018,103,0.022,104,0.018,158,2.791,301,3.809,601,2.524,716,4.157,717,6.273,718,4.916]],["title/classes/RegisterDto.html",[0,0.013,393,2.274]],["body/classes/RegisterDto.html",[0,0.016,2,1.518,3,0.337,4,0.337,5,0.184,7,0.465,8,1.681,12,2.416,13,3.573,16,3.573,17,2.107,23,0.744,24,0.026,26,2.369,30,1.292,36,1.813,43,2.568,44,1.573,53,3.145,69,0.337,80,0.337,88,2.055,102,0.016,103,0.02,104,0.016,119,2.917,171,2.568,376,2.978,393,3.573,518,3.575,589,3.575,590,3.979,592,4.523,593,3.979,596,3.145,652,2.978,719,3.575,720,6.166,721,4.228,722,4.228,723,4.228,724,4.228]],["title/classes/ResetPasswordDto.html",[0,0.013,405,2.068]],["body/classes/ResetPasswordDto.html",[0,0.021,2,1.671,3,0.371,4,0.371,5,0.203,7,0.512,8,1.784,17,2.039,23,0.562,24,0.026,26,1.788,30,0.975,36,1.669,69,0.371,80,0.371,89,2.214,102,0.017,103,0.021,104,0.017,201,2.51,259,5.18,376,3.161,405,3.447,590,4.223,596,3.462,599,3.447,600,3.935,601,2.39,605,3.935,725,4.801,726,3.935,727,4.654,728,4.654]],["title/guards/RolesGuard.html",[639,2.533,729,2.274]],["body/guards/RolesGuard.html",[0,0.014,1,1.868,3,0.301,4,0.301,5,0.165,7,0.416,9,1.463,20,1.787,23,0.601,24,0.026,29,2.555,30,1.043,38,2.296,44,1.463,48,2.2,51,2.525,56,2.049,67,1.27,69,0.443,80,0.301,85,2.296,102,0.014,103,0.018,104,0.014,122,1.787,144,3.197,150,0.91,176,2.296,177,1.798,180,2.271,197,2.36,200,2.296,201,1.671,228,1.281,235,1.941,305,2.525,317,2.105,325,2.105,419,1.557,641,2.812,644,4.998,646,4.208,647,3.948,729,3.324,730,3.197,731,3.781,732,6.306,733,3.781,734,3.781,735,3.197,736,4.976,737,3.781,738,3.781,739,3.197,740,3.197,741,3.781,742,3.781,743,3.781,744,4.976,745,3.781,746,4.976,747,3.781,748,3.781]],["title/classes/UpdateAccountDto.html",[0,0.013,136,2.068]],["body/classes/UpdateAccountDto.html",[0,0.019,2,1.793,3,0.398,4,0.398,5,0.217,12,2.056,17,1.793,24,0.026,69,0.472,71,2.78,80,0.398,102,0.019,103,0.022,104,0.019,111,2.78,119,2.207,136,3.597,171,3.032,588,3.715,652,2.78,749,4.223,750,4.994,751,4.994]],["title/classes/Upload.html",[0,0.013,25,1.223]],["body/classes/Upload.html",[0,0.011,2,1.019,3,0.226,4,0.226,5,0.283,7,0.312,8,1.283,9,1.698,11,2.664,14,1.838,19,4.045,23,0.8,24,0.026,25,1.467,26,2.419,30,1.319,32,3.177,33,2.4,34,4.424,36,1.851,41,5.573,45,1.939,46,4.045,63,2.4,69,0.226,73,3.454,74,2.728,77,3.454,78,1.35,80,0.226,89,2.83,102,0.011,103,0.015,104,0.011,310,3.495,332,3.495,352,3.612,609,3.703,610,3.559,611,3.973,612,3.559,613,3.559,614,3.559,616,3.038,617,3.038,619,4.424,621,4.424,624,3.892,626,4.882,629,2.4,630,2.4,631,3.454,632,3.038,633,2.4,634,2.4,752,2.4,753,2.839,754,2.839,755,2.839,756,2.839,757,2.839,758,2.839,759,2.839,760,2.839,761,2.839,762,2.839]],["title/interfaces/UploadCategory.html",[635,1.505,763,2.068]],["body/interfaces/UploadCategory.html",[3,0.3,4,0.3,5,0.284,7,0.414,8,1.559,9,1.459,10,2.547,23,0.74,24,0.026,36,1.632,45,2.115,48,1.663,58,3.182,69,0.3,80,0.395,102,0.014,103,0.018,104,0.014,140,2.285,153,2.513,165,3.285,295,2.547,317,2.762,333,3.313,352,3.012,611,3.313,617,3.69,624,3.69,635,1.663,636,2.285,763,3.012,764,2.799,765,2.799,766,5.325,767,4.989,768,4.989,769,4.989,770,4.389,771,3.69,772,4.989,773,4.961,774,4.961,775,4.961,776,4.961,777,4.961,778,4.961,779,3.182,780,3.182,781,3.182,782,3.182]],["title/controllers/UploadsController.html",[105,1.749,783,2.274]],["body/controllers/UploadsController.html",[0,0.019,3,0.403,4,0.403,5,0.22,24,0.025,69,0.476,71,2.816,80,0.403,102,0.019,103,0.022,104,0.019,105,2.597,107,2.597,109,3.763,150,1.217,154,3.763,783,3.986,784,4.277,785,4.277,786,5.058,787,5.058]],["title/modules/UploadsModule.html",[206,1.505,358,2.068]],["body/modules/UploadsModule.html",[0,0.016,3,0.353,4,0.353,5,0.193,24,0.026,25,1.591,69,0.514,80,0.353,102,0.016,103,0.02,104,0.016,107,2.828,150,1.066,206,2.65,208,2.275,209,2.108,210,2.691,211,2.691,212,2.275,213,3.64,214,2.691,217,3.127,218,3.345,219,2.108,220,2.691,222,2.959,223,2.275,226,2.959,358,3.992,783,4.003,788,4.431,789,4.431,790,4.431,791,3.747,792,4.431,793,4.431,794,4.431]],["title/injectables/UploadsService.html",[217,1.62,228,0.876]],["body/injectables/UploadsService.html",[0,0.009,3,0.19,4,0.19,5,0.236,7,0.262,9,1.518,14,0.917,20,1.291,21,2.957,23,0.623,24,0.026,25,1.291,29,2.471,30,1.082,36,1.415,44,1.518,45,1.733,60,1.329,61,3.579,67,1.616,68,2.386,69,0.489,78,1.135,80,0.19,98,2.407,102,0.009,103,0.013,104,0.009,111,2.407,112,2.674,122,1.853,123,2.674,140,3.6,150,0.574,158,1.135,159,1.449,165,3.592,167,1.775,170,1.775,177,1.135,180,1.849,197,2.163,200,1.449,201,1.055,217,1.71,223,1.225,228,0.925,229,1.135,235,1.846,237,4.069,249,1.594,261,2.018,264,3.579,295,1.225,301,1.449,352,2.922,511,2.018,606,2.888,609,1.594,610,1.775,611,1.594,612,1.775,613,1.775,614,1.775,763,1.449,770,3.84,771,2.674,791,2.018,795,2.018,796,4.324,797,4.324,798,2.386,799,2.386,800,3.594,801,2.386,802,2.386,803,3.594,804,2.386,805,2.386,806,2.386,807,2.386,808,4.812,809,2.386,810,3.594,811,3.594,812,3.039,813,1.775,814,2.386,815,2.386,816,1.775,817,2.386,818,2.386,819,2.386,820,2.386,821,2.386,822,2.386,823,2.386,824,2.386,825,2.386,826,2.386,827,2.386,828,2.018,829,2.018,830,2.018,831,5.629,832,2.386,833,2.386,834,2.386,835,2.386,836,2.386,837,2.386,838,2.386,839,2.386,840,2.386,841,2.386,842,2.386,843,2.386,844,2.386,845,2.386,846,2.386,847,2.386,848,2.386,849,2.386,850,2.386,851,2.386,852,2.386,853,2.386,854,2.386,855,2.386,856,2.386,857,2.018,858,2.386,859,2.386,860,2.386,861,2.386,862,2.386]],["title/interfaces/UserJwtPayload.html",[519,1.749,635,1.505]],["body/interfaces/UserJwtPayload.html",[3,0.347,4,0.347,5,0.19,7,0.479,8,1.713,11,3.645,14,2.516,15,3.47,18,2.965,23,0.753,24,0.026,32,3.897,45,2.155,48,2.629,56,2.567,69,0.347,80,0.474,102,0.016,103,0.02,104,0.016,419,1.794,492,2.426,495,2.426,519,2.799,635,2.629,636,2.646,637,2.91,638,2.91]],["title/changelog.html",[863,2.408,864,2.408,865,2.118]],["body/changelog.html",[5,0.186,10,2.195,17,1.535,24,0.022,25,1.535,51,2.855,56,2.218,60,2.38,88,1.642,102,0.016,103,0.02,104,0.016,262,2.033,329,3.614,333,2.855,390,2.595,865,3.179,866,4.274,867,3.614,868,3.614,869,4.274,870,3.614,871,3.614,872,3.614,873,4.554,874,4.274,875,4.274,876,4.274,877,4.274,878,4.274,879,3.614,880,5.897,881,4.554,882,5.386,883,4.274,884,4.274,885,4.274,886,3.179,887,4.274,888,4.274,889,4.274,890,3.614,891,4.274,892,3.614,893,4.274,894,4.274,895,4.274,896,4.274,897,4.274,898,4.274,899,4.274,900,4.274,901,4.274,902,4.274,903,3.614,904,4.274,905,3.614,906,3.614,907,4.274,908,4.274,909,3.614,910,4.274,911,3.614,912,4.274,913,4.274,914,4.274,915,3.614,916,3.179,917,3.614,918,4.274,919,4.274,920,4.274,921,4.274,922,4.274,923,4.274,924,4.274,925,4.274,926,4.274]],["title/coverage.html",[927,3.923]],["body/coverage.html",[0,0.023,1,0.915,5,0.119,6,2.027,18,1.296,23,0.329,24,0.026,25,0.979,88,1.047,102,0.01,103,0.015,104,0.01,105,2.401,106,1.82,108,2.305,119,1.205,136,1.655,158,1.296,160,2.027,162,2.027,168,1.205,201,1.205,212,1.4,217,1.296,228,1.512,230,2.305,262,1.296,302,2.027,303,2.305,304,2.305,365,2.027,367,1.82,372,1.82,373,2.305,388,1.655,393,1.82,405,1.655,420,1.4,423,1.82,430,1.82,450,1.655,451,1.655,465,2.305,492,1.517,495,1.517,519,1.4,587,2.305,588,2.95,593,2.95,606,1.82,607,2.305,608,2.305,635,2.269,637,3.122,638,3.122,639,2.95,640,2.027,642,2.305,643,2.95,656,2.305,670,2.305,672,2.305,680,2.305,681,2.305,688,2.027,689,2.305,709,2.305,716,2.305,719,2.305,725,2.305,726,2.305,729,1.82,730,2.305,749,2.305,752,2.305,763,1.655,764,2.027,765,2.027,772,2.305,783,1.82,784,2.305,795,2.305,813,2.027,816,2.027,927,2.305,928,2.305,929,2.726,930,2.726,931,2.726,932,2.726,933,2.726,934,2.726,935,3.966,936,3.966,937,5.819,938,6.627,939,2.726,940,2.726,941,2.726,942,2.726,943,2.305,944,6.59,945,4.675,946,4.675,947,2.305,948,4.675,949,3.966,950,2.726,951,5.693,952,2.726,953,4.675,954,2.305,955,2.305,956,3.478,957,2.305,958,2.027,959,3.354,960,3.354,961,2.305,962,2.305,963,3.354,964,3.354,965,2.305,966,3.953,967,2.305,968,3.354,969,2.305,970,2.305,971,2.305,972,2.726,973,2.726,974,2.726,975,2.726,976,2.726,977,2.726,978,2.726,979,2.726]],["title/dependencies.html",[209,1.947,980,2.408]],["body/dependencies.html",[0,0.019,24,0.026,71,2.28,72,2.736,78,2.493,102,0.015,103,0.019,104,0.015,150,0.985,152,3.464,153,3.501,209,1.948,223,2.103,320,2.736,361,2.736,362,3.047,390,2.487,454,3.464,517,3.464,601,2.103,651,2.487,665,4.3,677,3.047,735,3.464,812,3.464,890,3.464,981,4.096,982,5.781,983,4.096,984,4.096,985,4.096,986,4.096,987,5.242,988,4.096,989,4.096,990,4.096,991,4.096,992,4.096,993,4.096,994,4.096,995,4.096,996,4.096,997,4.096,998,5.242,999,4.096,1000,4.096,1001,4.096,1002,4.096,1003,3.464,1004,4.096,1005,4.096,1006,4.096,1007,4.096,1008,4.096,1009,4.096,1010,3.464,1011,4.096,1012,4.096,1013,4.096,1014,4.096,1015,4.096,1016,4.096,1017,4.096,1018,4.096]],["title/miscellaneous/enumerations.html",[1019,1.585,1020,3.461]],["body/miscellaneous/enumerations.html",[6,3.75,7,0.554,10,3.059,24,0.025,56,2.453,85,3.617,88,2.289,102,0.019,103,0.022,104,0.019,165,3.316,249,4.235,764,3.75,765,4.431,1019,2.807,1020,4.263,1021,5.042,1022,5.042]],["title/miscellaneous/functions.html",[1019,1.585,1023,3.461]],["body/miscellaneous/functions.html",[7,0.58,24,0.024,67,1.773,68,2.174,102,0.02,103,0.023,104,0.02,212,3.318,956,3.927,1019,2.939,1023,4.464,1024,4.464]],["title/index.html",[7,0.313,863,2.408,864,2.408]],["body/index.html",[5,0.222,23,0.182,24,0.025,38,1.516,43,2.502,44,0.734,45,0.506,60,0.839,74,1.006,78,1.768,86,1.274,87,2.11,89,2.428,102,0.009,103,0.009,104,0.009,111,2.294,116,1.12,146,1.274,197,0.579,201,1.413,209,0.716,219,1.187,262,1.52,317,0.839,331,2.702,332,1.667,361,1.006,367,1.667,415,1.274,532,1.274,538,1.274,616,1.12,677,1.857,686,1.274,701,2.11,865,1.12,867,4.316,868,4.902,870,1.274,871,1.274,872,4.449,873,4.564,879,1.274,881,1.274,886,3.797,903,1.274,905,1.274,906,2.11,909,1.274,911,3.143,915,1.274,916,1.12,917,1.274,928,4.449,958,1.12,980,1.274,1003,1.274,1010,1.274,1025,4.12,1026,2.496,1027,2.496,1028,1.506,1029,2.496,1030,1.506,1031,1.506,1032,1.274,1033,1.506,1034,6.521,1035,2.11,1036,4.441,1037,2.496,1038,4.12,1039,1.274,1040,4.703,1041,6.108,1042,3.196,1043,1.506,1044,2.11,1045,3.484,1046,1.506,1047,1.506,1048,3.717,1049,2.496,1050,3.196,1051,6.238,1052,1.506,1053,1.506,1054,1.506,1055,1.506,1056,1.506,1057,1.506,1058,1.506,1059,4.12,1060,3.717,1061,2.496,1062,5.398,1063,4.12,1064,4.703,1065,2.496,1066,4.921,1067,2.496,1068,3.196,1069,1.506,1070,3.756,1071,1.506,1072,2.496,1073,1.506,1074,1.506,1075,3.717,1076,3.196,1077,1.506,1078,2.496,1079,1.506,1080,1.506,1081,2.702,1082,3.196,1083,1.506,1084,2.496,1085,2.496,1086,3.196,1087,1.506,1088,5.516,1089,1.506,1090,1.12,1091,1.506,1092,1.506,1093,1.506,1094,1.506,1095,3.717,1096,1.506,1097,1.506,1098,1.506,1099,1.506,1100,1.274,1101,2.496,1102,2.496,1103,2.496,1104,1.506,1105,1.506,1106,2.11,1107,1.506,1108,1.506,1109,1.506,1110,3.196,1111,3.196,1112,2.496,1113,1.506,1114,1.506,1115,1.506,1116,2.496,1117,1.506,1118,2.496,1119,1.506,1120,1.506,1121,1.506,1122,2.496,1123,2.496,1124,1.506,1125,1.506,1126,1.506,1127,1.506,1128,1.506,1129,1.274,1130,1.506,1131,1.506,1132,1.506,1133,1.506,1134,1.506,1135,3.717,1136,1.12,1137,2.496,1138,3.196,1139,1.506,1140,1.506,1141,1.506,1142,1.506,1143,1.506,1144,2.496,1145,1.506,1146,2.496,1147,1.506,1148,1.506,1149,1.506,1150,1.506,1151,1.506,1152,1.274,1153,1.506,1154,2.496,1155,2.496,1156,2.496,1157,1.506,1158,3.717,1159,1.506,1160,2.496,1161,2.496,1162,1.506,1163,1.506,1164,1.506,1165,1.506,1166,1.506,1167,1.506,1168,1.274,1169,1.506,1170,2.702,1171,3.717,1172,1.506,1173,4.12,1174,1.506,1175,1.506,1176,1.506,1177,1.506,1178,2.496,1179,1.506,1180,1.506,1181,2.496,1182,1.506,1183,1.506,1184,1.506,1185,1.506,1186,1.506,1187,1.506,1188,2.11,1189,1.506,1190,1.506,1191,1.506,1192,1.274,1193,1.506,1194,1.506,1195,2.702,1196,1.506,1197,1.506,1198,2.496,1199,1.506,1200,1.506,1201,1.506,1202,3.196,1203,1.506,1204,1.506,1205,4.665,1206,3.196,1207,3.717,1208,1.506,1209,2.496,1210,1.506,1211,2.496,1212,1.506,1213,1.506,1214,1.506,1215,1.506,1216,1.506,1217,1.506,1218,3.196,1219,1.506,1220,1.506,1221,2.496,1222,2.496,1223,1.506,1224,1.506,1225,1.506,1226,3.717,1227,1.506,1228,1.506,1229,1.506,1230,1.506,1231,1.506,1232,1.506,1233,1.506,1234,1.506,1235,3.196,1236,1.506,1237,1.506,1238,1.506,1239,1.506,1240,1.506,1241,1.506,1242,1.506,1243,1.506,1244,1.506,1245,1.506,1246,1.506,1247,1.506,1248,1.506,1249,1.506,1250,3.196,1251,1.506,1252,1.506,1253,1.506,1254,1.506,1255,1.506,1256,1.506,1257,1.506,1258,1.506,1259,1.506,1260,1.506,1261,2.11,1262,1.274,1263,1.274,1264,1.274,1265,3.717,1266,1.506,1267,1.506,1268,1.506,1269,2.496,1270,1.506,1271,1.506,1272,1.506,1273,1.506,1274,1.506,1275,1.506,1276,1.506,1277,1.506,1278,1.506,1279,1.506,1280,2.496,1281,1.506,1282,1.506,1283,1.506,1284,1.506,1285,1.506,1286,1.506,1287,1.506,1288,2.496,1289,2.496,1290,1.506,1291,1.506,1292,1.274,1293,1.506,1294,1.506]],["title/modules.html",[208,2.382]],["body/modules.html",[24,0.022,102,0.019,103,0.022,104,0.019,207,3.101,208,2.623,354,3.411,357,3.101,358,3.101,1136,4.894,1295,6.579,1296,6.579,1297,6.579]],["title/overview.html",[1298,3.923]],["body/overview.html",[2,1.49,24,0.026,102,0.015,103,0.02,104,0.015,107,2.131,168,2.707,206,1.834,207,3.99,208,2.131,209,1.974,210,2.52,211,2.52,212,2.131,213,2.52,214,2.52,215,3.509,216,3.509,217,3.008,218,3.21,219,1.974,220,2.52,229,1.974,354,4.442,355,3.509,356,3.509,357,4.177,358,3.841,420,2.987,448,3.509,449,3.509,450,3.532,451,3.532,636,2.52,641,3.087,1100,3.509,1298,3.509,1299,5.286,1300,4.15,1301,4.15,1302,4.15]],["title/miscellaneous/variables.html",[1019,1.585,1090,3.045]],["body/miscellaneous/variables.html",[5,0.219,7,0.193,8,0.889,10,0.901,12,1.165,14,0.674,17,0.63,18,2.125,23,0.696,24,0.026,25,1.275,29,2.451,36,1.943,38,2.473,43,1.066,48,0.776,56,1.165,59,1.484,60,3.386,85,1.066,88,1.565,102,0.007,103,0.01,104,0.007,122,0.63,140,1.717,160,2.104,162,2.104,165,1.978,180,1.835,197,1.365,200,1.066,201,1.801,249,4.062,250,3.444,262,1.69,291,1.484,295,2.092,309,1.484,310,1.889,316,1.306,317,1.978,325,0.977,333,2.721,365,2.642,367,2.372,374,1.484,418,2.391,577,1.484,580,1.484,609,2.372,632,1.306,647,1.172,729,1.172,739,1.484,740,1.484,763,2.712,766,2.391,767,3.777,768,2.391,769,1.484,770,1.306,771,2.104,779,2.391,780,3.003,781,3.003,782,3.444,785,1.484,813,2.104,816,2.104,828,1.484,829,1.484,830,1.484,857,1.484,886,1.306,892,2.391,916,1.306,937,1.484,943,1.484,947,1.484,954,1.484,955,1.484,956,1.306,957,2.391,958,1.306,959,1.484,960,3.003,961,3.003,962,2.391,963,1.484,964,3.003,965,3.003,966,1.484,967,2.391,968,2.391,969,2.391,970,2.391,971,2.391,1019,0.977,1024,2.391,1032,1.484,1035,1.484,1039,1.484,1044,1.484,1045,1.484,1070,2.391,1081,1.484,1090,1.306,1106,2.391,1129,1.484,1136,1.306,1152,2.391,1168,2.391,1170,1.484,1188,1.484,1192,2.391,1195,3.777,1205,1.484,1261,1.484,1262,1.484,1263,1.484,1264,1.484,1292,1.484,1303,2.828,1304,2.828,1305,1.755,1306,1.755,1307,2.828,1308,3.552,1309,1.755,1310,1.755,1311,1.755,1312,3.552,1313,3.552,1314,2.828,1315,3.552,1316,2.828,1317,2.828,1318,2.828,1319,1.755,1320,1.755,1321,1.755,1322,1.755,1323,1.755,1324,1.755,1325,1.755,1326,1.755,1327,2.828,1328,1.755,1329,1.755,1330,1.755,1331,1.755,1332,1.755,1333,1.755,1334,1.755,1335,1.755,1336,1.755,1337,1.755,1338,1.755,1339,1.755,1340,1.755,1341,1.755,1342,1.755,1343,1.755,1344,1.755,1345,1.755,1346,1.755,1347,1.755,1348,1.755,1349,1.755,1350,1.755,1351,1.755,1352,1.755,1353,1.755,1354,1.755,1355,1.755,1356,4.073,1357,1.755,1358,1.755,1359,1.755,1360,1.755,1361,1.755,1362,1.755,1363,1.755,1364,1.755,1365,1.755,1366,1.755,1367,1.755,1368,1.755,1369,1.755,1370,1.755,1371,1.755,1372,1.755,1373,1.755,1374,1.755,1375,1.755,1376,1.755,1377,1.755,1378,1.755,1379,1.755,1380,1.755,1381,1.755,1382,1.755,1383,1.755,1384,1.755,1385,1.755,1386,1.755,1387,1.755,1388,1.755,1389,1.755,1390,1.755,1391,1.755,1392,1.755,1393,1.755,1394,1.755,1395,1.755,1396,1.755,1397,1.755,1398,1.755,1399,1.755,1400,1.755,1401,2.828,1402,1.755,1403,1.755,1404,1.755,1405,1.755,1406,1.755,1407,1.755,1408,1.755,1409,1.755,1410,1.755,1411,1.755,1412,1.755,1413,1.755,1414,2.828,1415,1.755,1416,1.755,1417,1.755,1418,1.755,1419,1.755,1420,1.755,1421,1.755,1422,1.755,1423,1.755,1424,1.755,1425,2.828,1426,1.755,1427,1.755,1428,1.755,1429,1.755,1430,2.828,1431,1.755,1432,1.755,1433,1.755,1434,1.755,1435,1.755,1436,1.755,1437,1.755,1438,1.755,1439,1.755,1440,1.755,1441,1.755,1442,1.755,1443,1.755,1444,1.755,1445,1.755,1446,1.755,1447,1.755,1448,1.755,1449,1.755,1450,1.755,1451,1.755,1452,1.755]]],"invertedIndex":[["",{"_index":24,"title":{},"body":{"classes/Account.html":{},"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateUploadDto.html":{},"interfaces/EmailJwtPayload.html":{},"interfaces/ForgotPasswordJwtPayload.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoggedInUserDto.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/ProcessedDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateAccountDto.html":{},"classes/Upload.html":{},"interfaces/UploadCategory.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"interfaces/UserJwtPayload.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":937,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.0",{"_index":875,"title":{},"body":{"changelog.html":{}}}],["0.1.1",{"_index":986,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":1007,"title":{},"body":{"dependencies.html":{}}}],["0.12.2",{"_index":992,"title":{},"body":{"dependencies.html":{}}}],["0.2.29",{"_index":1013,"title":{},"body":{"dependencies.html":{}}}],["0.27.1",{"_index":989,"title":{},"body":{"dependencies.html":{}}}],["0.28.1",{"_index":1009,"title":{},"body":{"dependencies.html":{}}}],["0.3.1",{"_index":991,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":1001,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":938,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":942,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":953,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":951,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":952,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":977,"title":{},"body":{"coverage.html":{}}}],["08",{"_index":877,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":1091,"title":{},"body":{"index.html":{}}}],["1.0.0",{"_index":1003,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["1.5.1",{"_index":981,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":946,"title":{},"body":{"coverage.html":{}}}],["1/11",{"_index":934,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":950,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1356,"title":{},"body":{"miscellaneous/variables.html":{}}}],["100",{"_index":945,"title":{},"body":{"coverage.html":{}}}],["1000000",{"_index":1415,"title":{},"body":{"miscellaneous/variables.html":{}}}],["11",{"_index":1302,"title":{},"body":{"overview.html":{}}}],["12c9344",{"_index":926,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":1100,"title":{},"body":{"index.html":{},"overview.html":{}}}],["2.0.0",{"_index":1016,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":949,"title":{},"body":{"coverage.html":{}}}],["2/8",{"_index":932,"title":{},"body":{"coverage.html":{}}}],["2000000",{"_index":631,"title":{},"body":{"classes/CreateUploadDto.html":{},"classes/Upload.html":{}}}],["2021",{"_index":876,"title":{},"body":{"changelog.html":{}}}],["21",{"_index":878,"title":{},"body":{"changelog.html":{}}}],["25",{"_index":931,"title":{},"body":{"coverage.html":{}}}],["255",{"_index":590,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{}}}],["25fd100",{"_index":896,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":1300,"title":{},"body":{"overview.html":{}}}],["3333:3333",{"_index":1097,"title":{},"body":{"index.html":{}}}],["3ef1389",{"_index":883,"title":{},"body":{"changelog.html":{}}}],["4",{"_index":1299,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":1002,"title":{},"body":{"dependencies.html":{}}}],["4.1.5",{"_index":1012,"title":{},"body":{"dependencies.html":{}}}],["4.4.1",{"_index":997,"title":{},"body":{"dependencies.html":{}}}],["4.7.6",{"_index":996,"title":{},"body":{"dependencies.html":{}}}],["4.8.0",{"_index":988,"title":{},"body":{"dependencies.html":{}}}],["4/5",{"_index":936,"title":{},"body":{"coverage.html":{}}}],["4/6",{"_index":976,"title":{},"body":{"coverage.html":{}}}],["465",{"_index":1422,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5",{"_index":1414,"title":{},"body":{"miscellaneous/variables.html":{}}}],["50",{"_index":593,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["500",{"_index":810,"title":{},"body":{"injectables/UploadsService.html":{}}}],["5a3819a",{"_index":900,"title":{},"body":{"changelog.html":{}}}],["5da3da2",{"_index":907,"title":{},"body":{"changelog.html":{}}}],["6.4.17",{"_index":1000,"title":{},"body":{"dependencies.html":{}}}],["6.6.3",{"_index":1008,"title":{},"body":{"dependencies.html":{}}}],["6/12",{"_index":939,"title":{},"body":{"coverage.html":{}}}],["6/7",{"_index":941,"title":{},"body":{"coverage.html":{}}}],["63",{"_index":974,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":948,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1301,"title":{},"body":{"overview.html":{}}}],["7.1.5",{"_index":987,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":983,"title":{},"body":{"dependencies.html":{}}}],["7.6.14",{"_index":982,"title":{},"body":{"dependencies.html":{}}}],["7/11",{"_index":975,"title":{},"body":{"coverage.html":{}}}],["7/8",{"_index":973,"title":{},"body":{"coverage.html":{}}}],["7090e84",{"_index":894,"title":{},"body":{"changelog.html":{}}}],["720",{"_index":1417,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8.2.0",{"_index":994,"title":{},"body":{"dependencies.html":{}}}],["8.3.2",{"_index":1018,"title":{},"body":{"dependencies.html":{}}}],["8.5.1",{"_index":998,"title":{},"body":{"dependencies.html":{}}}],["80",{"_index":935,"title":{},"body":{"coverage.html":{}}}],["8295536",{"_index":901,"title":{},"body":{"changelog.html":{}}}],["85",{"_index":940,"title":{},"body":{"coverage.html":{}}}],["87",{"_index":972,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":933,"title":{},"body":{"coverage.html":{}}}],["__dirname}/**/*.entity{.ts,.js",{"_index":1333,"title":{},"body":{"miscellaneous/variables.html":{}}}],["__dirname}/migrations/**/*{.ts,.js",{"_index":1336,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accepted",{"_index":573,"title":{},"body":{"injectables/AuthService.html":{}}}],["according",{"_index":1049,"title":{},"body":{"index.html":{}}}],["account",{"_index":1,"title":{"classes/Account.html":{}},"body":{"classes/Account.html":{},"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoggedInUserDto.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["account.avatar",{"_index":297,"title":{},"body":{"injectables/AccountsService.html":{}}}],["account.createdat",{"_index":560,"title":{},"body":{"injectables/AuthService.html":{}}}],["account.dto",{"_index":171,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"classes/UpdateAccountDto.html":{}}}],["account.dto.ts",{"_index":588,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/UpdateAccountDto.html":{},"coverage.html":{}}}],["account.dto.ts:10",{"_index":591,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["account.dto.ts:18",{"_index":594,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["account.dto.ts:26",{"_index":595,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["account.dto.ts:34",{"_index":597,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["account.email",{"_index":279,"title":{},"body":{"injectables/AccountsService.html":{}}}],["account.firstname",{"_index":578,"title":{},"body":{"injectables/AuthService.html":{}}}],["account.id",{"_index":199,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AuthService.html":{}}}],["account.isconfirmed",{"_index":546,"title":{},"body":{"injectables/AuthService.html":{}}}],["account.lastname",{"_index":579,"title":{},"body":{"injectables/AuthService.html":{}}}],["account.password",{"_index":278,"title":{},"body":{"injectables/AccountsService.html":{}}}],["account.roles",{"_index":561,"title":{},"body":{"injectables/AuthService.html":{}}}],["account.roles.find((role",{"_index":745,"title":{},"body":{"guards/RolesGuard.html":{}}}],["account.roles.some((role",{"_index":747,"title":{},"body":{"guards/RolesGuard.html":{}}}],["account?.isconfirmed",{"_index":741,"title":{},"body":{"guards/RolesGuard.html":{}}}],["account?.roles",{"_index":743,"title":{},"body":{"guards/RolesGuard.html":{}}}],["accountrepository",{"_index":239,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accounts",{"_index":110,"title":{},"body":{"controllers/AccountsController.html":{}}}],["accounts.controller",{"_index":225,"title":{},"body":{"modules/AccountsModule.html":{}}}],["accounts.service",{"_index":169,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{}}}],["accounts/accounts.module",{"_index":363,"title":{},"body":{"modules/AppModule.html":{}}}],["accounts/accounts.service",{"_index":455,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["accounts/dto/create",{"_index":518,"title":{},"body":{"injectables/AuthService.html":{},"classes/RegisterDto.html":{}}}],["accounts/entities/account.entity",{"_index":419,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/EmailJwtPayload.html":{},"interfaces/ForgotPasswordJwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoggedInUserDto.html":{},"guards/RolesGuard.html":{},"interfaces/UserJwtPayload.html":{}}}],["accountscontroller",{"_index":106,"title":{"controllers/AccountsController.html":{}},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"coverage.html":{}}}],["accountsmodule",{"_index":207,"title":{"modules/AccountsModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["accountsservice",{"_index":168,"title":{"injectables/AccountsService.html":{}},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["accountwithcredentials",{"_index":272,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/AuthService.html":{}}}],["accountwithcredentials.createdat",{"_index":569,"title":{},"body":{"injectables/AuthService.html":{}}}],["accountwithcredentials.createdat.toisostring",{"_index":564,"title":{},"body":{"injectables/AuthService.html":{}}}],["accountwithcredentials.email",{"_index":584,"title":{},"body":{"injectables/AuthService.html":{}}}],["accountwithcredentials.firstname",{"_index":585,"title":{},"body":{"injectables/AuthService.html":{}}}],["accountwithcredentials.id",{"_index":558,"title":{},"body":{"injectables/AuthService.html":{}}}],["accountwithcredentials.lastname",{"_index":586,"title":{},"body":{"injectables/AuthService.html":{}}}],["accountwithcredentials.password",{"_index":526,"title":{},"body":{"injectables/AuthService.html":{}}}],["accountwithpassword",{"_index":292,"title":{},"body":{"injectables/AccountsService.html":{}}}],["actions",{"_index":1238,"title":{},"body":{"index.html":{}}}],["adapter",{"_index":1434,"title":{},"body":{"miscellaneous/variables.html":{}}}],["add",{"_index":1070,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["addresses",{"_index":535,"title":{},"body":{"injectables/AuthService.html":{}}}],["addselect(withcredentials",{"_index":277,"title":{},"body":{"injectables/AccountsService.html":{}}}],["admin",{"_index":85,"title":{},"body":{"classes/Account.html":{},"injectables/AccountsService.html":{},"guards/RolesGuard.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["administrator",{"_index":83,"title":{},"body":{"classes/Account.html":{}}}],["adminport",{"_index":1389,"title":{},"body":{"miscellaneous/variables.html":{}}}],["advisable",{"_index":1258,"title":{},"body":{"index.html":{}}}],["allexceptionfilter",{"_index":302,"title":{"classes/AllExceptionFilter.html":{}},"body":{"classes/AllExceptionFilter.html":{},"coverage.html":{}}}],["allowing",{"_index":398,"title":{},"body":{"controllers/AuthController.html":{}}}],["alone",{"_index":1092,"title":{},"body":{"index.html":{}}}],["already",{"_index":538,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["angular",{"_index":1112,"title":{},"body":{"index.html":{}}}],["api",{"_index":1106,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["api=4",{"_index":1103,"title":{},"body":{"index.html":{}}}],["api_email_jwt_expiration_time",{"_index":1367,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api_transport",{"_index":1368,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiadminemail",{"_index":1357,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apibody",{"_index":418,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/variables.html":{}}}],["apiconsumes('multipart/form",{"_index":1314,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiemailjwtexpirationtime",{"_index":1365,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiemailjwtsecret",{"_index":1363,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apifile",{"_index":162,"title":{},"body":{"controllers/AccountsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apifile('file",{"_index":194,"title":{},"body":{"controllers/AccountsController.html":{}}}],["apifiles",{"_index":971,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apiforbiddenresponse",{"_index":1442,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apihideproperty",{"_index":70,"title":{},"body":{"classes/Account.html":{}}}],["apihideproperty()@column({select",{"_index":37,"title":{},"body":{"classes/Account.html":{}}}],["apihost",{"_index":1351,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiname",{"_index":1347,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apioperation",{"_index":1445,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiport",{"_index":1353,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiprotocol",{"_index":1349,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apisecurity('bearer",{"_index":1439,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apitags",{"_index":154,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/AuthController.html":{},"controllers/UploadsController.html":{}}}],["apitags('accounts",{"_index":174,"title":{},"body":{"controllers/AccountsController.html":{}}}],["apitags('auth",{"_index":433,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('uploads",{"_index":786,"title":{},"body":{"controllers/UploadsController.html":{}}}],["apitransportfrom",{"_index":1377,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apitransporthost",{"_index":1369,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apitransportpassword",{"_index":1375,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apitransportport",{"_index":1371,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apitransportuser",{"_index":1373,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiunauthorizedresponse",{"_index":1440,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiuserjwtexpirationtime",{"_index":1361,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiuserjwtsecret",{"_index":1359,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app",{"_index":1086,"title":{},"body":{"index.html":{}}}],["appear",{"_index":1108,"title":{},"body":{"index.html":{}}}],["application",{"_index":1078,"title":{},"body":{"index.html":{}}}],["application's",{"_index":1194,"title":{},"body":{"index.html":{}}}],["applications",{"_index":86,"title":{},"body":{"classes/Account.html":{},"index.html":{}}}],["applydecorators",{"_index":1313,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appmodule",{"_index":354,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argon2",{"_index":72,"title":{},"body":{"classes/Account.html":{},"injectables/AccountsService.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["argon2i$v=19$m=16,t=2,p=1$rer6c24zytfsqvzmzllcta$jn1399jd7z2j/0vlzu07ia",{"_index":92,"title":{},"body":{"classes/Account.html":{}}}],["argumentshost",{"_index":311,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["array",{"_index":59,"title":{},"body":{"classes/Account.html":{},"miscellaneous/variables.html":{}}}],["async",{"_index":21,"title":{},"body":{"classes/Account.html":{},"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UploadsService.html":{}}}],["attach",{"_index":1077,"title":{},"body":{"index.html":{}}}],["attacker",{"_index":530,"title":{},"body":{"injectables/AuthService.html":{}}}],["attention",{"_index":1118,"title":{},"body":{"index.html":{}}}],["auth",{"_index":374,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/variables.html":{}}}],["auth.controller",{"_index":456,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":432,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.guard.ts",{"_index":643,"title":{},"body":{"guards/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:11",{"_index":648,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["auth.guard.ts:6",{"_index":645,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["auth.service",{"_index":421,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":364,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/decorators/roles.decorator",{"_index":156,"title":{},"body":{"controllers/AccountsController.html":{}}}],["auth/decorators/user.decorator",{"_index":157,"title":{},"body":{"controllers/AccountsController.html":{}}}],["authcontroller",{"_index":372,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":898,"title":{},"body":{"changelog.html":{}}}],["authguard",{"_index":650,"title":{},"body":{"guards/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":653,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":671,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":357,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authorization",{"_index":882,"title":{},"body":{"changelog.html":{}}}],["authservice",{"_index":420,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["automatically",{"_index":1236,"title":{},"body":{"index.html":{}}}],["avatar",{"_index":10,"title":{},"body":{"classes/Account.html":{},"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"interfaces/UploadCategory.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["avatar.jpg",{"_index":629,"title":{},"body":{"classes/CreateUploadDto.html":{},"classes/Upload.html":{}}}],["avatarfilefilter",{"_index":961,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["avoids",{"_index":1253,"title":{},"body":{"index.html":{}}}],["await",{"_index":98,"title":{},"body":{"classes/Account.html":{},"injectables/AccountsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/UploadsService.html":{}}}],["badrequestexception",{"_index":511,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UploadsService.html":{}}}],["badrequestexception('email",{"_index":537,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('invalid",{"_index":822,"title":{},"body":{"injectables/UploadsService.html":{}}}],["badrequestexception('must",{"_index":1323,"title":{},"body":{"miscellaneous/variables.html":{}}}],["based",{"_index":881,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["basic",{"_index":899,"title":{},"body":{"changelog.html":{}}}],["basically",{"_index":1150,"title":{},"body":{"index.html":{}}}],["before",{"_index":1211,"title":{},"body":{"index.html":{}}}],["beforeinsert",{"_index":65,"title":{},"body":{"classes/Account.html":{}}}],["better",{"_index":880,"title":{},"body":{"changelog.html":{}}}],["binary",{"_index":1316,"title":{},"body":{"miscellaneous/variables.html":{}}}],["body",{"_index":143,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/AuthController.html":{}}}],["boolean",{"_index":48,"title":{},"body":{"classes/Account.html":{},"interfaces/EmailJwtPayload.html":{},"interfaces/ForgotPasswordJwtPayload.html":{},"guards/JwtAuthGuard.html":{},"classes/ProcessedDto.html":{},"guards/RolesGuard.html":{},"interfaces/UploadCategory.html":{},"interfaces/UserJwtPayload.html":{},"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":212,"title":{},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UploadsModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["breaking",{"_index":1221,"title":{},"body":{"index.html":{}}}],["browse",{"_index":1297,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1136,"title":{},"body":{"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["bug",{"_index":902,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":1064,"title":{},"body":{"index.html":{}}}],["bump",{"_index":1226,"title":{},"body":{"index.html":{}}}],["bumps",{"_index":1223,"title":{},"body":{"index.html":{}}}],["bytes",{"_index":624,"title":{},"body":{"classes/CreateUploadDto.html":{},"classes/Upload.html":{},"interfaces/UploadCategory.html":{}}}],["c9cc19e",{"_index":919,"title":{},"body":{"changelog.html":{}}}],["callback",{"_index":780,"title":{},"body":{"interfaces/UploadCategory.html":{},"miscellaneous/variables.html":{}}}],["callback(null",{"_index":1399,"title":{},"body":{"miscellaneous/variables.html":{}}}],["called",{"_index":1157,"title":{},"body":{"index.html":{}}}],["callhandler",{"_index":693,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["can't",{"_index":1132,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":644,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":646,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["cases",{"_index":1053,"title":{},"body":{"index.html":{}}}],["catch",{"_index":307,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["catch(exception",{"_index":308,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["category",{"_index":829,"title":{},"body":{"injectables/UploadsService.html":{},"miscellaneous/variables.html":{}}}],["category.fieldname",{"_index":830,"title":{},"body":{"injectables/UploadsService.html":{},"miscellaneous/variables.html":{}}}],["category.model",{"_index":167,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"injectables/UploadsService.html":{}}}],["category.model.ts",{"_index":765,"title":{},"body":{"interfaces/UploadCategory.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["change",{"_index":415,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["changed",{"_index":410,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["changelog",{"_index":865,"title":{"changelog.html":{}},"body":{"changelog.html":{},"index.html":{}}}],["changelog.md",{"_index":1247,"title":{},"body":{"index.html":{}}}],["changes",{"_index":867,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["ci",{"_index":1284,"title":{},"body":{"index.html":{}}}],["class",{"_index":0,"title":{"classes/Account.html":{},"classes/AllExceptionFilter.html":{},"classes/CreateAccountDto.html":{},"classes/CreateUploadDto.html":{},"classes/LoggedInUserDto.html":{},"classes/LoginDto.html":{},"classes/ProcessedDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateAccountDto.html":{},"classes/Upload.html":{}},"body":{"classes/Account.html":{},"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateUploadDto.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoggedInUserDto.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/ProcessedDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateAccountDto.html":{},"classes/Upload.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Account.html":{},"classes/AllExceptionFilter.html":{},"classes/CreateAccountDto.html":{},"classes/CreateUploadDto.html":{},"classes/LoggedInUserDto.html":{},"classes/LoginDto.html":{},"classes/ProcessedDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateAccountDto.html":{},"classes/Upload.html":{},"overview.html":{}}}],["cli",{"_index":1170,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["clone",{"_index":1278,"title":{},"body":{"index.html":{}}}],["cluster_accountsmodule",{"_index":215,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_accountsmodule_providers",{"_index":216,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":355,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":356,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":448,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":449,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_uploadsmodule",{"_index":788,"title":{},"body":{"modules/UploadsModule.html":{}}}],["cluster_uploadsmodule_providers",{"_index":789,"title":{},"body":{"modules/UploadsModule.html":{}}}],["code",{"_index":1075,"title":{},"body":{"index.html":{}}}],["column",{"_index":41,"title":{},"body":{"classes/Account.html":{},"classes/Upload.html":{}}}],["column({default",{"_index":49,"title":{},"body":{"classes/Account.html":{}}}],["column({type",{"_index":57,"title":{},"body":{"classes/Account.html":{}}}],["comfortable",{"_index":1225,"title":{},"body":{"index.html":{}}}],["command",{"_index":1110,"title":{},"body":{"index.html":{}}}],["commands",{"_index":1068,"title":{},"body":{"index.html":{}}}],["commit",{"_index":873,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["commitizen",{"_index":1156,"title":{},"body":{"index.html":{}}}],["commits",{"_index":1146,"title":{},"body":{"index.html":{}}}],["common/dto/processed.dto",{"_index":159,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UploadsService.html":{}}}],["compare",{"_index":515,"title":{},"body":{"injectables/AuthService.html":{}}}],["compare(hashedpassword",{"_index":567,"title":{},"body":{"injectables/AuthService.html":{}}}],["compatibility",{"_index":914,"title":{},"body":{"changelog.html":{}}}],["compiled",{"_index":1338,"title":{},"body":{"miscellaneous/variables.html":{}}}],["complete",{"_index":884,"title":{},"body":{"changelog.html":{}}}],["compodoc",{"_index":1026,"title":{},"body":{"index.html":{}}}],["compose",{"_index":1059,"title":{},"body":{"index.html":{}}}],["compose.dev.yml",{"_index":1061,"title":{},"body":{"index.html":{}}}],["compose.prod.yml",{"_index":1101,"title":{},"body":{"index.html":{}}}],["conf",{"_index":1139,"title":{},"body":{"index.html":{}}}],["config",{"_index":1266,"title":{},"body":{"index.html":{}}}],["configs/filename",{"_index":814,"title":{},"body":{"injectables/UploadsService.html":{}}}],["configs/multer.config",{"_index":817,"title":{},"body":{"injectables/UploadsService.html":{}}}],["configure",{"_index":1047,"title":{},"body":{"index.html":{}}}],["confirm",{"_index":385,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["confirmation",{"_index":401,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirmed",{"_index":51,"title":{},"body":{"classes/Account.html":{},"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"changelog.html":{}}}],["confirmedaccount",{"_index":547,"title":{},"body":{"injectables/AuthService.html":{}}}],["confirmemail",{"_index":375,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["confirmemail(@param('token",{"_index":443,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirmemail(emailtoken",{"_index":479,"title":{},"body":{"injectables/AuthService.html":{}}}],["confirmemail(token",{"_index":381,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirmemailurl",{"_index":571,"title":{},"body":{"injectables/AuthService.html":{}}}],["connectionoptions",{"_index":367,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["considered",{"_index":1219,"title":{},"body":{"index.html":{}}}],["const",{"_index":197,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"guards/RolesGuard.html":{},"injectables/UploadsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":235,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/UploadsService.html":{}}}],["constructor(accountrepository",{"_index":236,"title":{},"body":{"injectables/AccountsService.html":{}}}],["constructor(accountsservice",{"_index":658,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(authservice",{"_index":673,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(mailerservice",{"_index":476,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(private",{"_index":176,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{}}}],["constructor(reflector",{"_index":731,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(uploadrepository",{"_index":798,"title":{},"body":{"injectables/UploadsService.html":{}}}],["container",{"_index":911,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["containerized",{"_index":1050,"title":{},"body":{"index.html":{}}}],["containing",{"_index":397,"title":{},"body":{"controllers/AuthController.html":{}}}],["contenairized",{"_index":885,"title":{},"body":{"changelog.html":{}}}],["context",{"_index":325,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/LoggingInterceptor.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["context.getclass().name}.${context.gethandler().name",{"_index":708,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["context.gethandler",{"_index":738,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.getrequest",{"_index":328,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["context.getresponse",{"_index":327,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["context.switchtohttp().getrequest",{"_index":739,"title":{},"body":{"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["controller",{"_index":105,"title":{"controllers/AccountsController.html":{},"controllers/AuthController.html":{},"controllers/UploadsController.html":{}},"body":{"controllers/AccountsController.html":{},"controllers/AuthController.html":{},"controllers/UploadsController.html":{},"coverage.html":{}}}],["controller('accounts",{"_index":175,"title":{},"body":{"controllers/AccountsController.html":{}}}],["controller('auth",{"_index":434,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('uploads",{"_index":787,"title":{},"body":{"controllers/UploadsController.html":{}}}],["controllers",{"_index":107,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"overview.html":{}}}],["convention",{"_index":1147,"title":{},"body":{"index.html":{}}}],["conventional",{"_index":1145,"title":{},"body":{"index.html":{}}}],["copy",{"_index":1089,"title":{},"body":{"index.html":{}}}],["correct",{"_index":1249,"title":{},"body":{"index.html":{}}}],["corresponding",{"_index":1027,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":927,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":111,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"controllers/AuthController.html":{},"classes/UpdateAccountDto.html":{},"injectables/UploadsService.html":{},"index.html":{}}}],["create(@body",{"_index":179,"title":{},"body":{"controllers/AccountsController.html":{}}}],["create(createaccountdto",{"_index":118,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{}}}],["create(file",{"_index":801,"title":{},"body":{"injectables/UploadsService.html":{}}}],["create/update",{"_index":1246,"title":{},"body":{"index.html":{}}}],["createaccountdto",{"_index":119,"title":{"classes/CreateAccountDto.html":{}},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateAccountDto.html":{},"coverage.html":{}}}],["createaccountdto.email",{"_index":267,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/AuthService.html":{}}}],["createaccountdto:10",{"_index":721,"title":{},"body":{"classes/RegisterDto.html":{}}}],["createaccountdto:18",{"_index":722,"title":{},"body":{"classes/RegisterDto.html":{}}}],["createaccountdto:26",{"_index":723,"title":{},"body":{"classes/RegisterDto.html":{}}}],["createaccountdto:34",{"_index":724,"title":{},"body":{"classes/RegisterDto.html":{}}}],["createconfirmemailtoken",{"_index":466,"title":{},"body":{"injectables/AuthService.html":{}}}],["createconfirmemailtoken(account",{"_index":482,"title":{},"body":{"injectables/AuthService.html":{}}}],["createdaccount",{"_index":265,"title":{},"body":{"injectables/AccountsService.html":{}}}],["createdaccount.isconfirmed",{"_index":271,"title":{},"body":{"injectables/AccountsService.html":{}}}],["createdaccount.roles",{"_index":269,"title":{},"body":{"injectables/AccountsService.html":{}}}],["createdat",{"_index":11,"title":{},"body":{"classes/Account.html":{},"injectables/AuthService.html":{},"interfaces/EmailJwtPayload.html":{},"interfaces/ForgotPasswordJwtPayload.html":{},"classes/Upload.html":{},"interfaces/UserJwtPayload.html":{}}}],["createdatecolumn",{"_index":73,"title":{},"body":{"classes/Account.html":{},"classes/Upload.html":{}}}],["createdatecolumn({type",{"_index":33,"title":{},"body":{"classes/Account.html":{},"classes/Upload.html":{}}}],["createdatstring",{"_index":563,"title":{},"body":{"injectables/AuthService.html":{}}}],["createdupload",{"_index":844,"title":{},"body":{"injectables/UploadsService.html":{}}}],["createmany",{"_index":796,"title":{},"body":{"injectables/UploadsService.html":{}}}],["createmany(files",{"_index":804,"title":{},"body":{"injectables/UploadsService.html":{}}}],["createparamdecorator",{"_index":1452,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquerybuilder('account",{"_index":275,"title":{},"body":{"injectables/AccountsService.html":{}}}],["createresetpasswordtoken",{"_index":467,"title":{},"body":{"injectables/AuthService.html":{}}}],["createresetpasswordtoken(accountwithcredentials",{"_index":484,"title":{},"body":{"injectables/AuthService.html":{}}}],["createuploaddto",{"_index":606,"title":{"classes/CreateUploadDto.html":{}},"body":{"classes/CreateUploadDto.html":{},"injectables/UploadsService.html":{},"coverage.html":{}}}],["createusertoken",{"_index":468,"title":{},"body":{"injectables/AuthService.html":{}}}],["createusertoken(account",{"_index":486,"title":{},"body":{"injectables/AuthService.html":{}}}],["current",{"_index":556,"title":{},"body":{"injectables/AuthService.html":{}}}],["cz",{"_index":1158,"title":{},"body":{"index.html":{}}}],["dangerous",{"_index":1255,"title":{},"body":{"index.html":{}}}],["data",{"_index":1195,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":1045,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["date",{"_index":32,"title":{},"body":{"classes/Account.html":{},"interfaces/EmailJwtPayload.html":{},"interfaces/ForgotPasswordJwtPayload.html":{},"classes/Upload.html":{},"interfaces/UserJwtPayload.html":{}}}],["date().toisostring",{"_index":351,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["date.now",{"_index":703,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["db",{"_index":916,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["dbhost",{"_index":1379,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dbname",{"_index":1387,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dbpassword",{"_index":1385,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dbport",{"_index":1381,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dbuser",{"_index":1383,"title":{},"body":{"miscellaneous/variables.html":{}}}],["debugger",{"_index":906,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["declarations",{"_index":211,"title":{},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UploadsModule.html":{},"overview.html":{}}}],["decorator",{"_index":1449,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":26,"title":{},"body":{"classes/Account.html":{},"controllers/AccountsController.html":{},"controllers/AuthController.html":{},"classes/CreateAccountDto.html":{},"classes/CreateUploadDto.html":{},"classes/LoggedInUserDto.html":{},"classes/LoginDto.html":{},"classes/ProcessedDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/Upload.html":{}}}],["decorators/user.decorator",{"_index":422,"title":{},"body":{"controllers/AuthController.html":{}}}],["dedicated",{"_index":1201,"title":{},"body":{"index.html":{}}}],["default",{"_index":60,"title":{},"body":{"classes/Account.html":{},"injectables/AccountsService.html":{},"injectables/UploadsService.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":1427,"title":{},"body":{"miscellaneous/variables.html":{}}}],["define",{"_index":1124,"title":{},"body":{"index.html":{}}}],["defined",{"_index":30,"title":{},"body":{"classes/Account.html":{},"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateUploadDto.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoggedInUserDto.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/ProcessedDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"classes/Upload.html":{},"injectables/UploadsService.html":{}}}],["definition",{"_index":893,"title":{},"body":{"changelog.html":{}}}],["definitions",{"_index":1318,"title":{},"body":{"miscellaneous/variables.html":{}}}],["delete",{"_index":112,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"injectables/UploadsService.html":{}}}],["delete(':id",{"_index":189,"title":{},"body":{"controllers/AccountsController.html":{}}}],["delete(':id')@roles(role.admin",{"_index":124,"title":{},"body":{"controllers/AccountsController.html":{}}}],["delete(':id/avatar",{"_index":204,"title":{},"body":{"controllers/AccountsController.html":{}}}],["delete(':id/avatar')@roles(role.user",{"_index":127,"title":{},"body":{"controllers/AccountsController.html":{}}}],["delete(@param('id",{"_index":190,"title":{},"body":{"controllers/AccountsController.html":{}}}],["delete(id",{"_index":123,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"injectables/UploadsService.html":{}}}],["deleteavatar",{"_index":113,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{}}}],["deleteavatar(account",{"_index":126,"title":{},"body":{"controllers/AccountsController.html":{}}}],["deleteavatar(id",{"_index":243,"title":{},"body":{"injectables/AccountsService.html":{}}}],["deleteresult",{"_index":155,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{}}}],["dependencies",{"_index":209,"title":{"dependencies.html":{}},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UploadsModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["deploy",{"_index":1250,"title":{},"body":{"index.html":{}}}],["deployed",{"_index":1263,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["description",{"_index":250,"title":{},"body":{"injectables/AccountsService.html":{},"miscellaneous/variables.html":{}}}],["destination",{"_index":766,"title":{},"body":{"interfaces/UploadCategory.html":{},"miscellaneous/variables.html":{}}}],["dev",{"_index":1039,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["development",{"_index":1035,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["diagram",{"_index":1116,"title":{},"body":{"index.html":{}}}],["diagrams",{"_index":1125,"title":{},"body":{"index.html":{}}}],["different",{"_index":555,"title":{},"body":{"injectables/AuthService.html":{}}}],["differently",{"_index":1213,"title":{},"body":{"index.html":{}}}],["dir",{"_index":1432,"title":{},"body":{"miscellaneous/variables.html":{}}}],["disable",{"_index":1259,"title":{},"body":{"index.html":{}}}],["diskstorage",{"_index":1408,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dist",{"_index":1339,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dist/src/main",{"_index":1275,"title":{},"body":{"index.html":{}}}],["doc",{"_index":1138,"title":{},"body":{"index.html":{}}}],["docker",{"_index":1041,"title":{},"body":{"index.html":{}}}],["docker:build",{"_index":1069,"title":{},"body":{"index.html":{}}}],["docker:build:prod",{"_index":1104,"title":{},"body":{"index.html":{}}}],["docker:db",{"_index":1052,"title":{},"body":{"index.html":{}}}],["docker:db:psqlmigrations",{"_index":1187,"title":{},"body":{"index.html":{}}}],["docker:proddocumentation",{"_index":1105,"title":{},"body":{"index.html":{}}}],["dockerfile",{"_index":888,"title":{},"body":{"changelog.html":{}}}],["docs",{"_index":1245,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":928,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["documented",{"_index":869,"title":{},"body":{"changelog.html":{}}}],["doe",{"_index":96,"title":{},"body":{"classes/Account.html":{},"classes/CreateAccountDto.html":{}}}],["done",{"_index":1080,"title":{},"body":{"index.html":{}}}],["dotenv",{"_index":993,"title":{},"body":{"dependencies.html":{}}}],["draw",{"_index":1127,"title":{},"body":{"index.html":{}}}],["dto/create",{"_index":170,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"injectables/UploadsService.html":{}}}],["dto/logged",{"_index":424,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/login.dto",{"_index":426,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/register.dto",{"_index":427,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/reset",{"_index":428,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/update",{"_index":172,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{}}}],["e",{"_index":533,"title":{},"body":{"injectables/AuthService.html":{}}}],["e189116",{"_index":889,"title":{},"body":{"changelog.html":{}}}],["eager",{"_index":28,"title":{},"body":{"classes/Account.html":{}}}],["easily",{"_index":1076,"title":{},"body":{"index.html":{}}}],["echo",{"_index":1273,"title":{},"body":{"index.html":{}}}],["editor",{"_index":82,"title":{},"body":{"classes/Account.html":{}}}],["email",{"_index":12,"title":{},"body":{"classes/Account.html":{},"injectables/AccountsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateAccountDto.html":{},"miscellaneous/variables.html":{}}}],["email/:email",{"_index":402,"title":{},"body":{"controllers/AuthController.html":{}}}],["email/:token",{"_index":383,"title":{},"body":{"controllers/AuthController.html":{}}}],["email/password",{"_index":391,"title":{},"body":{"controllers/AuthController.html":{}}}],["emailjwtpayload",{"_index":492,"title":{"interfaces/EmailJwtPayload.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/EmailJwtPayload.html":{},"interfaces/ForgotPasswordJwtPayload.html":{},"interfaces/UserJwtPayload.html":{},"coverage.html":{}}}],["emailtoken",{"_index":481,"title":{},"body":{"injectables/AuthService.html":{}}}],["enables",{"_index":1182,"title":{},"body":{"index.html":{}}}],["end",{"_index":87,"title":{},"body":{"classes/Account.html":{},"index.html":{}}}],["entities",{"_index":1332,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entities/account.entity",{"_index":173,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{}}}],["entities/upload.entity",{"_index":791,"title":{},"body":{"modules/UploadsModule.html":{},"injectables/UploadsService.html":{}}}],["entity",{"_index":74,"title":{},"body":{"classes/Account.html":{},"classes/AllExceptionFilter.html":{},"classes/Upload.html":{},"index.html":{}}}],["entitynotfounderror",{"_index":322,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["enum",{"_index":58,"title":{},"body":{"classes/Account.html":{},"interfaces/UploadCategory.html":{}}}],["enumerations",{"_index":1020,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":1062,"title":{},"body":{"index.html":{}}}],["env.development",{"_index":1048,"title":{},"body":{"index.html":{}}}],["environment",{"_index":262,"title":{},"body":{"injectables/AccountsService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["environment.apiadminemail",{"_index":268,"title":{},"body":{"injectables/AccountsService.html":{}}}],["environment.apiemailjwtexpirationtime",{"_index":568,"title":{},"body":{"injectables/AuthService.html":{}}}],["environment.apiemailjwtsecret",{"_index":566,"title":{},"body":{"injectables/AuthService.html":{}}}],["environment.apitransportfrom",{"_index":1428,"title":{},"body":{"miscellaneous/variables.html":{}}}],["environment.apitransporthost",{"_index":1419,"title":{},"body":{"miscellaneous/variables.html":{}}}],["environment.apitransportpassword",{"_index":1426,"title":{},"body":{"miscellaneous/variables.html":{}}}],["environment.apitransportport",{"_index":1420,"title":{},"body":{"miscellaneous/variables.html":{}}}],["environment.apitransportuser",{"_index":1424,"title":{},"body":{"miscellaneous/variables.html":{}}}],["environment.apiuserjwtexpirationtime",{"_index":464,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["environment.apiuserjwtsecret",{"_index":461,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["environment.dbhost",{"_index":1326,"title":{},"body":{"miscellaneous/variables.html":{}}}],["environment.dbname",{"_index":1331,"title":{},"body":{"miscellaneous/variables.html":{}}}],["environment.dbpassword",{"_index":1330,"title":{},"body":{"miscellaneous/variables.html":{}}}],["environment.dbport",{"_index":1328,"title":{},"body":{"miscellaneous/variables.html":{}}}],["environment.dbuser",{"_index":1329,"title":{},"body":{"miscellaneous/variables.html":{}}}],["environment.nodeenv",{"_index":1431,"title":{},"body":{"miscellaneous/variables.html":{}}}],["environment.projectname",{"_index":576,"title":{},"body":{"injectables/AuthService.html":{}}}],["environment.pwaconfirmemailurl}/${emailtoken",{"_index":572,"title":{},"body":{"injectables/AuthService.html":{}}}],["environment.pwaresetpasswordurl}/${accountwithcredentials.id}/${emailtoken",{"_index":583,"title":{},"body":{"injectables/AuthService.html":{}}}],["equals",{"_index":1268,"title":{},"body":{"index.html":{}}}],["error",{"_index":333,"title":{},"body":{"classes/AllExceptionFilter.html":{},"interfaces/UploadCategory.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["eslint",{"_index":904,"title":{},"body":{"changelog.html":{}}}],["establish",{"_index":1243,"title":{},"body":{"index.html":{}}}],["everything",{"_index":1217,"title":{},"body":{"index.html":{}}}],["example",{"_index":89,"title":{},"body":{"classes/Account.html":{},"classes/CreateAccountDto.html":{},"classes/CreateUploadDto.html":{},"classes/LoggedInUserDto.html":{},"classes/LoginDto.html":{},"classes/ResetPasswordDto.html":{},"classes/Upload.html":{},"index.html":{}}}],["exception",{"_index":313,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":304,"title":{},"body":{"classes/AllExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:16",{"_index":312,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exception.getstatus",{"_index":335,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exception.message",{"_index":336,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exception.name",{"_index":342,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exceptionfilter",{"_index":306,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["executed",{"_index":1271,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":647,"title":{},"body":{"guards/JwtAuthGuard.html":{},"injectables/LoggingInterceptor.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["existing",{"_index":532,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["exists",{"_index":539,"title":{},"body":{"injectables/AuthService.html":{}}}],["experimental",{"_index":1220,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":463,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["export",{"_index":80,"title":{},"body":{"classes/Account.html":{},"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateUploadDto.html":{},"interfaces/EmailJwtPayload.html":{},"interfaces/ForgotPasswordJwtPayload.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoggedInUserDto.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/ProcessedDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateAccountDto.html":{},"classes/Upload.html":{},"interfaces/UploadCategory.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"interfaces/UserJwtPayload.html":{}}}],["exports",{"_index":214,"title":{},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UploadsModule.html":{},"overview.html":{}}}],["express",{"_index":153,"title":{},"body":{"controllers/AccountsController.html":{},"classes/AllExceptionFilter.html":{},"interfaces/UploadCategory.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":140,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"interfaces/UploadCategory.html":{},"injectables/UploadsService.html":{},"miscellaneous/variables.html":{}}}],["extends",{"_index":652,"title":{},"body":{"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/RegisterDto.html":{},"classes/UpdateAccountDto.html":{}}}],["extractjwt",{"_index":663,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":668,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjlbwfpbci6impvag5kb2vabweuy29tiiwiawf0ijoxnje2mjuzmzmzlcjlehaioje2mtyyntqymzn9.45vsq8wkanvdgbbzgc3ey6nhlwhhhdcv2i910a8",{"_index":687,"title":{},"body":{"classes/LoggedInUserDto.html":{}}}],["f",{"_index":1060,"title":{},"body":{"index.html":{}}}],["fail",{"_index":1172,"title":{},"body":{"index.html":{}}}],["false",{"_index":38,"title":{},"body":{"classes/Account.html":{},"injectables/AccountsService.html":{},"guards/RolesGuard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["feat",{"_index":1242,"title":{},"body":{"index.html":{}}}],["features",{"_index":879,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["feel",{"_index":1224,"title":{},"body":{"index.html":{}}}],["fieldname",{"_index":767,"title":{},"body":{"interfaces/UploadCategory.html":{},"miscellaneous/variables.html":{}}}],["fieldnamesize",{"_index":1405,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Account.html":{},"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateUploadDto.html":{},"interfaces/EmailJwtPayload.html":{},"interfaces/ForgotPasswordJwtPayload.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoggedInUserDto.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/ProcessedDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateAccountDto.html":{},"classes/Upload.html":{},"interfaces/UploadCategory.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"interfaces/UserJwtPayload.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["file(s",{"_index":823,"title":{},"body":{"injectables/UploadsService.html":{}}}],["file.decorator",{"_index":164,"title":{},"body":{"controllers/AccountsController.html":{}}}],["file.decorator.ts",{"_index":969,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["file.mimetype",{"_index":840,"title":{},"body":{"injectables/UploadsService.html":{}}}],["file.originalname",{"_index":838,"title":{},"body":{"injectables/UploadsService.html":{}}}],["file.path",{"_index":837,"title":{},"body":{"injectables/UploadsService.html":{}}}],["file.size",{"_index":839,"title":{},"body":{"injectables/UploadsService.html":{}}}],["filefilter",{"_index":768,"title":{},"body":{"interfaces/UploadCategory.html":{},"miscellaneous/variables.html":{}}}],["fileinterceptor",{"_index":151,"title":{},"body":{"controllers/AccountsController.html":{}}}],["fileinterceptor('file",{"_index":195,"title":{},"body":{"controllers/AccountsController.html":{}}}],["filename",{"_index":609,"title":{},"body":{"classes/CreateUploadDto.html":{},"classes/Upload.html":{},"injectables/UploadsService.html":{},"miscellaneous/variables.html":{}}}],["filename.lastindexof",{"_index":1397,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filename.substring",{"_index":1396,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filenamesuffix",{"_index":808,"title":{},"body":{"injectables/UploadsService.html":{}}}],["filenamewithsuffixgenerator",{"_index":813,"title":{},"body":{"injectables/UploadsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["filenamewithsuffixgenerator(file.path",{"_index":851,"title":{},"body":{"injectables/UploadsService.html":{}}}],["files",{"_index":771,"title":{},"body":{"interfaces/UploadCategory.html":{},"injectables/UploadsService.html":{},"miscellaneous/variables.html":{}}}],["files.decorator.ts",{"_index":970,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["files.map((file",{"_index":825,"title":{},"body":{"injectables/UploadsService.html":{}}}],["files?.length",{"_index":821,"title":{},"body":{"injectables/UploadsService.html":{}}}],["filesize",{"_index":1403,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filesizelimit",{"_index":769,"title":{},"body":{"interfaces/UploadCategory.html":{},"miscellaneous/variables.html":{}}}],["filter",{"_index":773,"title":{},"body":{"interfaces/UploadCategory.html":{}}}],["filters.config.ts",{"_index":960,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["findall",{"_index":114,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{}}}],["findone",{"_index":115,"title":{},"body":{"controllers/AccountsController.html":{}}}],["findone(@param('id",{"_index":184,"title":{},"body":{"controllers/AccountsController.html":{}}}],["findone(id",{"_index":132,"title":{},"body":{"controllers/AccountsController.html":{}}}],["findonebyemail",{"_index":231,"title":{},"body":{"injectables/AccountsService.html":{}}}],["findonebyemail(email",{"_index":246,"title":{},"body":{"injectables/AccountsService.html":{}}}],["findonebyid",{"_index":232,"title":{},"body":{"injectables/AccountsService.html":{}}}],["findonebyid(id",{"_index":253,"title":{},"body":{"injectables/AccountsService.html":{}}}],["first",{"_index":43,"title":{},"body":{"classes/Account.html":{},"classes/CreateAccountDto.html":{},"classes/RegisterDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["firstname",{"_index":13,"title":{},"body":{"classes/Account.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/RegisterDto.html":{}}}],["fit",{"_index":856,"title":{},"body":{"injectables/UploadsService.html":{}}}],["fix",{"_index":1241,"title":{},"body":{"index.html":{}}}],["fixes",{"_index":903,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["flow",{"_index":1143,"title":{},"body":{"index.html":{}}}],["folder",{"_index":1081,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["follow",{"_index":1082,"title":{},"body":{"index.html":{}}}],["followed",{"_index":1087,"title":{},"body":{"index.html":{}}}],["following",{"_index":1237,"title":{},"body":{"index.html":{}}}],["forbidden",{"_index":1443,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forbiddenexception",{"_index":144,"title":{},"body":{"controllers/AccountsController.html":{},"guards/RolesGuard.html":{}}}],["forbiddenexception('not",{"_index":742,"title":{},"body":{"guards/RolesGuard.html":{}}}],["forbiddenexception('you",{"_index":202,"title":{},"body":{"controllers/AccountsController.html":{}}}],["force",{"_index":1071,"title":{},"body":{"index.html":{}}}],["forgotpassword",{"_index":469,"title":{},"body":{"injectables/AuthService.html":{}}}],["forgotpassword(email",{"_index":488,"title":{},"body":{"injectables/AuthService.html":{}}}],["forgotpasswordjwtpayload",{"_index":495,"title":{"interfaces/ForgotPasswordJwtPayload.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/EmailJwtPayload.html":{},"interfaces/ForgotPasswordJwtPayload.html":{},"interfaces/UserJwtPayload.html":{},"coverage.html":{}}}],["format",{"_index":1168,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["found",{"_index":348,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/AuthService.html":{}}}],["foundaccount",{"_index":536,"title":{},"body":{"injectables/AuthService.html":{}}}],["front",{"_index":1180,"title":{},"body":{"index.html":{}}}],["frontend",{"_index":1028,"title":{},"body":{"index.html":{}}}],["fs",{"_index":811,"title":{},"body":{"injectables/UploadsService.html":{}}}],["fs.unlink(upload?.path",{"_index":849,"title":{},"body":{"injectables/UploadsService.html":{}}}],["fs.unlink(upload?.thumbpath",{"_index":850,"title":{},"body":{"injectables/UploadsService.html":{}}}],["full",{"_index":1030,"title":{},"body":{"index.html":{}}}],["fully",{"_index":1056,"title":{},"body":{"index.html":{}}}],["function",{"_index":772,"title":{},"body":{"interfaces/UploadCategory.html":{},"coverage.html":{}}}],["functions",{"_index":1023,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":1198,"title":{},"body":{"index.html":{}}}],["generates",{"_index":1113,"title":{},"body":{"index.html":{}}}],["generator",{"_index":1117,"title":{},"body":{"index.html":{}}}],["generators.config",{"_index":815,"title":{},"body":{"injectables/UploadsService.html":{}}}],["generators.config.ts",{"_index":964,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["get(':id",{"_index":183,"title":{},"body":{"controllers/AccountsController.html":{}}}],["get(':id')@roles(role.admin",{"_index":133,"title":{},"body":{"controllers/AccountsController.html":{}}}],["get('confirm",{"_index":382,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('forgot",{"_index":412,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('resend",{"_index":400,"title":{},"body":{"controllers/AuthController.html":{}}}],["get()@roles(role.admin",{"_index":130,"title":{},"body":{"controllers/AccountsController.html":{}}}],["getcorrectmulterconfig",{"_index":967,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getcorrectmulterconfig(uploadcategory",{"_index":1412,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getone",{"_index":281,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getpayloadfromemailtoken",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{}}}],["getpayloadfromemailtoken(token",{"_index":490,"title":{},"body":{"injectables/AuthService.html":{}}}],["getpayloadfromforgotpasswordtoken",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{}}}],["getpayloadfromforgotpasswordtoken(accountwithcredentials",{"_index":493,"title":{},"body":{"injectables/AuthService.html":{}}}],["getrequest",{"_index":699,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["getting",{"_index":863,"title":{"changelog.html":{},"index.html":{}},"body":{}}],["git",{"_index":1088,"title":{},"body":{"index.html":{}}}],["github",{"_index":1291,"title":{},"body":{"index.html":{}}}],["globalprefix",{"_index":957,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["go",{"_index":1137,"title":{},"body":{"index.html":{}}}],["good",{"_index":1294,"title":{},"body":{"index.html":{}}}],["guard",{"_index":639,"title":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":641,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"overview.html":{}}}],["guards/local",{"_index":431,"title":{},"body":{"controllers/AuthController.html":{}}}],["guide",{"_index":1083,"title":{},"body":{"index.html":{}}}],["guidelines",{"_index":874,"title":{},"body":{"changelog.html":{}}}],["handle",{"_index":704,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["handlebars",{"_index":995,"title":{},"body":{"dependencies.html":{}}}],["handlebarsadapter",{"_index":1435,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handling",{"_index":922,"title":{},"body":{"changelog.html":{}}}],["hash",{"_index":55,"title":{},"body":{"classes/Account.html":{},"injectables/AccountsService.html":{}}}],["hash(newpassword",{"_index":289,"title":{},"body":{"injectables/AccountsService.html":{}}}],["hash(this.password",{"_index":99,"title":{},"body":{"classes/Account.html":{}}}],["hashedpassword",{"_index":499,"title":{},"body":{"injectables/AuthService.html":{}}}],["hassomerequiredrole",{"_index":746,"title":{},"body":{"guards/RolesGuard.html":{}}}],["height",{"_index":855,"title":{},"body":{"injectables/UploadsService.html":{}}}],["helmet",{"_index":890,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["here",{"_index":1033,"title":{},"body":{"index.html":{}}}],["heroku",{"_index":1265,"title":{},"body":{"index.html":{}}}],["history",{"_index":1280,"title":{},"body":{"index.html":{}}}],["hood",{"_index":1120,"title":{},"body":{"index.html":{}}}],["hooks",{"_index":1287,"title":{},"body":{"index.html":{}}}],["host",{"_index":310,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/CreateUploadDto.html":{},"classes/Upload.html":{},"miscellaneous/variables.html":{}}}],["host.switchtohttp",{"_index":326,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["http://localhost:3000/api/doc",{"_index":1140,"title":{},"body":{"index.html":{}}}],["httpcode",{"_index":416,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(200",{"_index":436,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":314,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["httpstatus",{"_index":315,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["httpstatus.bad_request",{"_index":337,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["httpstatus.internal_server_error",{"_index":330,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["httpstatus.not_found",{"_index":347,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["httpstatus.request_timeout",{"_index":340,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["httpstatus.unauthorized",{"_index":345,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["id",{"_index":14,"title":{},"body":{"classes/Account.html":{},"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/EmailJwtPayload.html":{},"interfaces/ForgotPasswordJwtPayload.html":{},"classes/Upload.html":{},"injectables/UploadsService.html":{},"interfaces/UserJwtPayload.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":929,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":777,"title":{},"body":{"interfaces/UploadCategory.html":{}}}],["image/${resizeinfo.format",{"_index":843,"title":{},"body":{"injectables/UploadsService.html":{}}}],["image/jpeg",{"_index":632,"title":{},"body":{"classes/CreateUploadDto.html":{},"classes/Upload.html":{},"miscellaneous/variables.html":{}}}],["image/jpg",{"_index":1324,"title":{},"body":{"miscellaneous/variables.html":{}}}],["image/png",{"_index":1325,"title":{},"body":{"miscellaneous/variables.html":{}}}],["imageallowedmimetypes",{"_index":962,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["imageallowedmimetypes?.includes(file.mimetype",{"_index":1322,"title":{},"body":{"miscellaneous/variables.html":{}}}],["implements",{"_index":305,"title":{},"body":{"classes/AllExceptionFilter.html":{},"guards/JwtAuthGuard.html":{},"injectables/LoggingInterceptor.html":{},"guards/RolesGuard.html":{}}}],["import",{"_index":69,"title":{},"body":{"classes/Account.html":{},"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateUploadDto.html":{},"interfaces/EmailJwtPayload.html":{},"interfaces/ForgotPasswordJwtPayload.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoggedInUserDto.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/ProcessedDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateAccountDto.html":{},"classes/Upload.html":{},"interfaces/UploadCategory.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"interfaces/UserJwtPayload.html":{}}}],["important",{"_index":1285,"title":{},"body":{"index.html":{}}}],["imports",{"_index":226,"title":{},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UploadsModule.html":{}}}],["improved",{"_index":887,"title":{},"body":{"changelog.html":{}}}],["increment",{"_index":1239,"title":{},"body":{"index.html":{}}}],["incrementally",{"_index":1191,"title":{},"body":{"index.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"classes/Account.html":{},"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateUploadDto.html":{},"interfaces/EmailJwtPayload.html":{},"interfaces/ForgotPasswordJwtPayload.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoggedInUserDto.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/ProcessedDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"classes/Upload.html":{},"interfaces/UploadCategory.html":{},"injectables/UploadsService.html":{},"interfaces/UserJwtPayload.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Account.html":{},"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateUploadDto.html":{},"interfaces/EmailJwtPayload.html":{},"interfaces/ForgotPasswordJwtPayload.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoggedInUserDto.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/ProcessedDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateAccountDto.html":{},"classes/Upload.html":{},"interfaces/UploadCategory.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"interfaces/UserJwtPayload.html":{}}}],["inherited",{"_index":720,"title":{},"body":{"classes/RegisterDto.html":{}}}],["init",{"_index":1283,"title":{},"body":{"index.html":{}}}],["initial",{"_index":895,"title":{},"body":{"changelog.html":{}}}],["injectable",{"_index":228,"title":{"injectables/AccountsService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/UploadsService.html":{}},"body":{"injectables/AccountsService.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"guards/RolesGuard.html":{},"injectables/UploadsService.html":{},"coverage.html":{}}}],["injectables",{"_index":229,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/UploadsService.html":{},"overview.html":{}}}],["injectrepository",{"_index":261,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/UploadsService.html":{}}}],["injectrepository(account",{"_index":263,"title":{},"body":{"injectables/AccountsService.html":{}}}],["injectrepository(upload",{"_index":820,"title":{},"body":{"injectables/UploadsService.html":{}}}],["inputs",{"_index":339,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["inside",{"_index":857,"title":{},"body":{"injectables/UploadsService.html":{},"miscellaneous/variables.html":{}}}],["install",{"_index":1054,"title":{},"body":{"index.html":{}}}],["installed",{"_index":1042,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":334,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["instructions",{"_index":1276,"title":{},"body":{"index.html":{}}}],["interactively",{"_index":1184,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":690,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["intercept(context",{"_index":691,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["interface",{"_index":635,"title":{"interfaces/EmailJwtPayload.html":{},"interfaces/ForgotPasswordJwtPayload.html":{},"interfaces/UploadCategory.html":{},"interfaces/UserJwtPayload.html":{}},"body":{"interfaces/EmailJwtPayload.html":{},"interfaces/ForgotPasswordJwtPayload.html":{},"interfaces/UploadCategory.html":{},"interfaces/UserJwtPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":636,"title":{},"body":{"interfaces/EmailJwtPayload.html":{},"interfaces/ForgotPasswordJwtPayload.html":{},"interfaces/UploadCategory.html":{},"interfaces/UserJwtPayload.html":{},"overview.html":{}}}],["internalservererrorexception",{"_index":1411,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invalid",{"_index":338,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["isadmin",{"_index":744,"title":{},"body":{"guards/RolesGuard.html":{}}}],["isallowed",{"_index":782,"title":{},"body":{"interfaces/UploadCategory.html":{},"miscellaneous/variables.html":{}}}],["isarray",{"_index":1319,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isboolean",{"_index":717,"title":{},"body":{"classes/ProcessedDto.html":{}}}],["isconfirmed",{"_index":15,"title":{},"body":{"classes/Account.html":{},"injectables/AccountsService.html":{},"injectables/AuthService.html":{},"interfaces/EmailJwtPayload.html":{},"interfaces/ForgotPasswordJwtPayload.html":{},"interfaces/UserJwtPayload.html":{}}}],["isemail",{"_index":598,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/LoginDto.html":{}}}],["isemail()@length(5",{"_index":589,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/RegisterDto.html":{}}}],["isemail()@maxlength(255",{"_index":710,"title":{},"body":{"classes/LoginDto.html":{}}}],["isnumber",{"_index":622,"title":{},"body":{"classes/CreateUploadDto.html":{}}}],["isowner",{"_index":198,"title":{},"body":{"controllers/AccountsController.html":{}}}],["ispasswordcorrect",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{}}}],["ispasswordcorrect(hashedpassword",{"_index":496,"title":{},"body":{"injectables/AuthService.html":{}}}],["isprocessed",{"_index":301,"title":{},"body":{"injectables/AccountsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ProcessedDto.html":{},"injectables/UploadsService.html":{}}}],["issamepassword",{"_index":553,"title":{},"body":{"injectables/AuthService.html":{}}}],["isstring",{"_index":599,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/CreateUploadDto.html":{},"classes/LoggedInUserDto.html":{},"classes/LoginDto.html":{},"classes/ResetPasswordDto.html":{}}}],["isstring()@length(2",{"_index":592,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/RegisterDto.html":{}}}],["isstring()@length(8",{"_index":596,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{}}}],["isstring()@maxlength(255",{"_index":712,"title":{},"body":{"classes/LoginDto.html":{}}}],["issue",{"_index":1185,"title":{},"body":{"index.html":{}}}],["items",{"_index":1320,"title":{},"body":{"miscellaneous/variables.html":{}}}],["john",{"_index":95,"title":{},"body":{"classes/Account.html":{},"classes/CreateAccountDto.html":{}}}],["johndoe@email.com",{"_index":90,"title":{},"body":{"classes/Account.html":{},"classes/CreateAccountDto.html":{},"classes/LoginDto.html":{}}}],["johndoenewpass1234",{"_index":728,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["johndoepass123",{"_index":604,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/LoginDto.html":{}}}],["joincolumn",{"_index":75,"title":{},"body":{"classes/Account.html":{}}}],["joincolumn()@onetoone(undefined",{"_index":27,"title":{},"body":{"classes/Account.html":{}}}],["jpeg",{"_index":859,"title":{},"body":{"injectables/UploadsService.html":{}}}],["json",{"_index":685,"title":{},"body":{"classes/LoggedInUserDto.html":{}}}],["jsonwebtoken",{"_index":517,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["jsonwebtokenerror",{"_index":343,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["jwt",{"_index":390,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"classes/LoggedInUserDto.html":{},"changelog.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":640,"title":{"guards/JwtAuthGuard.html":{}},"body":{"guards/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":667,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":453,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":459,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtstrategy",{"_index":450,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["keep",{"_index":1193,"title":{},"body":{"index.html":{}}}],["kicks",{"_index":1229,"title":{},"body":{"index.html":{}}}],["know",{"_index":1084,"title":{},"body":{"index.html":{}}}],["known",{"_index":1228,"title":{},"body":{"index.html":{}}}],["last",{"_index":53,"title":{},"body":{"classes/Account.html":{},"classes/CreateAccountDto.html":{},"classes/RegisterDto.html":{}}}],["lastname",{"_index":16,"title":{},"body":{"classes/Account.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/RegisterDto.html":{}}}],["leftjoinandselect('account.avatar",{"_index":280,"title":{},"body":{"injectables/AccountsService.html":{}}}],["legend",{"_index":210,"title":{},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UploadsModule.html":{},"overview.html":{}}}],["length",{"_index":600,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/ResetPasswordDto.html":{}}}],["length(2",{"_index":603,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["length(5",{"_index":602,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["length(8",{"_index":605,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/ResetPasswordDto.html":{}}}],["level",{"_index":1131,"title":{},"body":{"index.html":{}}}],["library",{"_index":1121,"title":{},"body":{"index.html":{}}}],["limit",{"_index":774,"title":{},"body":{"interfaces/UploadCategory.html":{}}}],["limits",{"_index":1402,"title":{},"body":{"miscellaneous/variables.html":{}}}],["link",{"_index":1107,"title":{},"body":{"index.html":{}}}],["lint",{"_index":1167,"title":{},"body":{"index.html":{}}}],["linux",{"_index":1057,"title":{},"body":{"index.html":{}}}],["listing",{"_index":531,"title":{},"body":{"injectables/AuthService.html":{}}}],["local",{"_index":677,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["localauthguard",{"_index":430,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":451,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["logged",{"_index":684,"title":{},"body":{"classes/LoggedInUserDto.html":{}}}],["loggedinuserdto",{"_index":423,"title":{"classes/LoggedInUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoggedInUserDto.html":{},"coverage.html":{}}}],["logger",{"_index":316,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"miscellaneous/variables.html":{}}}],["logger.debug(exception",{"_index":324,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["logger.log",{"_index":706,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["logging",{"_index":1335,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logginginterceptor",{"_index":688,"title":{"injectables/LoggingInterceptor.html":{}},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["login",{"_index":376,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{}}}],["login(@user",{"_index":438,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(account",{"_index":386,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logindto",{"_index":500,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto",{"_index":388,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logindto.email",{"_index":523,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto.password",{"_index":527,"title":{},"body":{"injectables/AuthService.html":{}}}],["loss",{"_index":1256,"title":{},"body":{"index.html":{}}}],["lower(:email",{"_index":283,"title":{},"body":{"injectables/AccountsService.html":{}}}],["machine",{"_index":1043,"title":{},"body":{"index.html":{}}}],["made",{"_index":1148,"title":{},"body":{"index.html":{}}}],["mail",{"_index":534,"title":{},"body":{"injectables/AuthService.html":{}}}],["mailerconfig",{"_index":366,"title":{},"body":{"modules/AppModule.html":{}}}],["mailermodule",{"_index":360,"title":{},"body":{"modules/AppModule.html":{}}}],["mailermodule.forroot(maileroptions",{"_index":371,"title":{},"body":{"modules/AppModule.html":{}}}],["maileroptions",{"_index":365,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mailerservice",{"_index":477,"title":{},"body":{"injectables/AuthService.html":{}}}],["major",{"_index":1230,"title":{},"body":{"index.html":{}}}],["make",{"_index":1160,"title":{},"body":{"index.html":{}}}],["manually",{"_index":1161,"title":{},"body":{"index.html":{}}}],["many",{"_index":1321,"title":{},"body":{"miscellaneous/variables.html":{}}}],["matching",{"_index":103,"title":{},"body":{"classes/Account.html":{},"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateUploadDto.html":{},"interfaces/EmailJwtPayload.html":{},"interfaces/ForgotPasswordJwtPayload.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoggedInUserDto.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/ProcessedDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateAccountDto.html":{},"classes/Upload.html":{},"interfaces/UploadCategory.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"interfaces/UserJwtPayload.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":775,"title":{},"body":{"interfaces/UploadCategory.html":{}}}],["maxlength",{"_index":714,"title":{},"body":{"classes/LoginDto.html":{}}}],["maxlength(255",{"_index":715,"title":{},"body":{"classes/LoginDto.html":{}}}],["maxwidthheight",{"_index":770,"title":{},"body":{"interfaces/UploadCategory.html":{},"injectables/UploadsService.html":{},"miscellaneous/variables.html":{}}}],["mb",{"_index":1416,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":331,"title":{},"body":{"classes/AllExceptionFilter.html":{},"index.html":{}}}],["metadata",{"_index":1006,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":700,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["methoddecorator",{"_index":1312,"title":{},"body":{"miscellaneous/variables.html":{}}}],["methods",{"_index":20,"title":{},"body":{"classes/Account.html":{},"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"guards/RolesGuard.html":{},"injectables/UploadsService.html":{}}}],["miaborde",{"_index":1290,"title":{},"body":{"index.html":{}}}],["migration",{"_index":1202,"title":{},"body":{"index.html":{}}}],["migration:generate",{"_index":1203,"title":{},"body":{"index.html":{}}}],["migrationcreate",{"_index":1204,"title":{},"body":{"index.html":{}}}],["migrations",{"_index":1188,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["migrationsdir",{"_index":1340,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrationsrun",{"_index":1334,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mime",{"_index":619,"title":{},"body":{"classes/CreateUploadDto.html":{},"classes/Upload.html":{}}}],["mimetype",{"_index":610,"title":{},"body":{"classes/CreateUploadDto.html":{},"classes/Upload.html":{},"injectables/UploadsService.html":{}}}],["minor",{"_index":1222,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":1019,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":1038,"title":{},"body":{"index.html":{}}}],["model",{"_index":1196,"title":{},"body":{"index.html":{}}}],["models",{"_index":1252,"title":{},"body":{"index.html":{}}}],["models/jwt",{"_index":520,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["models/upload",{"_index":819,"title":{},"body":{"injectables/UploadsService.html":{}}}],["module",{"_index":206,"title":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UploadsModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UploadsModule.html":{},"overview.html":{}}}],["modules",{"_index":208,"title":{"modules.html":{}},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UploadsModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/mailer",{"_index":362,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["moment",{"_index":616,"title":{},"body":{"classes/CreateUploadDto.html":{},"classes/Upload.html":{},"index.html":{}}}],["more",{"_index":1085,"title":{},"body":{"index.html":{}}}],["move",{"_index":1279,"title":{},"body":{"index.html":{}}}],["mozjpeg",{"_index":860,"title":{},"body":{"injectables/UploadsService.html":{}}}],["multerconfig",{"_index":160,"title":{},"body":{"controllers/AccountsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["multerconfig(uploadcategoryname.avatar",{"_index":196,"title":{},"body":{"controllers/AccountsController.html":{}}}],["multeroptions",{"_index":1401,"title":{},"body":{"miscellaneous/variables.html":{}}}],["multipart/form",{"_index":1317,"title":{},"body":{"miscellaneous/variables.html":{}}}],["name",{"_index":44,"title":{},"body":{"classes/Account.html":{},"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"classes/RegisterDto.html":{},"guards/RolesGuard.html":{},"injectables/UploadsService.html":{},"index.html":{}}}],["naming",{"_index":1014,"title":{},"body":{"dependencies.html":{}}}],["namingstrategy",{"_index":1342,"title":{},"body":{"miscellaneous/variables.html":{}}}],["need",{"_index":1040,"title":{},"body":{"index.html":{}}}],["needed",{"_index":1448,"title":{},"body":{"miscellaneous/variables.html":{}}}],["needs",{"_index":1451,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nest",{"_index":1095,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":695,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["nestjs",{"_index":361,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/common",{"_index":150,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"guards/RolesGuard.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":735,"title":{},"body":{"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":454,"title":{},"body":{"modules/AuthModule.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":984,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":651,"title":{},"body":{"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":152,"title":{},"body":{"controllers/AccountsController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":71,"title":{},"body":{"classes/Account.html":{},"controllers/AccountsController.html":{},"controllers/AuthController.html":{},"classes/UpdateAccountDto.html":{},"controllers/UploadsController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":223,"title":{},"body":{"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"dependencies.html":{}}}],["never",{"_index":252,"title":{},"body":{"injectables/AccountsService.html":{}}}],["new",{"_index":201,"title":{},"body":{"controllers/AccountsController.html":{},"classes/AllExceptionFilter.html":{},"injectables/AuthService.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"injectables/UploadsService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newexample",{"_index":1099,"title":{},"body":{"index.html":{}}}],["newpassword",{"_index":259,"title":{},"body":{"injectables/AccountsService.html":{},"classes/ResetPasswordDto.html":{}}}],["next",{"_index":692,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["node",{"_index":905,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["node.js",{"_index":1036,"title":{},"body":{"index.html":{}}}],["node_env=production",{"_index":1274,"title":{},"body":{"index.html":{}}}],["node_modules",{"_index":1164,"title":{},"body":{"index.html":{}}}],["nodeenv",{"_index":1344,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nodejs",{"_index":910,"title":{},"body":{"changelog.html":{}}}],["nodemailer",{"_index":999,"title":{},"body":{"dependencies.html":{}}}],["non",{"_index":908,"title":{},"body":{"changelog.html":{}}}],["notable",{"_index":866,"title":{},"body":{"changelog.html":{}}}],["note",{"_index":1209,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":512,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception('account",{"_index":551,"title":{},"body":{"injectables/AuthService.html":{}}}],["now",{"_index":702,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["now}ms",{"_index":707,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["npm",{"_index":1051,"title":{},"body":{"index.html":{}}}],["null",{"_index":781,"title":{},"body":{"interfaces/UploadCategory.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":45,"title":{},"body":{"classes/Account.html":{},"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUploadDto.html":{},"interfaces/EmailJwtPayload.html":{},"interfaces/ForgotPasswordJwtPayload.html":{},"classes/Upload.html":{},"interfaces/UploadCategory.html":{},"injectables/UploadsService.html":{},"interfaces/UserJwtPayload.html":{},"index.html":{}}}],["object",{"_index":1315,"title":{},"body":{"miscellaneous/variables.html":{}}}],["obligated",{"_index":1159,"title":{},"body":{"index.html":{}}}],["observable",{"_index":649,"title":{},"body":{"guards/JwtAuthGuard.html":{},"injectables/LoggingInterceptor.html":{}}}],["occurrence",{"_index":1289,"title":{},"body":{"index.html":{}}}],["official",{"_index":1126,"title":{},"body":{"index.html":{}}}],["omittype",{"_index":750,"title":{},"body":{"classes/UpdateAccountDto.html":{}}}],["omittype(createaccountdto",{"_index":751,"title":{},"body":{"classes/UpdateAccountDto.html":{}}}],["once",{"_index":1262,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["one",{"_index":1152,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["onetoone",{"_index":76,"title":{},"body":{"classes/Account.html":{}}}],["open",{"_index":1135,"title":{},"body":{"index.html":{}}}],["openapi",{"_index":892,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["operations",{"_index":1177,"title":{},"body":{"index.html":{}}}],["option",{"_index":1260,"title":{},"body":{"index.html":{}}}],["optional",{"_index":9,"title":{},"body":{"classes/Account.html":{},"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUploadDto.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"guards/RolesGuard.html":{},"classes/Upload.html":{},"interfaces/UploadCategory.html":{},"injectables/UploadsService.html":{}}}],["options",{"_index":1436,"title":{},"body":{"miscellaneous/variables.html":{}}}],["orm",{"_index":915,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["ormconfig",{"_index":368,"title":{},"body":{"modules/AppModule.html":{}}}],["otherwise",{"_index":1165,"title":{},"body":{"index.html":{}}}],["out",{"_index":220,"title":{},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UploadsModule.html":{},"overview.html":{}}}],["outgoing",{"_index":1429,"title":{},"body":{"miscellaneous/variables.html":{}}}],["outputs",{"_index":921,"title":{},"body":{"changelog.html":{}}}],["overview",{"_index":1298,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":129,"title":{},"body":{"controllers/AccountsController.html":{}}}],["p",{"_index":1096,"title":{},"body":{"index.html":{}}}],["package",{"_index":980,"title":{"dependencies.html":{}},"body":{"index.html":{}}}],["package.json",{"_index":1240,"title":{},"body":{"index.html":{}}}],["param",{"_index":145,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"controllers/AuthController.html":{}}}],["param('email",{"_index":441,"title":{},"body":{"controllers/AuthController.html":{}}}],["param('id",{"_index":187,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/AuthController.html":{}}}],["param('token",{"_index":446,"title":{},"body":{"controllers/AuthController.html":{}}}],["parameters",{"_index":122,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"guards/RolesGuard.html":{},"injectables/UploadsService.html":{},"miscellaneous/variables.html":{}}}],["parseint((process.env.port",{"_index":1354,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(process.env.admin_port",{"_index":1390,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(process.env.api_transport_port",{"_index":1372,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(process.env.db_port",{"_index":1382,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pass",{"_index":1425,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passport",{"_index":665,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passport.js",{"_index":897,"title":{},"body":{"changelog.html":{}}}],["passportstrategy",{"_index":662,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":666,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":17,"title":{},"body":{"classes/Account.html":{},"injectables/AccountsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateAccountDto.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["password.dto",{"_index":429,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["password.dto.ts",{"_index":726,"title":{},"body":{"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["password.dto.ts:10",{"_index":727,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["password/:email",{"_index":413,"title":{},"body":{"controllers/AuthController.html":{}}}],["password/:id/:token",{"_index":407,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch",{"_index":146,"title":{},"body":{"controllers/AccountsController.html":{},"index.html":{}}}],["patch(':id",{"_index":186,"title":{},"body":{"controllers/AccountsController.html":{}}}],["patch(':id')@roles(role.admin",{"_index":137,"title":{},"body":{"controllers/AccountsController.html":{}}}],["path",{"_index":352,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/CreateUploadDto.html":{},"classes/Upload.html":{},"interfaces/UploadCategory.html":{},"injectables/UploadsService.html":{}}}],["payload",{"_index":543,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.model",{"_index":521,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.model.ts",{"_index":638,"title":{},"body":{"interfaces/EmailJwtPayload.html":{},"interfaces/ForgotPasswordJwtPayload.html":{},"interfaces/UserJwtPayload.html":{},"coverage.html":{}}}],["perform",{"_index":1173,"title":{},"body":{"index.html":{}}}],["pg",{"_index":1004,"title":{},"body":{"dependencies.html":{}}}],["pipe",{"_index":705,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["pixels",{"_index":778,"title":{},"body":{"interfaces/UploadCategory.html":{}}}],["plaintextpassword",{"_index":497,"title":{},"body":{"injectables/AuthService.html":{}}}],["plantuml",{"_index":1123,"title":{},"body":{"index.html":{}}}],["port",{"_index":1327,"title":{},"body":{"miscellaneous/variables.html":{}}}],["port=3333",{"_index":1098,"title":{},"body":{"index.html":{}}}],["ports",{"_index":1423,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":147,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/AuthController.html":{}}}],["post(':id/avatar",{"_index":192,"title":{},"body":{"controllers/AccountsController.html":{}}}],["post(':id/avatar')@roles(role.user)@apifile('file')@useinterceptors(undefined",{"_index":141,"title":{},"body":{"controllers/AccountsController.html":{}}}],["post('login",{"_index":435,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login')@httpcode(200)@useguards(localauthguard)@apibody({type",{"_index":387,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":394,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('reset",{"_index":406,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@roles(role.admin",{"_index":120,"title":{},"body":{"controllers/AccountsController.html":{}}}],["postgres",{"_index":1044,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["postgresql",{"_index":1181,"title":{},"body":{"index.html":{}}}],["pre",{"_index":1286,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":109,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/AuthController.html":{},"controllers/UploadsController.html":{}}}],["prefixed",{"_index":621,"title":{},"body":{"classes/CreateUploadDto.html":{},"classes/Upload.html":{}}}],["preparetoinsert",{"_index":22,"title":{},"body":{"classes/Account.html":{}}}],["prerelease",{"_index":1233,"title":{},"body":{"index.html":{}}}],["present",{"_index":1450,"title":{},"body":{"miscellaneous/variables.html":{}}}],["preserving",{"_index":1197,"title":{},"body":{"index.html":{}}}],["prevent",{"_index":529,"title":{},"body":{"injectables/AuthService.html":{}}}],["preview",{"_index":1430,"title":{},"body":{"miscellaneous/variables.html":{}}}],["previous",{"_index":1175,"title":{},"body":{"index.html":{}}}],["previousavatar",{"_index":293,"title":{},"body":{"injectables/AccountsService.html":{}}}],["primarygeneratedcolumn",{"_index":46,"title":{},"body":{"classes/Account.html":{},"classes/Upload.html":{}}}],["private",{"_index":264,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/AuthService.html":{},"injectables/UploadsService.html":{}}}],["process.cwd()}/templates",{"_index":1433,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env",{"_index":1366,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.api_admin_email",{"_index":1358,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.api_email_jwt_secret",{"_index":1364,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.api_host",{"_index":1352,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.api_name",{"_index":1348,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.api_port",{"_index":1355,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.api_protocol",{"_index":1350,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.api_transport_host",{"_index":1370,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.api_transport_password",{"_index":1376,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.api_transport_user",{"_index":1374,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.api_user_jwt_expiration_time",{"_index":1362,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.api_user_jwt_secret",{"_index":1360,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_host",{"_index":1380,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_name",{"_index":1388,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_password",{"_index":1386,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_user",{"_index":1384,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.mail_api_transport_from",{"_index":1378,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":1345,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.project_name",{"_index":1346,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.pwa_confirm_email_url",{"_index":1392,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.pwa_reset_password_url",{"_index":1394,"title":{},"body":{"miscellaneous/variables.html":{}}}],["processeddto",{"_index":158,"title":{"classes/ProcessedDto.html":{}},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ProcessedDto.html":{},"injectables/UploadsService.html":{},"coverage.html":{}}}],["procfile",{"_index":1269,"title":{},"body":{"index.html":{}}}],["prod/dev",{"_index":912,"title":{},"body":{"changelog.html":{}}}],["production",{"_index":886,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["progressive",{"_index":861,"title":{},"body":{"injectables/UploadsService.html":{}}}],["project",{"_index":868,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["projectname",{"_index":580,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":68,"title":{},"body":{"classes/Account.html":{},"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UploadsService.html":{},"miscellaneous/functions.html":{}}}],["promise.all(uploadedfilepromises",{"_index":827,"title":{},"body":{"injectables/UploadsService.html":{}}}],["properties",{"_index":8,"title":{},"body":{"classes/Account.html":{},"classes/CreateAccountDto.html":{},"classes/CreateUploadDto.html":{},"interfaces/EmailJwtPayload.html":{},"interfaces/ForgotPasswordJwtPayload.html":{},"classes/LoggedInUserDto.html":{},"classes/LoginDto.html":{},"classes/ProcessedDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/Upload.html":{},"interfaces/UploadCategory.html":{},"interfaces/UserJwtPayload.html":{},"miscellaneous/variables.html":{}}}],["protected",{"_index":923,"title":{},"body":{"changelog.html":{}}}],["protection",{"_index":891,"title":{},"body":{"changelog.html":{}}}],["provide",{"_index":1189,"title":{},"body":{"index.html":{}}}],["provided",{"_index":1155,"title":{},"body":{"index.html":{}}}],["providers",{"_index":213,"title":{},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UploadsModule.html":{},"overview.html":{}}}],["provides",{"_index":1200,"title":{},"body":{"index.html":{}}}],["psql",{"_index":1178,"title":{},"body":{"index.html":{}}}],["public",{"_index":1133,"title":{},"body":{"index.html":{}}}],["pull",{"_index":1151,"title":{},"body":{"index.html":{}}}],["push",{"_index":1171,"title":{},"body":{"index.html":{}}}],["pwa",{"_index":1032,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["pwaconfirmemailurl",{"_index":1391,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pwaresetpasswordurl",{"_index":1393,"title":{},"body":{"miscellaneous/variables.html":{}}}],["queries",{"_index":1183,"title":{},"body":{"index.html":{}}}],["query",{"_index":1186,"title":{},"body":{"index.html":{}}}],["queryfailederror",{"_index":321,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["read",{"_index":1134,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":177,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/UploadsService.html":{}}}],["reflect",{"_index":1005,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":732,"title":{},"body":{"guards/RolesGuard.html":{}}}],["register",{"_index":377,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(createaccountdto",{"_index":392,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["registerdto",{"_index":393,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["relationship",{"_index":1115,"title":{},"body":{"index.html":{}}}],["release",{"_index":1205,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["release:prerelease",{"_index":1234,"title":{},"body":{"index.html":{}}}],["removed",{"_index":920,"title":{},"body":{"changelog.html":{}}}],["replace",{"_index":1288,"title":{},"body":{"index.html":{}}}],["repository",{"_index":237,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/UploadsService.html":{}}}],["req",{"_index":779,"title":{},"body":{"interfaces/UploadCategory.html":{},"miscellaneous/variables.html":{}}}],["request",{"_index":317,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"guards/RolesGuard.html":{},"interfaces/UploadCategory.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["request.url",{"_index":353,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["request.user",{"_index":740,"title":{},"body":{"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["require",{"_index":925,"title":{},"body":{"changelog.html":{}}}],["requiredroles",{"_index":736,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles?.includes(role",{"_index":748,"title":{},"body":{"guards/RolesGuard.html":{}}}],["resendconfirmationemail",{"_index":378,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["resendconfirmationemail(email",{"_index":399,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["reset",{"_index":219,"title":{},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UploadsModule.html":{},"index.html":{},"overview.html":{}}}],["resetpassword",{"_index":379,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["resetpassword(id",{"_index":404,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["resetpassworddto",{"_index":405,"title":{"classes/ResetPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["resetpassworddto.newpassword",{"_index":554,"title":{},"body":{"injectables/AuthService.html":{}}}],["resetpasswordurl",{"_index":582,"title":{},"body":{"injectables/AuthService.html":{}}}],["resize",{"_index":853,"title":{},"body":{"injectables/UploadsService.html":{}}}],["resized",{"_index":626,"title":{},"body":{"classes/CreateUploadDto.html":{},"classes/Upload.html":{}}}],["resizeimage",{"_index":797,"title":{},"body":{"injectables/UploadsService.html":{}}}],["resizeimage(file",{"_index":807,"title":{},"body":{"injectables/UploadsService.html":{}}}],["resizeinfo",{"_index":831,"title":{},"body":{"injectables/UploadsService.html":{}}}],["resizeinfo.path",{"_index":842,"title":{},"body":{"injectables/UploadsService.html":{}}}],["resizeinfo.size",{"_index":841,"title":{},"body":{"injectables/UploadsService.html":{}}}],["resource",{"_index":1444,"title":{},"body":{"miscellaneous/variables.html":{}}}],["respect",{"_index":1154,"title":{},"body":{"index.html":{}}}],["respects",{"_index":1144,"title":{},"body":{"index.html":{}}}],["response",{"_index":318,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["response.status(status).json",{"_index":349,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["result",{"_index":102,"title":{},"body":{"classes/Account.html":{},"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateUploadDto.html":{},"interfaces/EmailJwtPayload.html":{},"interfaces/ForgotPasswordJwtPayload.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoggedInUserDto.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/ProcessedDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateAccountDto.html":{},"classes/Upload.html":{},"interfaces/UploadCategory.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"interfaces/UserJwtPayload.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":104,"title":{},"body":{"classes/Account.html":{},"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateUploadDto.html":{},"interfaces/EmailJwtPayload.html":{},"interfaces/ForgotPasswordJwtPayload.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoggedInUserDto.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/ProcessedDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateAccountDto.html":{},"classes/Upload.html":{},"interfaces/UploadCategory.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"interfaces/UserJwtPayload.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["retry",{"_index":1174,"title":{},"body":{"index.html":{}}}],["retrydatabase",{"_index":1176,"title":{},"body":{"index.html":{}}}],["return",{"_index":180,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"guards/RolesGuard.html":{},"injectables/UploadsService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":67,"title":{},"body":{"classes/Account.html":{},"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"guards/RolesGuard.html":{},"injectables/UploadsService.html":{},"miscellaneous/functions.html":{}}}],["revert",{"_index":1199,"title":{},"body":{"index.html":{}}}],["rf",{"_index":1282,"title":{},"body":{"index.html":{}}}],["rights",{"_index":84,"title":{},"body":{"classes/Account.html":{}}}],["rm",{"_index":1281,"title":{},"body":{"index.html":{}}}],["role",{"_index":56,"title":{},"body":{"classes/Account.html":{},"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"interfaces/EmailJwtPayload.html":{},"interfaces/ForgotPasswordJwtPayload.html":{},"guards/RolesGuard.html":{},"interfaces/UserJwtPayload.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role.admin",{"_index":270,"title":{},"body":{"injectables/AccountsService.html":{}}}],["role.user",{"_index":94,"title":{},"body":{"classes/Account.html":{}}}],["roles",{"_index":18,"title":{},"body":{"classes/Account.html":{},"controllers/AccountsController.html":{},"injectables/AuthService.html":{},"interfaces/EmailJwtPayload.html":{},"interfaces/ForgotPasswordJwtPayload.html":{},"interfaces/UserJwtPayload.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(role.admin",{"_index":178,"title":{},"body":{"controllers/AccountsController.html":{}}}],["roles(role.user",{"_index":193,"title":{},"body":{"controllers/AccountsController.html":{}}}],["roles.join",{"_index":1447,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":729,"title":{"guards/RolesGuard.html":{}},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["root",{"_index":909,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["routes",{"_index":924,"title":{},"body":{"changelog.html":{}}}],["run",{"_index":1034,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":320,"title":{},"body":{"classes/AllExceptionFilter.html":{},"guards/JwtAuthGuard.html":{},"injectables/LoggingInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":697,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["scale",{"_index":1102,"title":{},"body":{"index.html":{}}}],["schema",{"_index":1192,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["scripts",{"_index":1169,"title":{},"body":{"index.html":{}}}],["secret",{"_index":460,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["secretorkey",{"_index":669,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secure",{"_index":1421,"title":{},"body":{"miscellaneous/variables.html":{}}}],["security",{"_index":1130,"title":{},"body":{"index.html":{}}}],["see",{"_index":870,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["select",{"_index":91,"title":{},"body":{"classes/Account.html":{}}}],["selinux",{"_index":913,"title":{},"body":{"changelog.html":{}}}],["semantic",{"_index":1206,"title":{},"body":{"index.html":{}}}],["send",{"_index":396,"title":{},"body":{"controllers/AuthController.html":{}}}],["sendconfirmationemail",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{}}}],["sendconfirmationemail(email",{"_index":505,"title":{},"body":{"injectables/AuthService.html":{}}}],["sendemailforgotpassword",{"_index":380,"title":{},"body":{"controllers/AuthController.html":{}}}],["sendemailforgotpassword(email",{"_index":411,"title":{},"body":{"controllers/AuthController.html":{}}}],["sendpasswordchangedemail",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{}}}],["sendpasswordchangedemail(email",{"_index":507,"title":{},"body":{"injectables/AuthService.html":{}}}],["sendresetpasswordemail",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{}}}],["sendresetpasswordemail(accountwithcredentials",{"_index":509,"title":{},"body":{"injectables/AuthService.html":{}}}],["server",{"_index":332,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/CreateUploadDto.html":{},"classes/Upload.html":{},"index.html":{}}}],["set",{"_index":1261,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["setmetadata('roles",{"_index":1437,"title":{},"body":{"miscellaneous/variables.html":{}}}],["settings",{"_index":1079,"title":{},"body":{"index.html":{}}}],["sharp",{"_index":812,"title":{},"body":{"injectables/UploadsService.html":{},"dependencies.html":{}}}],["sharp(file.path",{"_index":852,"title":{},"body":{"injectables/UploadsService.html":{}}}],["sharp.outputinfo",{"_index":832,"title":{},"body":{"injectables/UploadsService.html":{}}}],["short",{"_index":1067,"title":{},"body":{"index.html":{}}}],["sign",{"_index":516,"title":{},"body":{"injectables/AuthService.html":{}}}],["sign(payload",{"_index":562,"title":{},"body":{"injectables/AuthService.html":{}}}],["signoptions",{"_index":462,"title":{},"body":{"modules/AuthModule.html":{}}}],["size",{"_index":611,"title":{},"body":{"classes/CreateUploadDto.html":{},"classes/Upload.html":{},"interfaces/UploadCategory.html":{},"injectables/UploadsService.html":{}}}],["snakenamingstrategy",{"_index":1343,"title":{},"body":{"miscellaneous/variables.html":{}}}],["software",{"_index":81,"title":{},"body":{"classes/Account.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Account.html":{},"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateUploadDto.html":{},"interfaces/EmailJwtPayload.html":{},"interfaces/ForgotPasswordJwtPayload.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoggedInUserDto.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/ProcessedDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateAccountDto.html":{},"classes/Upload.html":{},"interfaces/UploadCategory.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"interfaces/UserJwtPayload.html":{}}}],["specification",{"_index":1208,"title":{},"body":{"index.html":{}}}],["specifies",{"_index":1270,"title":{},"body":{"index.html":{}}}],["src",{"_index":1337,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../account.entity.ts",{"_index":1021,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../api",{"_index":1303,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.ts",{"_index":1306,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../file",{"_index":1304,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../filename",{"_index":1307,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../mailerconfig.ts",{"_index":1309,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1024,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../multer.config.ts",{"_index":1308,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../ormconfig.ts",{"_index":1305,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.decorator.ts",{"_index":1310,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../upload",{"_index":1022,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../user.decorator.ts",{"_index":1311,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/accounts/accounts.controller.ts",{"_index":108,"title":{},"body":{"controllers/AccountsController.html":{},"coverage.html":{}}}],["src/accounts/accounts.controller.ts:36",{"_index":121,"title":{},"body":{"controllers/AccountsController.html":{}}}],["src/accounts/accounts.controller.ts:42",{"_index":131,"title":{},"body":{"controllers/AccountsController.html":{}}}],["src/accounts/accounts.controller.ts:48",{"_index":134,"title":{},"body":{"controllers/AccountsController.html":{}}}],["src/accounts/accounts.controller.ts:54",{"_index":138,"title":{},"body":{"controllers/AccountsController.html":{}}}],["src/accounts/accounts.controller.ts:63",{"_index":125,"title":{},"body":{"controllers/AccountsController.html":{}}}],["src/accounts/accounts.controller.ts:74",{"_index":142,"title":{},"body":{"controllers/AccountsController.html":{}}}],["src/accounts/accounts.controller.ts:90",{"_index":128,"title":{},"body":{"controllers/AccountsController.html":{}}}],["src/accounts/accounts.module.ts",{"_index":221,"title":{},"body":{"modules/AccountsModule.html":{}}}],["src/accounts/accounts.service.ts",{"_index":230,"title":{},"body":{"injectables/AccountsService.html":{},"coverage.html":{}}}],["src/accounts/accounts.service.ts:103",{"_index":257,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/accounts/accounts.service.ts:122",{"_index":244,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/accounts/accounts.service.ts:16",{"_index":238,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/accounts/accounts.service.ts:24",{"_index":240,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/accounts/accounts.service.ts:39",{"_index":254,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/accounts/accounts.service.ts:53",{"_index":248,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/accounts/accounts.service.ts:66",{"_index":245,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/accounts/accounts.service.ts:70",{"_index":255,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/accounts/accounts.service.ts:84",{"_index":242,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/accounts/accounts.service.ts:88",{"_index":260,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/accounts/dto/create",{"_index":587,"title":{},"body":{"classes/CreateAccountDto.html":{},"coverage.html":{}}}],["src/accounts/dto/update",{"_index":749,"title":{},"body":{"classes/UpdateAccountDto.html":{},"coverage.html":{}}}],["src/accounts/entities/account.entity.ts",{"_index":6,"title":{},"body":{"classes/Account.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/accounts/entities/account.entity.ts:26",{"_index":47,"title":{},"body":{"classes/Account.html":{}}}],["src/accounts/entities/account.entity.ts:29",{"_index":35,"title":{},"body":{"classes/Account.html":{}}}],["src/accounts/entities/account.entity.ts:32",{"_index":64,"title":{},"body":{"classes/Account.html":{}}}],["src/accounts/entities/account.entity.ts:40",{"_index":40,"title":{},"body":{"classes/Account.html":{}}}],["src/accounts/entities/account.entity.ts:48",{"_index":54,"title":{},"body":{"classes/Account.html":{}}}],["src/accounts/entities/account.entity.ts:55",{"_index":50,"title":{},"body":{"classes/Account.html":{}}}],["src/accounts/entities/account.entity.ts:67",{"_index":62,"title":{},"body":{"classes/Account.html":{}}}],["src/accounts/entities/account.entity.ts:74",{"_index":42,"title":{},"body":{"classes/Account.html":{}}}],["src/accounts/entities/account.entity.ts:81",{"_index":52,"title":{},"body":{"classes/Account.html":{}}}],["src/accounts/entities/account.entity.ts:87",{"_index":31,"title":{},"body":{"classes/Account.html":{}}}],["src/accounts/entities/account.entity.ts:90",{"_index":66,"title":{},"body":{"classes/Account.html":{}}}],["src/app.module.ts",{"_index":359,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":373,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:32",{"_index":389,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:40",{"_index":395,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:51",{"_index":403,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:61",{"_index":384,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:70",{"_index":414,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:78",{"_index":408,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":452,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":465,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:104",{"_index":504,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:136",{"_index":487,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:148",{"_index":494,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:158",{"_index":491,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:164",{"_index":498,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:171",{"_index":483,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:181",{"_index":485,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:194",{"_index":506,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:215",{"_index":510,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:235",{"_index":508,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:25",{"_index":478,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:31",{"_index":501,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:51",{"_index":502,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:65",{"_index":503,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:74",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:91",{"_index":489,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/roles.decorator.ts",{"_index":943,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/user.decorator.ts",{"_index":947,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/logged",{"_index":680,"title":{},"body":{"classes/LoggedInUserDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":709,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:10",{"_index":711,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:18",{"_index":713,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/register.dto.ts",{"_index":719,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/auth/dto/reset",{"_index":725,"title":{},"body":{"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["src/auth/guards/jwt",{"_index":642,"title":{},"body":{"guards/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/local",{"_index":670,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts",{"_index":730,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts:12",{"_index":733,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guards/roles.guard.ts:15",{"_index":734,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/models/jwt",{"_index":637,"title":{},"body":{"interfaces/EmailJwtPayload.html":{},"interfaces/ForgotPasswordJwtPayload.html":{},"interfaces/UserJwtPayload.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":656,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:11",{"_index":659,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:19",{"_index":661,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts",{"_index":672,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/local.strategy.ts:15",{"_index":676,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts:9",{"_index":674,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/common/dto/processed.dto.ts",{"_index":716,"title":{},"body":{"classes/ProcessedDto.html":{},"coverage.html":{}}}],["src/common/dto/processed.dto.ts:5",{"_index":718,"title":{},"body":{"classes/ProcessedDto.html":{}}}],["src/common/filters/all",{"_index":303,"title":{},"body":{"classes/AllExceptionFilter.html":{},"coverage.html":{}}}],["src/common/interceptors/logging.interceptor.ts",{"_index":689,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/logging.interceptor.ts:13",{"_index":694,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/environment.ts",{"_index":954,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/mailerconfig.ts",{"_index":955,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":956,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/migrations",{"_index":1341,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/ormconfig.ts",{"_index":958,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["src/uploads/configs/file",{"_index":959,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/uploads/configs/filename",{"_index":963,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/uploads/configs/multer.config.ts",{"_index":966,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/uploads/decorators/api",{"_index":968,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/uploads/dto/create",{"_index":607,"title":{},"body":{"classes/CreateUploadDto.html":{},"coverage.html":{}}}],["src/uploads/entities/upload.entity.ts",{"_index":752,"title":{},"body":{"classes/Upload.html":{},"coverage.html":{}}}],["src/uploads/entities/upload.entity.ts:12",{"_index":755,"title":{},"body":{"classes/Upload.html":{}}}],["src/uploads/entities/upload.entity.ts:15",{"_index":753,"title":{},"body":{"classes/Upload.html":{}}}],["src/uploads/entities/upload.entity.ts:18",{"_index":762,"title":{},"body":{"classes/Upload.html":{}}}],["src/uploads/entities/upload.entity.ts:25",{"_index":754,"title":{},"body":{"classes/Upload.html":{}}}],["src/uploads/entities/upload.entity.ts:32",{"_index":757,"title":{},"body":{"classes/Upload.html":{}}}],["src/uploads/entities/upload.entity.ts:39",{"_index":758,"title":{},"body":{"classes/Upload.html":{}}}],["src/uploads/entities/upload.entity.ts:46",{"_index":756,"title":{},"body":{"classes/Upload.html":{}}}],["src/uploads/entities/upload.entity.ts:53",{"_index":760,"title":{},"body":{"classes/Upload.html":{}}}],["src/uploads/entities/upload.entity.ts:60",{"_index":761,"title":{},"body":{"classes/Upload.html":{}}}],["src/uploads/entities/upload.entity.ts:67",{"_index":759,"title":{},"body":{"classes/Upload.html":{}}}],["src/uploads/models/upload",{"_index":764,"title":{},"body":{"interfaces/UploadCategory.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/uploads/uploads.controller.ts",{"_index":784,"title":{},"body":{"controllers/UploadsController.html":{},"coverage.html":{}}}],["src/uploads/uploads.module.ts",{"_index":790,"title":{},"body":{"modules/UploadsModule.html":{}}}],["src/uploads/uploads.service.ts",{"_index":795,"title":{},"body":{"injectables/UploadsService.html":{},"coverage.html":{}}}],["src/uploads/uploads.service.ts:15",{"_index":799,"title":{},"body":{"injectables/UploadsService.html":{}}}],["src/uploads/uploads.service.ts:21",{"_index":805,"title":{},"body":{"injectables/UploadsService.html":{}}}],["src/uploads/uploads.service.ts:35",{"_index":802,"title":{},"body":{"injectables/UploadsService.html":{}}}],["src/uploads/uploads.service.ts:66",{"_index":806,"title":{},"body":{"injectables/UploadsService.html":{}}}],["src/uploads/uploads.service.ts:75",{"_index":809,"title":{},"body":{"injectables/UploadsService.html":{}}}],["stable",{"_index":1232,"title":{},"body":{"index.html":{}}}],["stack",{"_index":1031,"title":{},"body":{"index.html":{}}}],["staged",{"_index":1248,"title":{},"body":{"index.html":{}}}],["standard",{"_index":871,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["standardized",{"_index":1153,"title":{},"body":{"index.html":{}}}],["start",{"_index":1109,"title":{},"body":{"index.html":{}}}],["startcontainerized",{"_index":1055,"title":{},"body":{"index.html":{}}}],["started",{"_index":864,"title":{"changelog.html":{},"index.html":{}},"body":{}}],["starting",{"_index":1215,"title":{},"body":{"index.html":{}}}],["startup",{"_index":1272,"title":{},"body":{"index.html":{}}}],["stash",{"_index":1210,"title":{},"body":{"index.html":{}}}],["statements",{"_index":930,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1114,"title":{},"body":{"index.html":{}}}],["status",{"_index":329,"title":{},"body":{"classes/AllExceptionFilter.html":{},"changelog.html":{}}}],["storage",{"_index":1407,"title":{},"body":{"miscellaneous/variables.html":{}}}],["strategies",{"_index":1015,"title":{},"body":{"dependencies.html":{}}}],["strategies/jwt.strategy",{"_index":457,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":458,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":664,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["strict",{"_index":1129,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["string",{"_index":36,"title":{},"body":{"classes/Account.html":{},"injectables/AccountsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateUploadDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoggedInUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/Upload.html":{},"interfaces/UploadCategory.html":{},"injectables/UploadsService.html":{},"miscellaneous/variables.html":{}}}],["studio",{"_index":1074,"title":{},"body":{"index.html":{}}}],["subject",{"_index":575,"title":{},"body":{"injectables/AuthService.html":{}}}],["suffix",{"_index":1395,"title":{},"body":{"miscellaneous/variables.html":{}}}],["suffix}${filename.substring(filename.lastindexof",{"_index":1398,"title":{},"body":{"miscellaneous/variables.html":{}}}],["summary",{"_index":1446,"title":{},"body":{"miscellaneous/variables.html":{}}}],["super",{"_index":654,"title":{},"body":{"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super.canactivate(context",{"_index":655,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["support",{"_index":1295,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1296,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1010,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["switchtohttp",{"_index":698,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["sync",{"_index":917,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["synchronize",{"_index":1264,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["synchronizes",{"_index":1251,"title":{},"body":{"index.html":{}}}],["t",{"_index":1094,"title":{},"body":{"index.html":{}}}],["table",{"_index":979,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":978,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":1244,"title":{},"body":{"index.html":{}}}],["tags",{"_index":1235,"title":{},"body":{"index.html":{}}}],["tap",{"_index":696,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["target",{"_index":1093,"title":{},"body":{"index.html":{}}}],["team",{"_index":1149,"title":{},"body":{"index.html":{}}}],["template",{"_index":577,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["terminal",{"_index":1179,"title":{},"body":{"index.html":{}}}],["tested",{"_index":1162,"title":{},"body":{"index.html":{}}}],["this.accountrepository",{"_index":274,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.accountrepository.create(createaccountdto",{"_index":266,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.accountrepository.delete",{"_index":288,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.accountrepository.find",{"_index":284,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.accountrepository.findoneorfail(id",{"_index":286,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.accountrepository.save",{"_index":273,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.accountrepository.update(id",{"_index":299,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.accountsservice.create(createaccountdto",{"_index":181,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AuthService.html":{}}}],["this.accountsservice.delete(id",{"_index":191,"title":{},"body":{"controllers/AccountsController.html":{}}}],["this.accountsservice.deleteavatar(id",{"_index":205,"title":{},"body":{"controllers/AccountsController.html":{}}}],["this.accountsservice.findall",{"_index":182,"title":{},"body":{"controllers/AccountsController.html":{}}}],["this.accountsservice.findonebyemail",{"_index":522,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.accountsservice.findonebyemail(email",{"_index":541,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.accountsservice.findonebyid",{"_index":550,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.accountsservice.findonebyid(id",{"_index":185,"title":{},"body":{"controllers/AccountsController.html":{}}}],["this.accountsservice.findonebyid(payload.id",{"_index":545,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["this.accountsservice.update(account.id",{"_index":548,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.accountsservice.update(id",{"_index":188,"title":{},"body":{"controllers/AccountsController.html":{}}}],["this.accountsservice.updateavatar(id",{"_index":203,"title":{},"body":{"controllers/AccountsController.html":{}}}],["this.accountsservice.updatepassword",{"_index":557,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authservice.confirmemail(token",{"_index":444,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.createusertoken(account",{"_index":439,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.forgotpassword(email",{"_index":445,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login",{"_index":679,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.authservice.register(createaccountdto",{"_index":440,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.resendconfirmationemail(email",{"_index":442,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.resetpassword(id",{"_index":447,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.create(file",{"_index":826,"title":{},"body":{"injectables/UploadsService.html":{}}}],["this.createconfirmemailtoken(account",{"_index":570,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.createresetpasswordtoken(accountwithcredentials",{"_index":581,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.email",{"_index":100,"title":{},"body":{"classes/Account.html":{}}}],["this.email.tolowercase",{"_index":101,"title":{},"body":{"classes/Account.html":{}}}],["this.getpayloadfromemailtoken(emailtoken",{"_index":544,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getpayloadfromforgotpasswordtoken(accountwithcredentials",{"_index":552,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.ispasswordcorrect",{"_index":525,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.mailerservice.sendmail",{"_index":574,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.password",{"_index":97,"title":{},"body":{"classes/Account.html":{}}}],["this.reflector.getallandoverride('roles",{"_index":737,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.resizeimage",{"_index":834,"title":{},"body":{"injectables/UploadsService.html":{}}}],["this.sendconfirmationemail(createaccountdto.email",{"_index":540,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.sendconfirmationemail(email",{"_index":542,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.sendpasswordchangedemail(email",{"_index":559,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.sendresetpasswordemail(accountwithcredentials",{"_index":549,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.uploadrepository.create(createuploaddto",{"_index":845,"title":{},"body":{"injectables/UploadsService.html":{}}}],["this.uploadrepository.delete(id",{"_index":848,"title":{},"body":{"injectables/UploadsService.html":{}}}],["this.uploadrepository.findoneorfail(id",{"_index":847,"title":{},"body":{"injectables/UploadsService.html":{}}}],["this.uploadrepository.save(createdupload",{"_index":846,"title":{},"body":{"injectables/UploadsService.html":{}}}],["this.uploadsservice.create",{"_index":290,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.uploadsservice.delete(avatar.id",{"_index":300,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.uploadsservice.delete(previousavatar.id",{"_index":296,"title":{},"body":{"injectables/AccountsService.html":{}}}],["throw",{"_index":200,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"injectables/UploadsService.html":{},"miscellaneous/variables.html":{}}}],["thrownat",{"_index":350,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["thumb",{"_index":836,"title":{},"body":{"injectables/UploadsService.html":{}}}],["thumb.jpg",{"_index":634,"title":{},"body":{"classes/CreateUploadDto.html":{},"classes/Upload.html":{}}}],["thumbmimetype",{"_index":612,"title":{},"body":{"classes/CreateUploadDto.html":{},"classes/Upload.html":{},"injectables/UploadsService.html":{}}}],["thumbpath",{"_index":613,"title":{},"body":{"classes/CreateUploadDto.html":{},"classes/Upload.html":{},"injectables/UploadsService.html":{}}}],["thumbsize",{"_index":614,"title":{},"body":{"classes/CreateUploadDto.html":{},"classes/Upload.html":{},"injectables/UploadsService.html":{}}}],["time",{"_index":1257,"title":{},"body":{"index.html":{}}}],["timeout",{"_index":341,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["timeouterror",{"_index":319,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["timestamptz",{"_index":34,"title":{},"body":{"classes/Account.html":{},"classes/Upload.html":{}}}],["todo",{"_index":528,"title":{},"body":{"injectables/AuthService.html":{}}}],["tofile(path",{"_index":862,"title":{},"body":{"injectables/UploadsService.html":{}}}],["token",{"_index":346,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoggedInUserDto.html":{}}}],["tokenexpirederror",{"_index":344,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["tool",{"_index":1111,"title":{},"body":{"index.html":{}}}],["toupdate",{"_index":285,"title":{},"body":{"injectables/AccountsService.html":{}}}],["toupdate.avatar",{"_index":294,"title":{},"body":{"injectables/AccountsService.html":{}}}],["toupdate?.avatar",{"_index":298,"title":{},"body":{"injectables/AccountsService.html":{}}}],["transformer",{"_index":990,"title":{},"body":{"dependencies.html":{}}}],["transport",{"_index":1418,"title":{},"body":{"miscellaneous/variables.html":{}}}],["trigger",{"_index":1166,"title":{},"body":{"index.html":{}}}],["true",{"_index":29,"title":{},"body":{"classes/Account.html":{},"injectables/AccountsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"injectables/UploadsService.html":{},"miscellaneous/variables.html":{}}}],["turned",{"_index":918,"title":{},"body":{"changelog.html":{}}}],["type",{"_index":23,"title":{},"body":{"classes/Account.html":{},"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateUploadDto.html":{},"interfaces/EmailJwtPayload.html":{},"interfaces/ForgotPasswordJwtPayload.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoggedInUserDto.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/ProcessedDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"guards/RolesGuard.html":{},"classes/Upload.html":{},"interfaces/UploadCategory.html":{},"injectables/UploadsService.html":{},"interfaces/UserJwtPayload.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":78,"title":{},"body":{"classes/Account.html":{},"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"classes/Upload.html":{},"injectables/UploadsService.html":{},"dependencies.html":{},"index.html":{}}}],["typeorm/error/entitynotfounderror",{"_index":323,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["typeormmodule",{"_index":222,"title":{},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UploadsModule.html":{}}}],["typeormmodule.forfeature([account",{"_index":227,"title":{},"body":{"modules/AccountsModule.html":{},"modules/AuthModule.html":{}}}],["typeormmodule.forfeature([upload",{"_index":794,"title":{},"body":{"modules/UploadsModule.html":{}}}],["typeormmodule.forroot(connectionoptions",{"_index":370,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":985,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":93,"title":{},"body":{"classes/Account.html":{}}}],["ui",{"_index":1011,"title":{},"body":{"dependencies.html":{}}}],["uml",{"_index":1025,"title":{},"body":{"index.html":{}}}],["umlgit",{"_index":1142,"title":{},"body":{"index.html":{}}}],["unauthorized",{"_index":1441,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorizedexception",{"_index":513,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('invalid",{"_index":524,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":61,"title":{},"body":{"classes/Account.html":{},"injectables/AccountsService.html":{},"injectables/UploadsService.html":{}}}],["under",{"_index":1119,"title":{},"body":{"index.html":{}}}],["unique",{"_index":39,"title":{},"body":{"classes/Account.html":{}}}],["uniquefilenamegenerator",{"_index":965,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["unknown",{"_index":309,"title":{},"body":{"classes/AllExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["up",{"_index":1063,"title":{},"body":{"index.html":{}}}],["update",{"_index":116,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"index.html":{}}}],["update(id",{"_index":135,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{}}}],["updateaccountdto",{"_index":136,"title":{"classes/UpdateAccountDto.html":{}},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"classes/UpdateAccountDto.html":{},"coverage.html":{}}}],["updateavatar",{"_index":233,"title":{},"body":{"injectables/AccountsService.html":{}}}],["updateavatar(id",{"_index":256,"title":{},"body":{"injectables/AccountsService.html":{}}}],["updatedaccount",{"_index":287,"title":{},"body":{"injectables/AccountsService.html":{}}}],["updatedat",{"_index":19,"title":{},"body":{"classes/Account.html":{},"classes/Upload.html":{}}}],["updatedatecolumn",{"_index":77,"title":{},"body":{"classes/Account.html":{},"classes/Upload.html":{}}}],["updatedatecolumn({type",{"_index":63,"title":{},"body":{"classes/Account.html":{},"classes/Upload.html":{}}}],["updatepassword",{"_index":234,"title":{},"body":{"injectables/AccountsService.html":{}}}],["updatepassword(id",{"_index":258,"title":{},"body":{"injectables/AccountsService.html":{}}}],["upload",{"_index":25,"title":{"classes/Upload.html":{}},"body":{"classes/Account.html":{},"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/AuthModule.html":{},"classes/Upload.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["upload.dto",{"_index":818,"title":{},"body":{"injectables/UploadsService.html":{}}}],["upload.dto.ts",{"_index":608,"title":{},"body":{"classes/CreateUploadDto.html":{},"coverage.html":{}}}],["upload.dto.ts:16",{"_index":620,"title":{},"body":{"classes/CreateUploadDto.html":{}}}],["upload.dto.ts:23",{"_index":623,"title":{},"body":{"classes/CreateUploadDto.html":{}}}],["upload.dto.ts:30",{"_index":618,"title":{},"body":{"classes/CreateUploadDto.html":{}}}],["upload.dto.ts:37",{"_index":627,"title":{},"body":{"classes/CreateUploadDto.html":{}}}],["upload.dto.ts:44",{"_index":628,"title":{},"body":{"classes/CreateUploadDto.html":{}}}],["upload.dto.ts:51",{"_index":625,"title":{},"body":{"classes/CreateUploadDto.html":{}}}],["upload.dto.ts:9",{"_index":615,"title":{},"body":{"classes/CreateUploadDto.html":{}}}],["uploadavatar",{"_index":117,"title":{},"body":{"controllers/AccountsController.html":{}}}],["uploadavatar(account",{"_index":139,"title":{},"body":{"controllers/AccountsController.html":{}}}],["uploadcategories",{"_index":816,"title":{},"body":{"injectables/UploadsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["uploadcategories.find",{"_index":828,"title":{},"body":{"injectables/UploadsService.html":{},"miscellaneous/variables.html":{}}}],["uploadcategory",{"_index":763,"title":{"interfaces/UploadCategory.html":{}},"body":{"interfaces/UploadCategory.html":{},"injectables/UploadsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["uploadcategory.destination",{"_index":1409,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uploadcategory.fieldname.length",{"_index":1406,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uploadcategory.filefilter",{"_index":1410,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uploadcategory.filesizelimit",{"_index":1404,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uploadcategory.maxwidthheight",{"_index":835,"title":{},"body":{"injectables/UploadsService.html":{}}}],["uploadcategory?.maxwidthheight",{"_index":833,"title":{},"body":{"injectables/UploadsService.html":{}}}],["uploadcategoryname",{"_index":165,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"interfaces/UploadCategory.html":{},"injectables/UploadsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["uploadcategoryname.avatar",{"_index":291,"title":{},"body":{"injectables/AccountsService.html":{},"miscellaneous/variables.html":{}}}],["uploaded",{"_index":617,"title":{},"body":{"classes/CreateUploadDto.html":{},"classes/Upload.html":{},"interfaces/UploadCategory.html":{}}}],["uploadedfile",{"_index":148,"title":{},"body":{"controllers/AccountsController.html":{}}}],["uploadedfilepromises",{"_index":824,"title":{},"body":{"injectables/UploadsService.html":{}}}],["uploadrepository",{"_index":800,"title":{},"body":{"injectables/UploadsService.html":{}}}],["uploads",{"_index":785,"title":{},"body":{"controllers/UploadsController.html":{},"miscellaneous/variables.html":{}}}],["uploads.controller",{"_index":792,"title":{},"body":{"modules/UploadsModule.html":{}}}],["uploads.service",{"_index":793,"title":{},"body":{"modules/UploadsModule.html":{}}}],["uploads/configs/multer.config",{"_index":161,"title":{},"body":{"controllers/AccountsController.html":{}}}],["uploads/decorators/api",{"_index":163,"title":{},"body":{"controllers/AccountsController.html":{}}}],["uploads/entities/upload.entity",{"_index":79,"title":{},"body":{"classes/Account.html":{},"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/AuthModule.html":{}}}],["uploads/models/upload",{"_index":166,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{}}}],["uploads/public",{"_index":1413,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uploads/public/uuid",{"_index":633,"title":{},"body":{"classes/CreateUploadDto.html":{},"classes/Upload.html":{}}}],["uploads/public/uuid.jpg",{"_index":630,"title":{},"body":{"classes/CreateUploadDto.html":{},"classes/Upload.html":{}}}],["uploads/uploads.module",{"_index":369,"title":{},"body":{"modules/AppModule.html":{}}}],["uploads/uploads.service",{"_index":224,"title":{},"body":{"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/AuthModule.html":{}}}],["uploadscontroller",{"_index":783,"title":{"controllers/UploadsController.html":{}},"body":{"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"coverage.html":{}}}],["uploadsmodule",{"_index":358,"title":{"modules/UploadsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UploadsModule.html":{},"modules.html":{},"overview.html":{}}}],["uploadsservice",{"_index":217,"title":{"injectables/UploadsService.html":{}},"body":{"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/AuthModule.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"coverage.html":{},"overview.html":{}}}],["url",{"_index":701,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"index.html":{}}}],["use",{"_index":1066,"title":{},"body":{"index.html":{}}}],["used",{"_index":241,"title":{},"body":{"injectables/AccountsService.html":{}}}],["useguards",{"_index":417,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard",{"_index":1438,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useguards(localauthguard",{"_index":437,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":149,"title":{},"body":{"controllers/AccountsController.html":{}}}],["user",{"_index":88,"title":{},"body":{"classes/Account.html":{},"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"controllers/AuthController.html":{},"classes/CreateAccountDto.html":{},"classes/LoggedInUserDto.html":{},"classes/RegisterDto.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":425,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.dto.ts",{"_index":681,"title":{},"body":{"classes/LoggedInUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":683,"title":{},"body":{"classes/LoggedInUserDto.html":{}}}],["user.dto.ts:16",{"_index":682,"title":{},"body":{"classes/LoggedInUserDto.html":{}}}],["userjwtpayload",{"_index":519,"title":{"interfaces/UserJwtPayload.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/EmailJwtPayload.html":{},"interfaces/ForgotPasswordJwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/UserJwtPayload.html":{},"coverage.html":{}}}],["username",{"_index":1292,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["usernamefield",{"_index":678,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users",{"_index":1058,"title":{},"body":{"index.html":{}}}],["uses",{"_index":1122,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":1017,"title":{},"body":{"dependencies.html":{}}}],["uuid()}${extname(file.originalname).tolowercase",{"_index":1400,"title":{},"body":{"miscellaneous/variables.html":{}}}],["v",{"_index":1065,"title":{},"body":{"index.html":{}}}],["v0.0.0",{"_index":1231,"title":{},"body":{"index.html":{}}}],["v0.x.x",{"_index":1216,"title":{},"body":{"index.html":{}}}],["v1.0.0",{"_index":1218,"title":{},"body":{"index.html":{}}}],["validate",{"_index":657,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":675,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":660,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validator",{"_index":601,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/CreateUploadDto.html":{},"classes/LoggedInUserDto.html":{},"classes/LoginDto.html":{},"classes/ProcessedDto.html":{},"classes/ResetPasswordDto.html":{},"dependencies.html":{}}}],["value",{"_index":249,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/UploadsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":944,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1090,"title":{"miscellaneous/variables.html":{}},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["vars",{"_index":1267,"title":{},"body":{"index.html":{}}}],["verify",{"_index":514,"title":{},"body":{"injectables/AuthService.html":{}}}],["verify(token",{"_index":565,"title":{},"body":{"injectables/AuthService.html":{}}}],["version",{"_index":872,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["versioning",{"_index":1207,"title":{},"body":{"index.html":{}}}],["versions",{"_index":1214,"title":{},"body":{"index.html":{}}}],["very",{"_index":1254,"title":{},"body":{"index.html":{}}}],["visual",{"_index":1073,"title":{},"body":{"index.html":{}}}],["void",{"_index":295,"title":{},"body":{"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/UploadCategory.html":{},"injectables/UploadsService.html":{},"miscellaneous/variables.html":{}}}],["vscode",{"_index":1072,"title":{},"body":{"index.html":{}}}],["want",{"_index":1029,"title":{},"body":{"index.html":{}}}],["warn",{"_index":409,"title":{},"body":{"controllers/AuthController.html":{}}}],["warning",{"_index":251,"title":{},"body":{"injectables/AccountsService.html":{}}}],["watch/debug",{"_index":1037,"title":{},"body":{"index.html":{}}}],["way",{"_index":1190,"title":{},"body":{"index.html":{}}}],["web",{"_index":686,"title":{},"body":{"classes/LoggedInUserDto.html":{},"index.html":{}}}],["website",{"_index":1141,"title":{},"body":{"index.html":{}}}],["well",{"_index":1227,"title":{},"body":{"index.html":{}}}],["where('account.id",{"_index":276,"title":{},"body":{"injectables/AccountsService.html":{}}}],["where('lower(account.email",{"_index":282,"title":{},"body":{"injectables/AccountsService.html":{}}}],["width",{"_index":854,"title":{},"body":{"injectables/UploadsService.html":{}}}],["width/height",{"_index":776,"title":{},"body":{"interfaces/UploadCategory.html":{}}}],["withcredentials",{"_index":247,"title":{},"body":{"injectables/AccountsService.html":{}}}],["without",{"_index":1163,"title":{},"body":{"index.html":{}}}],["withoutenlargement",{"_index":858,"title":{},"body":{"injectables/UploadsService.html":{}}}],["work",{"_index":1128,"title":{},"body":{"index.html":{}}}],["works",{"_index":1212,"title":{},"body":{"index.html":{}}}],["yes",{"_index":803,"title":{},"body":{"injectables/UploadsService.html":{}}}],["you're",{"_index":1293,"title":{},"body":{"index.html":{}}}],["yours",{"_index":1277,"title":{},"body":{"index.html":{}}}],["yourself",{"_index":1046,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":218,"title":{},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UploadsModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Account.html":{"url":"classes/Account.html","title":"class - Account","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Account\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/accounts/entities/account.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                avatar\n                            \n                            \n                                createdAt\n                            \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                id\n                            \n                            \n                                isConfirmed\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                            \n                                roles\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                prepareToInsert\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            avatar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Upload\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @JoinColumn()@OneToOne(undefined, {eager: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/accounts/entities/account.entity.ts:87\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn({type: 'timestamptz'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/accounts/entities/account.entity.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiHideProperty()@Column({select: false, unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/accounts/entities/account.entity.ts:40\n                            \n                        \n\n                \n                    \n                        Account email.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/accounts/entities/account.entity.ts:74\n                            \n                        \n\n                \n                    \n                        Account first name.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/accounts/entities/account.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isConfirmed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/accounts/entities/account.entity.ts:55\n                            \n                        \n\n                \n                    \n                        A boolean that is true if Account email is confirmed.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/accounts/entities/account.entity.ts:81\n                            \n                        \n\n                \n                    \n                        Account last name.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiHideProperty()@Column({select: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/accounts/entities/account.entity.ts:48\n                            \n                        \n\n                \n                    \n                        Account password hash.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            roles\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Role[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: Role, array: true, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/accounts/entities/account.entity.ts:67\n                            \n                        \n\n                \n                    \n                        Account roles.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn({type: 'timestamptz'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/accounts/entities/account.entity.ts:32\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            prepareToInsert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    prepareToInsert()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @BeforeInsert()\n                \n            \n\n            \n                \n                    Defined in src/accounts/entities/account.entity.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty } from '@nestjs/swagger';\nimport { hash } from 'argon2';\nimport {\n  BeforeInsert,\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nimport { Upload } from '../../uploads/entities/upload.entity';\n\nexport enum Role {\n  /** Software Editor Administrator, has all rights. */\n  Admin = 'admin',\n  /** Applications end user. */\n  User = 'user',\n}\n\n@Entity()\nexport class Account {\n  @PrimaryGeneratedColumn()\n  id!: number;\n\n  @CreateDateColumn({ type: 'timestamptz' })\n  createdAt!: Date;\n\n  @UpdateDateColumn({ type: 'timestamptz' })\n  updatedAt!: Date;\n\n  /**\n   * Account email.\n   * @example 'johndoe@email.com'\n   */\n  @ApiHideProperty()\n  @Column({ select: false, unique: true })\n  email!: string;\n\n  /**\n   * Account password hash.\n   * @example '$argon2i$v=19$m=16,t=2,p=1$RER6c24zYTFSQVZMZllCTA$Jn1399jd7Z2j/0VLzu07IA'\n   */\n  @ApiHideProperty()\n  @Column({ select: false })\n  password!: string;\n\n  /**\n   * A boolean that is true if Account email is confirmed.\n   * @example false\n   */\n  @Column({ default: false })\n  isConfirmed!: boolean;\n\n  /**\n   * Account roles.\n   * @example ```typescript ['admin']```\n   */\n  @Column({\n    type: 'enum',\n    enum: Role,\n    array: true,\n    default: [Role.User],\n  })\n  roles!: Role[];\n\n  /**\n   * Account first name.\n   * @example 'John'\n   */\n  @Column()\n  firstName!: string;\n\n  /**\n   * Account last name.\n   * @example 'Doe'\n   */\n  @Column()\n  lastName!: string;\n\n  @JoinColumn()\n  @OneToOne(() => Upload, {\n    eager: true,\n  })\n  avatar?: Upload;\n\n  @BeforeInsert()\n  async prepareToInsert(): Promise {\n    this.password = await hash(this.password);\n    this.email = this.email.toLowerCase();\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AccountsController.html":{"url":"controllers/AccountsController.html","title":"controller - AccountsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AccountsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/accounts/accounts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                accounts\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                deleteAvatar\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                            \n                                uploadAvatar\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createAccountDto: CreateAccountDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@Roles(Role.Admin)\n                \n            \n\n            \n                \n                    Defined in src/accounts/accounts.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAccountDto\n                                    \n                                                CreateAccountDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@Roles(Role.Admin)\n                \n            \n\n            \n                \n                    Defined in src/accounts/accounts.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteAvatar\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteAvatar(account: Account, id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id/avatar')@Roles(Role.User)\n                \n            \n\n            \n                \n                    Defined in src/accounts/accounts.controller.ts:90\n                \n            \n\n\n            \n                \n                    Delete an Account avatar, you must be the Account owner \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    account\n                                    \n                                                Account\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Roles(Role.Admin)\n                \n            \n\n            \n                \n                    Defined in src/accounts/accounts.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@Roles(Role.Admin)\n                \n            \n\n            \n                \n                    Defined in src/accounts/accounts.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateAccountDto: UpdateAccountDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@Roles(Role.Admin)\n                \n            \n\n            \n                \n                    Defined in src/accounts/accounts.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateAccountDto\n                                    \n                                                UpdateAccountDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            uploadAvatar\n                        \n                        \n                    \n                \n            \n            \n                \nuploadAvatar(account: Account, id: number, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/avatar')@Roles(Role.User)@ApiFile('file')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/accounts/accounts.controller.ts:74\n                \n            \n\n\n            \n                \n                    Upload an Account avatar, you must be the Account owner \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    account\n                                    \n                                                Account\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  ForbiddenException,\n  Get,\n  Param,\n  Patch,\n  Post,\n  UploadedFile,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { ApiTags } from '@nestjs/swagger';\nimport { DeleteResult } from 'typeorm';\n\nimport { Roles } from '../auth/decorators/roles.decorator';\nimport { User } from '../auth/decorators/user.decorator';\nimport { ProcessedDto } from '../common/dto/processed.dto';\nimport { multerConfig } from '../uploads/configs/multer.config';\nimport { ApiFile } from '../uploads/decorators/api-file.decorator';\nimport { Upload } from '../uploads/entities/upload.entity';\nimport { UploadCategoryName } from '../uploads/models/upload-category.model';\nimport { AccountsService } from './accounts.service';\nimport { CreateAccountDto } from './dto/create-account.dto';\nimport { UpdateAccountDto } from './dto/update-account.dto';\nimport { Account, Role } from './entities/account.entity';\n\n@ApiTags('accounts')\n@Controller('accounts')\nexport class AccountsController {\n  constructor(private readonly accountsService: AccountsService) {}\n\n  @Post()\n  @Roles(Role.Admin)\n  async create(@Body() createAccountDto: CreateAccountDto): Promise {\n    return this.accountsService.create(createAccountDto);\n  }\n\n  @Get()\n  @Roles(Role.Admin)\n  findAll(): Promise {\n    return this.accountsService.findAll();\n  }\n\n  @Get(':id')\n  @Roles(Role.Admin)\n  findOne(@Param('id') id: number): Promise {\n    return this.accountsService.findOneById(id);\n  }\n\n  @Patch(':id')\n  @Roles(Role.Admin)\n  update(\n    @Param('id') id: number,\n    @Body() updateAccountDto: UpdateAccountDto,\n  ): Promise {\n    return this.accountsService.update(id, updateAccountDto);\n  }\n\n  @Delete(':id')\n  @Roles(Role.Admin)\n  delete(@Param('id') id: number): Promise {\n    return this.accountsService.delete(id);\n  }\n\n  /** Upload an Account avatar, you must be the Account owner */\n  @Post(':id/avatar')\n  @Roles(Role.User)\n  @ApiFile('file')\n  @UseInterceptors(\n    FileInterceptor('file', multerConfig(UploadCategoryName.Avatar)),\n  )\n  uploadAvatar(\n    @User() account: Account,\n    @Param('id') id: number,\n    @UploadedFile() file: Express.Multer.File,\n  ): Promise {\n    const isOwner = account.id === id;\n    if (!isOwner) {\n      throw new ForbiddenException('You must be owner');\n    }\n\n    return this.accountsService.updateAvatar(id, file);\n  }\n\n  /** Delete an Account avatar, you must be the Account owner */\n  @Delete(':id/avatar')\n  @Roles(Role.User)\n  deleteAvatar(\n    @User() account: Account,\n    @Param('id') id: number,\n  ): Promise {\n    const isOwner = account.id === +id;\n    if (!isOwner) {\n      throw new ForbiddenException('You must be owner');\n    }\n\n    return this.accountsService.deleteAvatar(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AccountsModule.html":{"url":"modules/AccountsModule.html","title":"module - AccountsModule","body":"\n                   \n\n\n\n\n    Modules\n    AccountsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AccountsModule\n\n\n\ncluster_AccountsModule_providers\n\n\n\n\nAccountsService\n\nAccountsService\n\n\n\nAccountsModule\n\nAccountsModule\n\nAccountsModule -->\n\nAccountsService->AccountsModule\n\n\n\n\n\nUploadsService\n\nUploadsService\n\nAccountsModule -->\n\nUploadsService->AccountsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/accounts/accounts.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccountsService\n                        \n                        \n                            UploadsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AccountsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { Upload } from '../uploads/entities/upload.entity';\nimport { UploadsService } from '../uploads/uploads.service';\nimport { AccountsController } from './accounts.controller';\nimport { AccountsService } from './accounts.service';\nimport { Account } from './entities/account.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Account, Upload])],\n  controllers: [AccountsController],\n  providers: [AccountsService, UploadsService],\n})\nexport class AccountsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccountsService.html":{"url":"injectables/AccountsService.html","title":"injectable - AccountsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AccountsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/accounts/accounts.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                    Async\n                                deleteAvatar\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateAvatar\n                            \n                            \n                                    Async\n                                updatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(accountRepository: Repository, uploadsService: UploadsService)\n                    \n                \n                        \n                            \n                                Defined in src/accounts/accounts.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        accountRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        uploadsService\n                                                  \n                                                        \n                                                                        UploadsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createAccountDto: CreateAccountDto)\n                \n            \n\n\n            \n                \n                    Defined in src/accounts/accounts.service.ts:24\n                \n            \n\n\n            \n                \n                    Create an user Account or an admin Account if admin email is used. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAccountDto\n                                    \n                                                CreateAccountDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/accounts/accounts.service.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteAvatar\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAvatar(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/accounts/accounts.service.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/accounts/accounts.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByEmail(email: string, withCredentials)\n                \n            \n\n\n            \n                \n                    Defined in src/accounts/accounts.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                    \n                                \n                                \n                                    withCredentials\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                    \n                                        WARNING ! Never return password or email. \n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number, withCredentials)\n                \n            \n\n\n            \n                \n                    Defined in src/accounts/accounts.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                    \n                                \n                                \n                                    withCredentials\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                    \n                                        WARNING ! Never return password or email. \n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateAccountDto: UpdateAccountDto)\n                \n            \n\n\n            \n                \n                    Defined in src/accounts/accounts.service.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateAccountDto\n                                    \n                                                UpdateAccountDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateAvatar\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAvatar(id: number, file: Express.Multer.File)\n                \n            \n\n\n            \n                \n                    Defined in src/accounts/accounts.service.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updatePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePassword(id: number, newPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/accounts/accounts.service.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { hash } from 'argon2';\nimport { DeleteResult, Repository } from 'typeorm';\n\nimport { ProcessedDto } from '../common/dto/processed.dto';\nimport { environment } from '../environment';\nimport { Upload } from '../uploads/entities/upload.entity';\nimport { UploadCategoryName } from '../uploads/models/upload-category.model';\nimport { UploadsService } from '../uploads/uploads.service';\nimport { CreateAccountDto } from './dto/create-account.dto';\nimport { UpdateAccountDto } from './dto/update-account.dto';\nimport { Account, Role } from './entities/account.entity';\n\n@Injectable()\nexport class AccountsService {\n  constructor(\n    @InjectRepository(Account)\n    private readonly accountRepository: Repository,\n    private readonly uploadsService: UploadsService,\n  ) {}\n\n  /** Create an user Account or an admin Account if admin email is used. */\n  async create(createAccountDto: CreateAccountDto): Promise {\n    const createdAccount = this.accountRepository.create(createAccountDto);\n    if (createAccountDto.email === environment.apiAdminEmail) {\n      createdAccount.roles = [Role.Admin];\n      createdAccount.isConfirmed = true;\n    }\n    const accountWithCredentials = await this.accountRepository.save(\n      createdAccount,\n    );\n    const { password, email, ...account } = accountWithCredentials;\n\n    return account as Account;\n  }\n\n  /** @param withCredentials WARNING ! Never return password or email. */\n  async findOneById(\n    id: number,\n    withCredentials = false,\n  ): Promise {\n    return this.accountRepository\n      .createQueryBuilder('account')\n      .where('account.id = :id', { id })\n      .addSelect(withCredentials ? 'account.password' : '')\n      .addSelect(withCredentials ? 'account.email' : '')\n      .leftJoinAndSelect('account.avatar', 'avatar')\n      .getOne();\n  }\n\n  /** @param withCredentials WARNING ! Never return password or email. */\n  async findOneByEmail(\n    email: string,\n    withCredentials = false,\n  ): Promise {\n    return this.accountRepository\n      .createQueryBuilder('account')\n      .where('LOWER(account.email) = LOWER(:email)', { email })\n      .addSelect(withCredentials ? 'account.password' : '')\n      .addSelect(withCredentials ? 'account.email' : '')\n      .leftJoinAndSelect('account.avatar', 'avatar')\n      .getOne();\n  }\n\n  findAll(): Promise {\n    return this.accountRepository.find();\n  }\n\n  async update(\n    id: number,\n    updateAccountDto: UpdateAccountDto,\n  ): Promise {\n    const toUpdate = await this.accountRepository.findOneOrFail(id);\n    const updatedAccount = { ...toUpdate, ...updateAccountDto };\n    const accountWithCredentials = await this.accountRepository.save(\n      updatedAccount,\n    );\n    const { password, email, ...account } = accountWithCredentials;\n\n    return account as Account;\n  }\n\n  delete(id: number): Promise {\n    return this.accountRepository.delete({ id });\n  }\n\n  async updatePassword(id: number, newPassword: string): Promise {\n    const toUpdate = await this.accountRepository.findOneOrFail(id);\n    const updatedAccount = {\n      ...toUpdate,\n      isConfirmed: true,\n      password: await hash(newPassword),\n    } as Account;\n    const accountWithCredentials = await this.accountRepository.save(\n      updatedAccount,\n    );\n    const { password, email, ...account } = accountWithCredentials;\n\n    return account as Account;\n  }\n\n  async updateAvatar(id: number, file: Express.Multer.File): Promise {\n    const avatar = await this.uploadsService.create(\n      file,\n      UploadCategoryName.Avatar,\n    );\n    const toUpdate = await this.accountRepository.findOneOrFail(id);\n    const updatedAccount = { ...toUpdate, avatar };\n    const accountWithPassword = await this.accountRepository.save(\n      updatedAccount,\n    );\n    const { password, ...account } = accountWithPassword;\n    const previousAvatar = toUpdate.avatar;\n    if (previousAvatar) {\n      void this.uploadsService.delete(previousAvatar.id);\n    }\n\n    return account.avatar;\n  }\n\n  async deleteAvatar(id: number): Promise {\n    const toUpdate = await this.accountRepository.findOneOrFail(id);\n    const avatar = toUpdate?.avatar;\n    await this.accountRepository.update(id, {\n      avatar: undefined,\n    });\n    if (avatar) {\n      void this.uploadsService.delete(avatar.id);\n    }\n\n    return { isProcessed: true };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AllExceptionFilter.html":{"url":"classes/AllExceptionFilter.html","title":"class - AllExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/all-exception.filter.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: unknown, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/all-exception.filter.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            unknown\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  HttpStatus,\n  Logger,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { TimeoutError } from 'rxjs';\nimport { QueryFailedError } from 'typeorm';\nimport { EntityNotFoundError } from 'typeorm/error/EntityNotFoundError';\n\n@Catch()\nexport class AllExceptionFilter implements ExceptionFilter {\n  catch(exception: unknown, host: ArgumentsHost): void {\n    Logger.debug(exception);\n\n    const context = host.switchToHttp();\n    const response = context.getResponse();\n    const request = context.getRequest();\n\n    let status = HttpStatus.INTERNAL_SERVER_ERROR;\n    let message = 'Server error';\n\n    if (exception instanceof HttpException) {\n      status = exception.getStatus();\n      message = exception.message;\n    } else if (exception instanceof QueryFailedError) {\n      status = HttpStatus.BAD_REQUEST;\n      message = 'Invalid inputs';\n    } else if (exception instanceof TimeoutError) {\n      status = HttpStatus.REQUEST_TIMEOUT;\n      message = 'Request timeout';\n    } else if (\n      exception instanceof Error &&\n      exception.name === ('JsonWebTokenError' || 'TokenExpiredError')\n    ) {\n      status = HttpStatus.UNAUTHORIZED;\n      message = 'Invalid token';\n    } else if (exception instanceof EntityNotFoundError) {\n      status = HttpStatus.NOT_FOUND;\n      message = 'Entity not found';\n    }\n\n    response.status(status).json({\n      status,\n      message,\n      thrownAt: new Date().toISOString(),\n      path: request.url,\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAccountsModule\n\nAccountsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAccountsModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nUploadsModule\n\nUploadsModule\n\nAppModule -->\n\nUploadsModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AccountsModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            UploadsModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MailerModule } from '@nestjs-modules/mailer';\n\nimport { AccountsModule } from './accounts/accounts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { mailerOptions } from './mailerconfig';\nimport * as connectionOptions from './ormconfig';\nimport { UploadsModule } from './uploads/uploads.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot(connectionOptions),\n    MailerModule.forRoot(mailerOptions),\n    AccountsModule,\n    AuthModule,\n    UploadsModule,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                confirmEmail\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                resendConfirmationEmail\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                    Async\n                                sendEmailForgotPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            confirmEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmEmail(token: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('confirm-email/:token')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:61\n                \n            \n\n\n            \n                \n                    Confirm a user with his email token. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(account: Account)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@HttpCode(200)@UseGuards(LocalAuthGuard)@ApiBody({type: LoginDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:32\n                \n            \n\n\n            \n                \n                    Get an Account and a jwt from email/password. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    account\n                                    \n                                                Account\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            register\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    register(createAccountDto: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:40\n                \n            \n\n\n            \n                \n                    Create an Account and send an email containing a token allowing an user to confirm his email. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAccountDto\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            resendConfirmationEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    resendConfirmationEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('resend-confirmation-email/:email')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:51\n                \n            \n\n\n            \n                \n                    Send an email containing a token allowing an user to confirm his email. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            resetPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPassword(id: number, token: string, resetPasswordDto: ResetPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('reset-password/:id/:token')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:78\n                \n            \n\n\n            \n                \n                    Reset an account password and send an email to user to warn that his password has been changed. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resetPasswordDto\n                                    \n                                                ResetPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sendEmailForgotPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendEmailForgotPassword(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('forgot-password/:email')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:70\n                \n            \n\n\n            \n                \n                    Send an email containing a token allowing an user to change his password. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  Param,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBody, ApiTags } from '@nestjs/swagger';\n\nimport { Account } from '../accounts/entities/account.entity';\nimport { ProcessedDto } from '../common/dto/processed.dto';\nimport { AuthService } from './auth.service';\nimport { User } from './decorators/user.decorator';\nimport { LoggedInUserDto } from './dto/logged-in-user.dto';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { ResetPasswordDto } from './dto/reset-password.dto';\nimport { LocalAuthGuard } from './guards/local-auth.guard';\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  /** Get an Account and a jwt from email/password. */\n  @Post('login')\n  @HttpCode(200)\n  @UseGuards(LocalAuthGuard)\n  @ApiBody({ type: LoginDto })\n  async login(@User() account: Account): Promise {\n    const jwt = this.authService.createUserToken(account);\n\n    return { jwt, account };\n  }\n\n  /** Create an Account and send an email containing a token allowing an user to confirm his email. */\n  @Post('register')\n  async register(\n    @Body() createAccountDto: RegisterDto,\n  ): Promise {\n    const account = await this.authService.register(createAccountDto);\n    const jwt = this.authService.createUserToken(account);\n\n    return { jwt, account };\n  }\n\n  /** Send an email containing a token allowing an user to confirm his email. */\n  @Get('resend-confirmation-email/:email')\n  async resendConfirmationEmail(\n    @Param('email') email: string,\n  ): Promise {\n    void this.authService.resendConfirmationEmail(email);\n\n    return { isProcessed: true };\n  }\n\n  /** Confirm a user with his email token. */\n  @Get('confirm-email/:token')\n  async confirmEmail(@Param('token') token: string): Promise {\n    const account = await this.authService.confirmEmail(token);\n    const jwt = this.authService.createUserToken(account);\n\n    return { jwt, account };\n  }\n\n  /** Send an email containing a token allowing an user to change his password. */\n  @Get('forgot-password/:email')\n  async sendEmailForgotPassword(\n    @Param('email') email: string,\n  ): Promise {\n    return this.authService.forgotPassword(email);\n  }\n\n  /** Reset an account password and send an email to user to warn that his password has been changed. */\n  @Post('reset-password/:id/:token')\n  async resetPassword(\n    @Param('id') id: number,\n    @Param('token') token: string,\n    @Body() resetPasswordDto: ResetPasswordDto,\n  ): Promise {\n    return this.authService.resetPassword(id, token, resetPasswordDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAccountsService\n\nAccountsService\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAccountsService->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nUploadsService\n\nUploadsService\n\nAuthModule -->\n\nUploadsService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccountsService\n                        \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            UploadsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { AccountsService } from '../accounts/accounts.service';\nimport { Account } from '../accounts/entities/account.entity';\nimport { environment } from '../environment';\nimport { Upload } from '../uploads/entities/upload.entity';\nimport { UploadsService } from '../uploads/uploads.service';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { LocalStrategy } from './strategies/local.strategy';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Account, Upload]),\n    JwtModule.register({\n      secret: environment.apiUserJwtSecret,\n      signOptions: {\n        expiresIn: environment.apiUserJwtExpirationTime,\n      },\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    AccountsService,\n    UploadsService,\n    LocalStrategy,\n    JwtStrategy,\n  ],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                confirmEmail\n                            \n                            \n                                    Private\n                                createConfirmEmailToken\n                            \n                            \n                                    Private\n                                createResetPasswordToken\n                            \n                            \n                                createUserToken\n                            \n                            \n                                    Async\n                                forgotPassword\n                            \n                            \n                                    Private\n                                getPayloadFromEmailToken\n                            \n                            \n                                    Private\n                                getPayloadFromForgotPasswordToken\n                            \n                            \n                                    Private\n                                isPasswordCorrect\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                resendConfirmationEmail\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                    Private\n                                    Async\n                                sendConfirmationEmail\n                            \n                            \n                                    Private\n                                    Async\n                                sendPasswordChangedEmail\n                            \n                            \n                                    Private\n                                    Async\n                                sendResetPasswordEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailerService: MailerService, accountsService: AccountsService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accountsService\n                                                  \n                                                        \n                                                                        AccountsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            confirmEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmEmail(emailToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    emailToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            createConfirmEmailToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createConfirmEmailToken(account: Account)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    account\n                                    \n                                                Account\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            createResetPasswordToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createResetPasswordToken(accountWithCredentials: Account)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:181\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountWithCredentials\n                                    \n                                                Account\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createUserToken\n                        \n                        \n                    \n                \n            \n            \n                \ncreateUserToken(account: Account)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    account\n                                    \n                                                Account\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            forgotPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forgotPassword(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getPayloadFromEmailToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPayloadFromEmailToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:158\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         EmailJwtPayload\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getPayloadFromForgotPasswordToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPayloadFromForgotPasswordToken(accountWithCredentials: Account, token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:148\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountWithCredentials\n                                    \n                                                Account\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ForgotPasswordJwtPayload\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            isPasswordCorrect\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isPasswordCorrect(hashedPassword: string, plainTextPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:164\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    hashedPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(loginDto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            register\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    register(createAccountDto: CreateAccountDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAccountDto\n                                    \n                                                CreateAccountDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            resendConfirmationEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    resendConfirmationEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            resetPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPassword(id: number, token: string, resetPasswordDto: ResetPasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resetPasswordDto\n                                    \n                                                ResetPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            sendConfirmationEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendConfirmationEmail(email: string, account: Account)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:194\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    account\n                                    \n                                                Account\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            sendPasswordChangedEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendPasswordChangedEmail(email: string, account: Account)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:235\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    account\n                                    \n                                                Account\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            sendResetPasswordEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendResetPasswordEmail(accountWithCredentials: Account)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:215\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountWithCredentials\n                                    \n                                                Account\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { MailerService } from '@nestjs-modules/mailer';\nimport { verify as compare } from 'argon2';\nimport { sign, verify } from 'jsonwebtoken';\n\nimport { AccountsService } from '../accounts/accounts.service';\nimport { CreateAccountDto } from '../accounts/dto/create-account.dto';\nimport { Account } from '../accounts/entities/account.entity';\nimport { ProcessedDto } from '../common/dto/processed.dto';\nimport { environment } from '../environment';\nimport { LoginDto } from './dto/login.dto';\nimport { ResetPasswordDto } from './dto/reset-password.dto';\nimport {\n  EmailJwtPayload,\n  ForgotPasswordJwtPayload,\n  UserJwtPayload,\n} from './models/jwt-payload.model';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly mailerService: MailerService,\n    private readonly accountsService: AccountsService,\n  ) {}\n\n  async login(loginDto: LoginDto): Promise {\n    const accountWithCredentials = await this.accountsService.findOneByEmail(\n      loginDto.email,\n      true,\n    );\n    if (!accountWithCredentials) {\n      throw new UnauthorizedException('Invalid email');\n    }\n    const isPasswordCorrect = await this.isPasswordCorrect(\n      accountWithCredentials.password,\n      loginDto.password,\n    );\n    if (!isPasswordCorrect) {\n      throw new UnauthorizedException('Invalid password');\n    }\n    const { password, email, ...account } = accountWithCredentials;\n\n    return account as Account;\n  }\n\n  async register(createAccountDto: CreateAccountDto): Promise {\n    // TODO: Prevent an attacker from listing existing e-mail addresses\n    const foundAccount = await this.accountsService.findOneByEmail(\n      createAccountDto.email,\n    );\n    if (foundAccount) {\n      throw new BadRequestException('Email already exists');\n    }\n    const account = await this.accountsService.create(createAccountDto);\n    void this.sendConfirmationEmail(createAccountDto.email, account);\n\n    return account;\n  }\n\n  async resendConfirmationEmail(email: string): Promise {\n    const account = await this.accountsService.findOneByEmail(email);\n    if (account) {\n      void this.sendConfirmationEmail(email, account);\n    }\n\n    return { isProcessed: true };\n  }\n\n  async confirmEmail(emailToken: string): Promise {\n    const payload = this.getPayloadFromEmailToken(emailToken);\n    const account = await this.accountsService.findOneById(payload.id);\n    if (!account) {\n      throw new UnauthorizedException('Invalid email');\n    }\n    if (account.isConfirmed) {\n      throw new BadRequestException('Email already confirmed');\n    }\n    const confirmedAccount = await this.accountsService.update(account.id, {\n      ...account,\n      isConfirmed: true,\n    } as Account);\n\n    return confirmedAccount;\n  }\n\n  async forgotPassword(email: string): Promise {\n    const accountWithCredentials = await this.accountsService.findOneByEmail(\n      email,\n      true,\n    );\n    if (!accountWithCredentials) {\n      throw new UnauthorizedException('Invalid email');\n    }\n    void this.sendResetPasswordEmail(accountWithCredentials);\n\n    return { isProcessed: true };\n  }\n\n  async resetPassword(\n    id: number,\n    token: string,\n    resetPasswordDto: ResetPasswordDto,\n  ): Promise {\n    const accountWithCredentials = await this.accountsService.findOneById(\n      id,\n      true,\n    );\n    if (!accountWithCredentials) {\n      throw new NotFoundException('Account not found');\n    }\n    this.getPayloadFromForgotPasswordToken(accountWithCredentials, token);\n    const isSamePassword = await this.isPasswordCorrect(\n      accountWithCredentials.password,\n      resetPasswordDto.newPassword,\n    );\n    if (isSamePassword) {\n      throw new BadRequestException(\n        'New password must be different from current',\n      );\n    }\n    const { email } = accountWithCredentials;\n    const account = await this.accountsService.updatePassword(\n      accountWithCredentials.id,\n      resetPasswordDto.newPassword,\n    );\n    void this.sendPasswordChangedEmail(email, account);\n\n    return account;\n  }\n\n  createUserToken(account: Account): string {\n    const payload: UserJwtPayload = {\n      id: account.id,\n      createdAt: account.createdAt,\n      roles: account.roles,\n      isConfirmed: account.isConfirmed,\n    };\n    return sign(payload, environment.apiUserJwtSecret, {\n      expiresIn: environment.apiUserJwtExpirationTime,\n    });\n  }\n\n  private getPayloadFromForgotPasswordToken(\n    accountWithCredentials: Account,\n    token: string,\n  ): ForgotPasswordJwtPayload {\n    const createdAtString = accountWithCredentials.createdAt.toISOString();\n    const secret = `${accountWithCredentials.password}-${createdAtString}`;\n\n    return verify(token, secret) as ForgotPasswordJwtPayload;\n  }\n\n  private getPayloadFromEmailToken(token: string): EmailJwtPayload {\n    const secret = environment.apiEmailJwtSecret;\n\n    return verify(token, secret) as EmailJwtPayload;\n  }\n\n  private isPasswordCorrect(\n    hashedPassword: string,\n    plainTextPassword: string,\n  ): Promise {\n    return compare(hashedPassword, plainTextPassword);\n  }\n\n  private createConfirmEmailToken(account: Account): string {\n    const payload: EmailJwtPayload = {\n      id: account.id,\n      createdAt: account.createdAt,\n    };\n    return sign(payload, environment.apiEmailJwtSecret, {\n      expiresIn: environment.apiEmailJwtExpirationTime,\n    });\n  }\n\n  private createResetPasswordToken(accountWithCredentials: Account): string {\n    const payload: ForgotPasswordJwtPayload = {\n      id: accountWithCredentials.id,\n      createdAt: accountWithCredentials.createdAt,\n    };\n    const createdAtString = accountWithCredentials.createdAt.toISOString();\n    const secret = `${accountWithCredentials.password}-${createdAtString}`;\n\n    return sign(payload, secret, {\n      expiresIn: environment.apiEmailJwtExpirationTime,\n    });\n  }\n\n  private async sendConfirmationEmail(\n    email: string,\n    account: Account,\n  ): Promise {\n    const emailToken = this.createConfirmEmailToken(account);\n    const confirmEmailUrl = `${environment.pwaConfirmEmailUrl}/${emailToken}`;\n    const { accepted } = (await this.mailerService.sendMail({\n      to: email,\n      subject: `${environment.projectName} - Confirm your email`,\n      template: 'confirm-email',\n      context: {\n        firstName: account.firstName,\n        lastName: account.lastName,\n        projectName: environment.projectName,\n        confirmEmailUrl,\n      },\n    })) as { accepted: string[] };\n\n    return { isProcessed: !!accepted };\n  }\n\n  private async sendResetPasswordEmail(\n    accountWithCredentials: Account,\n  ): Promise {\n    const emailToken = this.createResetPasswordToken(accountWithCredentials);\n    const resetPasswordUrl = `${environment.pwaResetPasswordUrl}/${accountWithCredentials.id}/${emailToken}`;\n    const { accepted } = (await this.mailerService.sendMail({\n      to: accountWithCredentials.email,\n      subject: `${environment.projectName} - Reset your password`,\n      template: 'reset-password',\n      context: {\n        firstName: accountWithCredentials.firstName,\n        lastName: accountWithCredentials.lastName,\n        projectName: environment.projectName,\n        resetPasswordUrl,\n      },\n    })) as { accepted: string[] };\n\n    return { isProcessed: !!accepted };\n  }\n\n  private async sendPasswordChangedEmail(\n    email: string,\n    account: Account,\n  ): Promise {\n    const { accepted } = (await this.mailerService.sendMail({\n      to: email,\n      subject: `${environment.projectName} - Password changed`,\n      template: 'password-changed',\n      context: {\n        firstName: account.firstName,\n        lastName: account.lastName,\n        projectName: environment.projectName,\n      },\n    })) as { accepted: string[] };\n\n    return { isProcessed: !!accepted };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAccountDto.html":{"url":"classes/CreateAccountDto.html","title":"class - CreateAccountDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAccountDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/accounts/dto/create-account.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmail()@Length(5, 255)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/accounts/dto/create-account.dto.ts:10\n                            \n                        \n\n                \n                    \n                        Login email.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@Length(2, 50)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/accounts/dto/create-account.dto.ts:18\n                            \n                        \n\n                \n                    \n                        User first name.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@Length(2, 50)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/accounts/dto/create-account.dto.ts:26\n                            \n                        \n\n                \n                    \n                        User last name.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@Length(8, 255)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/accounts/dto/create-account.dto.ts:34\n                            \n                        \n\n                \n                    \n                        Login password.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, Length } from 'class-validator';\n\nexport class CreateAccountDto {\n  /**\n   * Login email.\n   * @example 'johndoe@email.com'\n   */\n  @IsEmail()\n  @Length(5, 255)\n  email!: string;\n\n  /**\n   * User first name.\n   * @example 'John'\n   */\n  @IsString()\n  @Length(2, 50)\n  firstName!: string;\n\n  /**\n   * User last name.\n   * @example 'Doe'\n   */\n  @IsString()\n  @Length(2, 50)\n  lastName!: string;\n\n  /**\n   * Login password.\n   * @example 'JohnDoePass123'\n   */\n  @IsString()\n  @Length(8, 255)\n  password!: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUploadDto.html":{"url":"classes/CreateUploadDto.html","title":"class - CreateUploadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUploadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/dto/create-upload.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                filename\n                            \n                            \n                                mimeType\n                            \n                            \n                                path\n                            \n                            \n                                size\n                            \n                            \n                                    Optional\n                                thumbMimeType\n                            \n                            \n                                    Optional\n                                thumbPath\n                            \n                            \n                                    Optional\n                                thumbSize\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            filename\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/uploads/dto/create-upload.dto.ts:9\n                            \n                        \n\n                \n                    \n                        Filename at the moment it has been uploaded\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mimeType\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/uploads/dto/create-upload.dto.ts:30\n                            \n                        \n\n                \n                    \n                        File mime type\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            path\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/uploads/dto/create-upload.dto.ts:16\n                            \n                        \n\n                \n                    \n                        File path, must be prefixed by server host\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            size\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNumber()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/uploads/dto/create-upload.dto.ts:23\n                            \n                        \n\n                \n                    \n                        File size in bytes\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            thumbMimeType\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/uploads/dto/create-upload.dto.ts:51\n                            \n                        \n\n                \n                    \n                        Resized file mime type\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            thumbPath\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/uploads/dto/create-upload.dto.ts:37\n                            \n                        \n\n                \n                    \n                        Resized file path, must be prefixed by server host\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            thumbSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNumber()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/uploads/dto/create-upload.dto.ts:44\n                            \n                        \n\n                \n                    \n                        Resized file size in bytes\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber, IsString } from 'class-validator';\n\nexport class CreateUploadDto {\n  /**\n   * Filename at the moment it has been uploaded\n   * @example 'avatar.jpg'\n   */\n  @IsString()\n  filename!: string;\n\n  /**\n   * File path, must be prefixed by server host\n   * @example 'uploads/public/uuid.jpg'\n   */\n  @IsString()\n  path!: string;\n\n  /**\n   * File size in bytes\n   * @example 2000000\n   */\n  @IsNumber()\n  size!: number;\n\n  /**\n   * File mime type\n   * @example 'image/jpeg'\n   */\n  @IsString()\n  mimeType!: string;\n\n  /**\n   * Resized file path, must be prefixed by server host\n   * @example 'uploads/public/uuid-thumb.jpg'\n   */\n  @IsString()\n  thumbPath?: string;\n\n  /**\n   * Resized file size in bytes\n   * @example 2000000\n   */\n  @IsNumber()\n  thumbSize?: number;\n\n  /**\n   * Resized file mime type\n   * @example 'image/jpeg'\n   */\n  @IsString()\n  thumbMimeType?: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EmailJwtPayload.html":{"url":"interfaces/EmailJwtPayload.html","title":"interface - EmailJwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  EmailJwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/models/jwt-payload.model.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        createdAt\n                                \n                                \n                                        id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                    \n                                \n                                \n                                    \n                                        createdAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Role } from '../../accounts/entities/account.entity';\n\nexport interface UserJwtPayload {\n  id: number;\n  createdAt: Date;\n  roles: Role[];\n  isConfirmed: boolean;\n}\n\nexport interface EmailJwtPayload {\n  id: number;\n  createdAt: Date;\n}\n\nexport interface ForgotPasswordJwtPayload {\n  id: number;\n  createdAt: Date;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ForgotPasswordJwtPayload.html":{"url":"interfaces/ForgotPasswordJwtPayload.html","title":"interface - ForgotPasswordJwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ForgotPasswordJwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/models/jwt-payload.model.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        createdAt\n                                \n                                \n                                        id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                    \n                                \n                                \n                                    \n                                        createdAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Role } from '../../accounts/entities/account.entity';\n\nexport interface UserJwtPayload {\n  id: number;\n  createdAt: Date;\n  roles: Role[];\n  isConfirmed: boolean;\n}\n\nexport interface EmailJwtPayload {\n  id: number;\n  createdAt: Date;\n}\n\nexport interface ForgotPasswordJwtPayload {\n  id: number;\n  createdAt: Date;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/JwtAuthGuard.html":{"url":"guards/JwtAuthGuard.html","title":"guard - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/jwt-auth.guard.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/jwt-auth.guard.ts:6\n                            \n                        \n\n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/jwt-auth.guard.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') implements CanActivate {\n  constructor() {\n    super();\n  }\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    return super.canActivate(context);\n  }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(accountsService: AccountsService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        accountsService\n                                                  \n                                                        \n                                                                        AccountsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: UserJwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt.strategy.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                UserJwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\nimport { AccountsService } from '../../accounts/accounts.service';\nimport { Account } from '../../accounts/entities/account.entity';\nimport { environment } from '../../environment';\nimport { UserJwtPayload } from '../models/jwt-payload.model';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly accountsService: AccountsService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: environment.apiUserJwtSecret,\n    });\n  }\n\n  async validate(payload: UserJwtPayload): Promise {\n    return this.accountsService.findOneById(payload.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/local.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/local.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/local.strategy.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\n\nimport { Account } from '../../accounts/entities/account.entity';\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly authService: AuthService) {\n    super({\n      usernameField: 'email',\n    });\n  }\n  async validate(email: string, password: string): Promise {\n    const account = await this.authService.login({\n      email,\n      password,\n    });\n\n    return account;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoggedInUserDto.html":{"url":"classes/LoggedInUserDto.html","title":"class - LoggedInUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoggedInUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/logged-in-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                account\n                            \n                            \n                                jwt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            account\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Account\n\n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/logged-in-user.dto.ts:16\n                            \n                        \n\n                \n                    \n                        User account.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            jwt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/logged-in-user.dto.ts:11\n                            \n                        \n\n                \n                    \n                        Logged in user json web token.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\nimport { Account } from '../../accounts/entities/account.entity';\n\nexport class LoggedInUserDto {\n  /**\n   * Logged in user json web token.\n   * @example 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImpvaG5kb2VAbWEuY29tIiwiaWF0IjoxNjE2MjUzMzMzLCJleHAiOjE2MTYyNTQyMzN9.45VSQ8wkaNVdGbBZgC3EY6nHlWhHhdcV2I910a8-'\n   */\n  @IsString()\n  jwt!: string;\n\n  /**\n   * User account.\n   */\n  account!: Account;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingInterceptor.html":{"url":"injectables/LoggingInterceptor.html","title":"injectable - LoggingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LoggingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/logging.interceptor.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/logging.interceptor.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  Logger,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const request = context\n      .switchToHttp()\n      .getRequest();\n    const { method, url } = request;\n    const now = Date.now();\n\n    return next\n      .handle()\n      .pipe(\n        tap(() =>\n          Logger.log(\n            `${method} ${url} ${Date.now() - now}ms`,\n            `${context.getClass().name}.${context.getHandler().name}`,\n          ),\n        ),\n      );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmail()@MaxLength(255)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/login.dto.ts:10\n                            \n                        \n\n                \n                    \n                        Login email.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@MaxLength(255)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/login.dto.ts:18\n                            \n                        \n\n                \n                    \n                        Login password.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, MaxLength } from 'class-validator';\n\nexport class LoginDto {\n  /**\n   * Login email.\n   * @example 'johndoe@email.com'\n   */\n  @IsEmail()\n  @MaxLength(255)\n  email!: string;\n\n  /**\n   * Login password.\n   * @example 'JohnDoePass123'\n   */\n  @IsString()\n  @MaxLength(255)\n  password!: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProcessedDto.html":{"url":"classes/ProcessedDto.html","title":"class - ProcessedDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProcessedDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/processed.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isProcessed\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isProcessed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsBoolean()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/processed.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean } from 'class-validator';\n\nexport class ProcessedDto {\n  @IsBoolean()\n  isProcessed!: boolean;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register.dto.ts\n        \n\n\n            \n                Extends\n            \n            \n                        CreateAccountDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmail()@Length(5, 255)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         CreateAccountDto\n\n                                \n                            \n                        \n                            \n                                    Defined in         CreateAccountDto:10\n\n                            \n                        \n\n                \n                    \n                        Login email.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@Length(2, 50)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         CreateAccountDto\n\n                                \n                            \n                        \n                            \n                                    Defined in         CreateAccountDto:18\n\n                            \n                        \n\n                \n                    \n                        User first name.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@Length(2, 50)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         CreateAccountDto\n\n                                \n                            \n                        \n                            \n                                    Defined in         CreateAccountDto:26\n\n                            \n                        \n\n                \n                    \n                        User last name.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@Length(8, 255)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         CreateAccountDto\n\n                                \n                            \n                        \n                            \n                                    Defined in         CreateAccountDto:34\n\n                            \n                        \n\n                \n                    \n                        Login password.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateAccountDto } from '../../accounts/dto/create-account.dto';\n\nexport class RegisterDto extends CreateAccountDto {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResetPasswordDto.html":{"url":"classes/ResetPasswordDto.html","title":"class - ResetPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResetPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/reset-password.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                newPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            newPassword\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@Length(8, 255)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/reset-password.dto.ts:10\n                            \n                        \n\n                \n                    \n                        New login password.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, Length } from 'class-validator';\n\nexport class ResetPasswordDto {\n  /**\n   * New login password.\n   * @example 'JohnDoeNewPass1234'\n   */\n  @IsString()\n  @Length(8, 255)\n  newPassword!: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/roles.guard.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/roles.guard.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/roles.guard.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  ForbiddenException,\n  Injectable,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\nimport { Account, Role } from '../../accounts/entities/account.entity';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private readonly reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride('roles', [\n      context.getHandler(),\n    ]);\n    if (!requiredRoles) {\n      return true;\n    }\n    const request = context.switchToHttp().getRequest();\n    const account = request.user;\n    if (!account?.isConfirmed) {\n      throw new ForbiddenException('Not a confirmed account');\n    }\n    if (!account?.roles) {\n      return false;\n    }\n    const isAdmin = !!account.roles.find((role) => role === 'admin');\n    if (isAdmin) {\n      return true;\n    }\n    const hasSomeRequiredRole = account.roles.some((role) =>\n      requiredRoles?.includes(role),\n    );\n\n    return hasSomeRequiredRole;\n  }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAccountDto.html":{"url":"classes/UpdateAccountDto.html","title":"class - UpdateAccountDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAccountDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/accounts/dto/update-account.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\n\nimport { CreateAccountDto } from './create-account.dto';\n\nexport class UpdateAccountDto extends OmitType(CreateAccountDto, [\n  'password',\n  'email',\n]) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Upload.html":{"url":"classes/Upload.html","title":"class - Upload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Upload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/entities/upload.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                filename\n                            \n                            \n                                id\n                            \n                            \n                                mimeType\n                            \n                            \n                                path\n                            \n                            \n                                size\n                            \n                            \n                                    Optional\n                                thumbMimeType\n                            \n                            \n                                    Optional\n                                thumbPath\n                            \n                            \n                                    Optional\n                                thumbSize\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn({type: 'timestamptz'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/uploads/entities/upload.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            filename\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/uploads/entities/upload.entity.ts:25\n                            \n                        \n\n                \n                    \n                        Filename at the moment it has been uploaded\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/uploads/entities/upload.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mimeType\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/uploads/entities/upload.entity.ts:46\n                            \n                        \n\n                \n                    \n                        File mime type\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            path\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/uploads/entities/upload.entity.ts:32\n                            \n                        \n\n                \n                    \n                        File path, must be prefixed by server host\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            size\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/uploads/entities/upload.entity.ts:39\n                            \n                        \n\n                \n                    \n                        File size in bytes\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            thumbMimeType\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/uploads/entities/upload.entity.ts:67\n                            \n                        \n\n                \n                    \n                        Resized file mime type\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            thumbPath\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/uploads/entities/upload.entity.ts:53\n                            \n                        \n\n                \n                    \n                        Resized file path, must be prefixed by server host\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            thumbSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/uploads/entities/upload.entity.ts:60\n                            \n                        \n\n                \n                    \n                        Resized file size in bytes\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn({type: 'timestamptz'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/uploads/entities/upload.entity.ts:18\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Upload {\n  @PrimaryGeneratedColumn()\n  id!: number;\n\n  @CreateDateColumn({ type: 'timestamptz' })\n  createdAt!: Date;\n\n  @UpdateDateColumn({ type: 'timestamptz' })\n  updatedAt!: Date;\n\n  /**\n   * Filename at the moment it has been uploaded\n   * @example 'avatar.jpg'\n   */\n  @Column()\n  filename!: string;\n\n  /**\n   * File path, must be prefixed by server host\n   * @example 'uploads/public/uuid.jpg'\n   */\n  @Column()\n  path!: string;\n\n  /**\n   * File size in bytes\n   * @example 2000000\n   */\n  @Column()\n  size!: number;\n\n  /**\n   * File mime type\n   * @example 'image/jpeg'\n   */\n  @Column()\n  mimeType!: string;\n\n  /**\n   * Resized file path, must be prefixed by server host\n   * @example 'uploads/public/uuid-thumb.jpg'\n   */\n  @Column()\n  thumbPath?: string;\n\n  /**\n   * Resized file size in bytes\n   * @example 2000000\n   */\n  @Column()\n  thumbSize?: number;\n\n  /**\n   * Resized file mime type\n   * @example 'image/jpeg'\n   */\n  @Column()\n  thumbMimeType?: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadCategory.html":{"url":"interfaces/UploadCategory.html","title":"interface - UploadCategory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UploadCategory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/models/upload-category.model.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        destination\n                                \n                                \n                                        fieldName\n                                \n                                \n                                        fileFilter\n                                \n                                \n                                        fileSizeLimit\n                                \n                                \n                                            Optional\n                                        maxWidthHeight\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        destination\n                                    \n                                \n                                \n                                    \n                                        destination:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Destination path for uploaded files. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldName\n                                    \n                                \n                                \n                                    \n                                        fieldName:         UploadCategoryName\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadCategoryName\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fileFilter\n                                    \n                                \n                                \n                                    \n                                        fileFilter:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    File filter function \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fileSizeLimit\n                                    \n                                \n                                \n                                    \n                                        fileSizeLimit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    File size limit in bytes \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxWidthHeight\n                                    \n                                \n                                \n                                    \n                                        maxWidthHeight:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Max width/height for image file, in pixels \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\n\nexport enum UploadCategoryName {\n  Avatar = 'avatar',\n}\n\nexport interface UploadCategory {\n  fieldName: UploadCategoryName;\n  /** Destination path for uploaded files. */\n  destination: string;\n  /** File size limit in bytes */\n  fileSizeLimit: number;\n  /** Max width/height for image file, in pixels */\n  maxWidthHeight?: number;\n  /** File filter function */\n  fileFilter: (\n    req: Request,\n    file: Express.Multer.File,\n    callback: (error: Error | null, isAllowed: boolean) => void,\n  ) => void;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UploadsController.html":{"url":"controllers/UploadsController.html","title":"controller - UploadsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UploadsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/uploads.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                uploads\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('uploads')\n@Controller('uploads')\nexport class UploadsController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UploadsModule.html":{"url":"modules/UploadsModule.html","title":"module - UploadsModule","body":"\n                   \n\n\n\n\n    Modules\n    UploadsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UploadsModule\n\n\n\ncluster_UploadsModule_providers\n\n\n\n\nUploadsService\n\nUploadsService\n\n\n\nUploadsModule\n\nUploadsModule\n\nUploadsModule -->\n\nUploadsService->UploadsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/uploads/uploads.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UploadsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UploadsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { Upload } from './entities/upload.entity';\nimport { UploadsController } from './uploads.controller';\nimport { UploadsService } from './uploads.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Upload])],\n  controllers: [UploadsController],\n  providers: [UploadsService],\n})\nexport class UploadsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UploadsService.html":{"url":"injectables/UploadsService.html","title":"injectable - UploadsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UploadsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/uploads.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                createMany\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Private\n                                    Async\n                                resizeImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(uploadRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/uploads/uploads.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        uploadRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(file: Express.Multer.File, uploadCategoryName?: UploadCategoryName)\n                \n            \n\n\n            \n                \n                    Defined in src/uploads/uploads.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    uploadCategoryName\n                                    \n                                                UploadCategoryName\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createMany\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createMany(files: Express.Multer.File[], uploadCategoryName?: UploadCategoryName)\n                \n            \n\n\n            \n                \n                    Defined in src/uploads/uploads.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Express.Multer.File[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    uploadCategoryName\n                                    \n                                                UploadCategoryName\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/uploads/uploads.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            resizeImage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    resizeImage(file: Express.Multer.File, maxWidthHeight: number, filenameSuffix: string)\n                \n            \n\n\n            \n                \n                    Defined in src/uploads/uploads.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    maxWidthHeight\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        500\n                                    \n\n                                \n                                \n                                    filenameSuffix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport * as fs from 'fs';\nimport * as sharp from 'sharp';\nimport { Repository } from 'typeorm';\n\nimport { ProcessedDto } from '../common/dto/processed.dto';\nimport { filenameWithSuffixGenerator } from './configs/filename-generators.config';\nimport { uploadCategories } from './configs/multer.config';\nimport { CreateUploadDto } from './dto/create-upload.dto';\nimport { Upload } from './entities/upload.entity';\nimport { UploadCategoryName } from './models/upload-category.model';\n\n@Injectable()\nexport class UploadsService {\n  constructor(\n    @InjectRepository(Upload)\n    private readonly uploadRepository: Repository,\n  ) {}\n\n  async createMany(\n    files: Express.Multer.File[],\n    uploadCategoryName?: UploadCategoryName,\n  ): Promise {\n    if (!files?.length) {\n      throw new BadRequestException('Invalid file(s)');\n    }\n    const uploadedFilePromises = files.map((file) =>\n      this.create(file, uploadCategoryName),\n    );\n\n    return Promise.all(uploadedFilePromises);\n  }\n\n  async create(\n    file: Express.Multer.File,\n    uploadCategoryName?: UploadCategoryName,\n  ): Promise {\n    const uploadCategory = uploadCategories.find(\n      (category) => category.fieldName === uploadCategoryName,\n    );\n    let resizeInfo: (sharp.OutputInfo & { path: string }) | undefined;\n    if (uploadCategoryName) {\n      if (uploadCategory?.maxWidthHeight) {\n        resizeInfo = await this.resizeImage(\n          file,\n          uploadCategory.maxWidthHeight,\n          '-thumb',\n        );\n      }\n    }\n    const createUploadDto: CreateUploadDto = {\n      path: file.path,\n      filename: file.originalname,\n      size: file.size,\n      mimeType: file.mimetype,\n      thumbSize: resizeInfo ? resizeInfo.size : undefined,\n      thumbPath: resizeInfo ? resizeInfo.path : undefined,\n      thumbMimeType: resizeInfo ? `image/${resizeInfo.format}` : undefined,\n    };\n    const createdUpload = this.uploadRepository.create(createUploadDto);\n\n    return this.uploadRepository.save(createdUpload);\n  }\n\n  async delete(id: number): Promise {\n    const upload = await this.uploadRepository.findOneOrFail(id);\n    void this.uploadRepository.delete(id);\n    fs.unlink(upload?.path ?? '', () => {});\n    fs.unlink(upload?.thumbPath ?? '', () => {});\n\n    return { isProcessed: true };\n  }\n\n  private async resizeImage(\n    file: Express.Multer.File,\n    maxWidthHeight = 500,\n    filenameSuffix: string,\n  ): Promise {\n    const path = filenameWithSuffixGenerator(file.path, filenameSuffix);\n    const resizeInfo = await sharp(file.path)\n      .resize({\n        width: maxWidthHeight,\n        height: maxWidthHeight,\n        fit: 'inside',\n        withoutEnlargement: true,\n      })\n      .jpeg({ mozjpeg: true, progressive: true })\n      .toFile(path);\n\n    return { ...resizeInfo, path };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserJwtPayload.html":{"url":"interfaces/UserJwtPayload.html","title":"interface - UserJwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UserJwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/models/jwt-payload.model.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        createdAt\n                                \n                                \n                                        id\n                                \n                                \n                                        isConfirmed\n                                \n                                \n                                        roles\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                    \n                                \n                                \n                                    \n                                        createdAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isConfirmed\n                                    \n                                \n                                \n                                    \n                                        isConfirmed:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                    \n                                \n                                \n                                    \n                                        roles:         Role[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Role[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Role } from '../../accounts/entities/account.entity';\n\nexport interface UserJwtPayload {\n  id: number;\n  createdAt: Date;\n  roles: Role[];\n  isConfirmed: boolean;\n}\n\nexport interface EmailJwtPayload {\n  id: number;\n  createdAt: Date;\n}\n\nexport interface ForgotPasswordJwtPayload {\n  id: number;\n  createdAt: Date;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n0.0.0 (2021-08-21)\nFeatures\n\nbetter role based authorization (3ef1389)\ncomplete contenairized production environment, improved dockerfile (e189116)\nhelmet protection, better openapi definition (7090e84)\ninitial commit (25fd100)\npassport.js jwt authentication, basic role based authorization (5a3819a)\nuser can upload avatar (8295536)\n\nBug Fixes\n\neslint & node debugger (5da3da2)\nnon root nodejs container in prod/dev, SELinux compatibility, orm db sync turned on by default (c9cc19e)\npassword removed from outputs, better error handling, protected routes require confirmed status (12c9344)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/accounts/accounts.controller.ts\n            \n            controller\n            AccountsController\n            \n                25 %\n                (2/8)\n            \n        \n        \n            \n                \n                src/accounts/accounts.service.ts\n            \n            injectable\n            AccountsService\n            \n                9 %\n                (1/11)\n            \n        \n        \n            \n                \n                src/accounts/dto/create-account.dto.ts\n            \n            class\n            CreateAccountDto\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/accounts/dto/update-account.dto.ts\n            \n            class\n            UpdateAccountDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/accounts/entities/account.entity.ts\n            \n            class\n            Account\n            \n                50 %\n                (6/12)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/auth/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/logged-in-user.dto.ts\n            \n            class\n            LoggedInUserDto\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/auth/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/auth/dto/reset-password.dto.ts\n            \n            class\n            ResetPasswordDto\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            guard\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/models/jwt-payload.model.ts\n            \n            interface\n            EmailJwtPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/models/jwt-payload.model.ts\n            \n            interface\n            ForgotPasswordJwtPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/models/jwt-payload.model.ts\n            \n            interface\n            UserJwtPayload\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/dto/processed.dto.ts\n            \n            class\n            ProcessedDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/filters/all-exception.filter.ts\n            \n            class\n            AllExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/interceptors/logging.interceptor.ts\n            \n            injectable\n            LoggingInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/environment.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/mailerconfig.ts\n            \n            variable\n            mailerOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            globalPrefix\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/ormconfig.ts\n            \n            variable\n            connectionOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/uploads/configs/file-filters.config.ts\n            \n            variable\n            avatarFileFilter\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/uploads/configs/file-filters.config.ts\n            \n            variable\n            imageAllowedMimeTypes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/uploads/configs/filename-generators.config.ts\n            \n            variable\n            filenameWithSuffixGenerator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/uploads/configs/filename-generators.config.ts\n            \n            variable\n            uniqueFilenameGenerator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/uploads/configs/multer.config.ts\n            \n            variable\n            getCorrectMulterConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/uploads/configs/multer.config.ts\n            \n            variable\n            multerConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/uploads/configs/multer.config.ts\n            \n            variable\n            uploadCategories\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/uploads/decorators/api-file.decorator.ts\n            \n            variable\n            ApiFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/uploads/decorators/api-files.decorator.ts\n            \n            variable\n            ApiFiles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/uploads/dto/create-upload.dto.ts\n            \n            class\n            CreateUploadDto\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                src/uploads/entities/upload.entity.ts\n            \n            class\n            Upload\n            \n                63 %\n                (7/11)\n            \n        \n        \n            \n                \n                src/uploads/models/upload-category.model.ts\n            \n            interface\n            UploadCategory\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                src/uploads/uploads.controller.ts\n            \n            controller\n            UploadsController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/uploads/uploads.service.ts\n            \n            injectable\n            UploadsService\n            \n                0 %\n                (0/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs-modules/mailer : ^1.5.1\n        \n            @nestjs/common : ^7.6.14\n        \n            @nestjs/core : ^7.6.14\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/mapped-types : ^0.1.1\n        \n            @nestjs/passport : ^7.1.5\n        \n            @nestjs/platform-express : ^7.6.14\n        \n            @nestjs/swagger : ^4.8.0\n        \n            @nestjs/typeorm : ^7.1.5\n        \n            argon2 : ^0.27.1\n        \n            class-transformer : ^0.3.1\n        \n            class-validator : ^0.12.2\n        \n            dotenv : ^8.2.0\n        \n            handlebars : ^4.7.6\n        \n            helmet : ^4.4.1\n        \n            jsonwebtoken : ^8.5.1\n        \n            nodemailer : ^6.4.17\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.5.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^6.6.3\n        \n            sharp : ^0.28.1\n        \n            swagger-ui-express : ^4.1.5\n        \n            typeorm : ^0.2.29\n        \n            typeorm-naming-strategies : ^2.0.0\n        \n            uuid : ^8.3.2\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Role   (src/.../account.entity.ts)\n                        \n                        \n                            UploadCategoryName   (src/.../upload-category.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/accounts/entities/account.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 User\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n            \n        \n\n    src/uploads/models/upload-category.model.ts\n    \n        \n            \n                \n                    \n                        \n                        UploadCategoryName\n                    \n                \n                        \n                            \n                                 Avatar\n                            \n                        \n                        \n                            \n                                Value : avatar\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\n\n\n\n\n\n\n\nUML - compodoc - changelog\n\n\nGet corresponding frontend\nIf you want the full stack you can get corresponding PWA here.\nRun it in Development\nLocal Node.js\nYou can run this project in watch/debug mode in local dev environment, to do so you need Node.js, and if you do not have Docker installed on your machine, you must create the Postgres database yourself and configure .env.development file according to it.\nExample :\n# if you want a containerized database\nnpm run docker:db\n\n# and in all cases :\n\n# install dependencies\nnpm i\n# run in development mode\nnpm run startContainerized\nYou can run this project in watch/debug mode in fully containerized environment, to do so you just need Docker (for linux users you also need Docker-compose).\nExample :\n# with docker only\ndocker-compose -f docker-compose.dev.yml --env-file .env.development up --build -V\ndocker-compose -f docker-compose.dev.yml --env-file .env.development up\n\n# if you have Docker AND Node.js installed you can use short commands :\nnpm run docker:build\nnpm run docker\nWhen you add a npm package to your project you need to force your container to build.\n\nVSCode debugger\nIf you use Visual Studio Code you can easily attach a Node.js debugger to this application. All settings are already done in .vscode folder.\nFollow this guide to know more.\nRun it in Production\nTo run your app in production mode you need to create an .env file (not followed by git), as a copy of .env.development file but with your production variables.\nContainerized\nYou can run this project in production mode in container, to do so you just need Docker.\nExample 1 : Node.js container alone\n# with docker only\ndocker build --target production -t nest-new .\ndocker run --env-file ./.env -p 3333:3333 --env PORT=3333 --name nest-new nest-newExample 2 : Production environment\n# with docker only\ndocker-compose -f docker-compose.prod.yml --env-file .env up --scale api=4 --build -V\ndocker-compose -f docker-compose.prod.yml --env-file .env up --scale api=4\n\n# if you have Docker AND Node.js installed you can use short commands :\nnpm run docker:build:prod\nnpm run docker:prodDocumentation\n\nAPI documentation: this project use Swagger, the link appear when you run npm run start command.\nCode documentation this project use Compodoc a documentation tool for Angular & Nestjs applications. It generates a static documentation of your application.\nUML documentation this project use Typeorm-uml a entity relationship diagram generator for Typeorm.\nAttention !\nUnder the hood, this library uses PlantUML to define diagrams and the official plantuml server to draw it. If you work on a project that has a strict security level you can't use the public server. Read the Typeorm-uml documentation to know more.\n\n\n\nExample :\n# api documentation: open your browser and go to doc url (change url according your conf)\nopen http://localhost:3000/api/doc\n\n# code documentation: build doc website and open it\nnpm run doc\n\n# uml documentation: build diagram and open it\nnpm run umlGit flow\nThis project respects Conventional commits, a Git commit convention made by the Angular team. Basically, every pull request should end up with one commit and a standardized commit message.\nTo easily respect this a tool is provided: Commitizen called with npm run cz command, you are not obligated to use it, if you make your commits manually they will be tested too.\n\nAttention !\nDo not commit without a node_modules folder at the root of the project (run npm i command to get it), otherwise your commit and your code will not trigger lint / format / cz scripts.\n\nExample :\n# add your changes\ngit add .\n# commit with commitizen-cli\nnpm run cz\n# push changes\ngit push\n\n# if your commit fail you can perform changes and retry with previous message\nnpm run cz -- --retryDatabase operations\nPostgres CLI\npsql is a terminal-based front-end to PostgreSQL. It enables you to type in queries interactively, issue them to PostgreSQL, and see the query results.\nExample :\n# run psql in db container\nnpm run docker:db:psqlMigrations\nMigrations provide a way to incrementally update the database schema to keep it in sync with the application's data model while preserving existing data in the database. To generate, run, and revert migrations, TypeORM provides a dedicated CLI.\nExample :\n# generate a migration\nnpm run migration:generate \n# run a migration\nnpm run migrationCreate a release\nThis project respects Semantic Versioning.\nTo easily respect this specification a tool is provided: Standard-version.\n\nNote: commit or stash any changes before create a release.\nNote: Semantic versioning works differently for versions starting with v0.x.x. Everything before v1.0.0 is considered experimental and breaking changes are only minor version bumps. The moment you feel comfortable you need to bump the version manually to v1.0.0 and then the well-known versioning kicks in where breaking changes bump the major version, features bump the minor and fixes bump the patch version.\n\nExample :\n# add your changes\ngit add .\n\n# release first version of the project (v0.0.0)\nnpm run release -- --first-release\n# OR\n# release first stable version of the project (v1.0.0)\nnpm run release -- --release-as 1.0.0\n# OR\n# perform a prerelease\nnpm run release:prerelease\n# OR\n# perform a release\nnpm run release\n\n# push your changes, WITH version tags\ngit push --follow-tags\nWhen you perform a release you automatically perform the following actions :\n\nincrement version number in package.json (uses the fix: and feat: tags to establish the semantic versioning)\nadd a Git tag\nbuild Documentation in ./docs folder\ncreate/update CHANGELOG.md\ncommit all staged changes with correct commit message\n\n\nDeploy it\n\nBy default the ORM synchronizes your models with the database, which avoids migration. This is very dangerous in production as this can result in data loss. So when you deploy a production version for the first time it is advisable to disable this option.\nExample : in your src/ormconfig.ts\nconst connectionOptions: ConnectionOptions = {\n  ...\n  // must be set to false once the first release deployed.\n  synchronize: false,\n  ...\n};\nHeroku\n\nCreate an app on Heroku\nSet Heroku config vars equals to your production .env file\ncreate a Procfile, that specifies the commands that are executed by the app on startup : echo 'web: NODE_ENV=production node dist/src/main' >> Procfile\nFollow Heroku instructions to deploy with git\n\nMake it yours\n\nClone this project and move into it\nReset git history : rm -rf .git && git init\nRun npm ci after reset git history (important for pre-commit hooks)\nReplace ALL nest-new occurrence with your project name\nReplace ALL miaborde occurrence with your Github username\nYou're good to go :)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AccountsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UploadsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AccountsModule\n\n\n\ncluster_AccountsModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAccountsService\n\nAccountsService\n\n\n\nAccountsModule\n\nAccountsModule\n\nAccountsModule -->\n\nAccountsService->AccountsModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAccountsService->AuthModule\n\n\n\n\n\nUploadsService\n\nUploadsService\n\nAccountsModule -->\n\nUploadsService->AccountsModule\n\n\n\nAuthModule -->\n\nUploadsService->AuthModule\n\n\n\n\n\nUploadsModule\n\nUploadsModule\n\nUploadsModule -->\n\nUploadsService->UploadsModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAccountsModule->AppModule\n\n\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\nAppModule -->\n\nUploadsModule->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    11 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApiFile   (src/.../api-file.decorator.ts)\n                        \n                        \n                            ApiFiles   (src/.../api-files.decorator.ts)\n                        \n                        \n                            avatarFileFilter   (src/.../file-filters.config.ts)\n                        \n                        \n                            connectionOptions   (src/.../ormconfig.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            filenameWithSuffixGenerator   (src/.../filename-generators.config.ts)\n                        \n                        \n                            getCorrectMulterConfig   (src/.../multer.config.ts)\n                        \n                        \n                            globalPrefix   (src/.../main.ts)\n                        \n                        \n                            imageAllowedMimeTypes   (src/.../file-filters.config.ts)\n                        \n                        \n                            mailerOptions   (src/.../mailerconfig.ts)\n                        \n                        \n                            multerConfig   (src/.../multer.config.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                               (src/.../main.ts)\n                        \n                        \n                            uniqueFilenameGenerator   (src/.../filename-generators.config.ts)\n                        \n                        \n                            uploadCategories   (src/.../multer.config.ts)\n                        \n                        \n                            User   (src/.../user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/uploads/decorators/api-file.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ApiFile\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (fieldName = 'file'): MethodDecorator => {\n  return applyDecorators(\n    ApiConsumes('multipart/form-data'),\n    ApiBody({\n      schema: {\n        type: 'object',\n        properties: {\n          [fieldName]: {\n            description: 'File to upload',\n            type: 'string',\n            format: 'binary',\n          },\n        },\n      },\n    }),\n  );\n}\n                        \n                    \n\n                \n                    \n                        Add multipart/form-data OpenApi definitions, for one file upload \n\n                    \n                \n\n            \n        \n\n    src/uploads/decorators/api-files.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ApiFiles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (fieldName = 'file'): MethodDecorator => {\n  return applyDecorators(\n    ApiConsumes('multipart/form-data'),\n    ApiBody({\n      isArray: true,\n      schema: {\n        type: 'object',\n        properties: {\n          [fieldName]: {\n            description: 'Files to uploads',\n            type: 'array',\n            items: {\n              type: 'string',\n              format: 'binary',\n            },\n          },\n        },\n      },\n    }),\n  );\n}\n                        \n                    \n\n                \n                    \n                        Add multipart/form-data OpenApi definitions, for many files upload \n\n                    \n                \n\n            \n        \n\n    src/uploads/configs/file-filters.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            avatarFileFilter\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (\n  req: Request,\n  file: Express.Multer.File,\n  callback: (error: Error | null, isAllowed: boolean) => void,\n): void => {\n  const isAllowed = imageAllowedMimeTypes?.includes(file.mimetype) ?? false;\n  return callback(\n    isAllowed ? null : new BadRequestException('Must be an avatar'),\n    isAllowed,\n  );\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            imageAllowedMimeTypes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : ['image/jpg', 'image/jpeg', 'image/png']\n                        \n                    \n\n\n            \n        \n\n    src/ormconfig.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            connectionOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ConnectionOptions\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  type: 'postgres',\n  host: environment.dbHost,\n  port: environment.dbPort,\n  username: environment.dbUser,\n  password: environment.dbPassword,\n  database: environment.dbName,\n  entities: [`${__dirname}/**/*.entity{.ts,.js}`],\n  // must be set to false once the first release deployed.\n  synchronize: true,\n  migrationsRun: true,\n  logging: true,\n  logger: 'file',\n  migrations: [`${__dirname}/migrations/**/*{.ts,.js}`],\n  cli: {\n    // should be inside src folder to be compiled into /dist.\n    migrationsDir: 'src/migrations',\n  },\n  namingStrategy: new SnakeNamingStrategy(),\n}\n                        \n                    \n\n\n            \n        \n\n    src/environment.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  nodeEnv: process.env.NODE_ENV as string,\n  projectName: process.env.PROJECT_NAME as string,\n  // API\n  apiName: process.env.API_NAME as string,\n  apiProtocol: process.env.API_PROTOCOL as string,\n  apiHost: process.env.API_HOST as string,\n  apiPort: parseInt((process.env.PORT || process.env.API_PORT) as string, 10),\n  apiAdminEmail: process.env.API_ADMIN_EMAIL as string,\n  apiUserJwtSecret: process.env.API_USER_JWT_SECRET as string,\n  apiUserJwtExpirationTime: process.env.API_USER_JWT_EXPIRATION_TIME as string,\n  apiEmailJwtSecret: process.env.API_EMAIL_JWT_SECRET as string,\n  apiEmailJwtExpirationTime: process.env\n    .API_EMAIL_JWT_EXPIRATION_TIME as string,\n  // API_TRANSPORT\n  apiTransportHost: process.env.API_TRANSPORT_HOST as string,\n  apiTransportPort: parseInt(process.env.API_TRANSPORT_PORT as string, 10),\n  apiTransportUser: process.env.API_TRANSPORT_USER as string,\n  apiTransportPassword: process.env.API_TRANSPORT_PASSWORD as string,\n  apiTransportFrom: process.env.MAIL_API_TRANSPORT_FROM as string,\n  // DB\n  dbHost: process.env.DB_HOST as string,\n  dbPort: parseInt(process.env.DB_PORT as string, 10),\n  dbUser: process.env.DB_USER as string,\n  dbPassword: process.env.DB_PASSWORD as string,\n  dbName: process.env.DB_NAME as string,\n  // ADMIN (for development only)\n  adminPort: parseInt(process.env.ADMIN_PORT as string, 10),\n  // PWA\n  pwaConfirmEmailUrl: process.env.PWA_CONFIRM_EMAIL_URL as string,\n  pwaResetPasswordUrl: process.env.PWA_RESET_PASSWORD_URL as string,\n}\n                        \n                    \n\n\n            \n        \n\n    src/uploads/configs/filename-generators.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            filenameWithSuffixGenerator\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (\n  filename: string,\n  suffix: string,\n): string => {\n  return `${filename.substring(\n    0,\n    filename.lastIndexOf('.'),\n  )}${suffix}${filename.substring(filename.lastIndexOf('.'))}`;\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            uniqueFilenameGenerator\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (\n  req: Request,\n  file: Express.Multer.File,\n  callback: (error: Error | null, filename: string) => void,\n): void =>\n  callback(null, `${uuid()}${extname(file.originalname).toLowerCase()}`)\n                        \n                    \n\n\n            \n        \n\n    src/uploads/configs/multer.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getCorrectMulterConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (\n  uploadCategory: UploadCategory,\n): MulterOptions => ({\n  limits: {\n    fileSize: uploadCategory.fileSizeLimit,\n    fieldNameSize: uploadCategory.fieldName.length,\n  },\n  storage: diskStorage({\n    destination: uploadCategory.destination,\n    filename: uniqueFilenameGenerator,\n  }),\n  fileFilter: uploadCategory.fileFilter,\n})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            multerConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (\n  uploadCategoryName: UploadCategoryName,\n): MulterOptions => {\n  const uploadCategory = uploadCategories.find(\n    (category) => category.fieldName === uploadCategoryName,\n  );\n  if (!uploadCategory) {\n    throw new InternalServerErrorException();\n  }\n  return getCorrectMulterConfig(uploadCategory);\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            uploadCategories\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UploadCategory[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  {\n    fieldName: UploadCategoryName.Avatar,\n    destination: 'uploads/public',\n    fileSizeLimit: 5 * 1000000, // 5 mb\n    maxWidthHeight: 720,\n    fileFilter: avatarFileFilter,\n  },\n]\n                        \n                    \n\n\n            \n        \n\n    src/main.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            globalPrefix\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'api'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : environment\n                        \n                    \n\n\n            \n        \n\n    src/mailerconfig.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            mailerOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     MailerOptions\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  transport: {\n    host: environment.apiTransportHost,\n    port: environment.apiTransportPort,\n    secure: false, // true for 465, false for other ports\n    auth: {\n      user: environment.apiTransportUser,\n      pass: environment.apiTransportPassword,\n    },\n  },\n  defaults: {\n    from: environment.apiTransportFrom, // outgoing email ID\n  },\n  preview: environment.nodeEnv !== 'production', // preview email in browser, dev only\n  template: {\n    dir: `${process.cwd()}/templates`,\n    adapter: new HandlebarsAdapter(),\n    options: {\n      strict: true,\n    },\n  },\n}\n                        \n                    \n\n\n            \n        \n\n    src/auth/decorators/roles.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Roles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (...roles: Role[]): MethodDecorator =>\n  applyDecorators(\n    SetMetadata('roles', roles),\n    UseGuards(JwtAuthGuard, RolesGuard),\n    ApiSecurity('bearer'),\n    ApiUnauthorizedResponse({ description: 'Unauthorized' }),\n    ApiForbiddenResponse({ description: 'Forbidden resource' }),\n    ApiOperation({ summary: `${roles.join(' or ')} role needed.` }),\n  )\n                        \n                    \n\n                \n                    \n                        If this decorator is present then the user needs one of the parameters roles to pass. \n\n                    \n                \n\n            \n        \n\n    src/auth/decorators/user.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            User\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator(\n  (data: unknown, context: ExecutionContext) => {\n    const request = context.switchToHttp().getRequest();\n\n    return request.user;\n  },\n)\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
